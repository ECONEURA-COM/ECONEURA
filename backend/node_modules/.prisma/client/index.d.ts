
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Chat
 * 
 */
export type Chat = $Result.DefaultSelection<Prisma.$ChatPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model ChatFeedback
 * 
 */
export type ChatFeedback = $Result.DefaultSelection<Prisma.$ChatFeedbackPayload>
/**
 * Model AgentDefinition
 * 
 */
export type AgentDefinition = $Result.DefaultSelection<Prisma.$AgentDefinitionPayload>
/**
 * Model AgentConnection
 * 
 */
export type AgentConnection = $Result.DefaultSelection<Prisma.$AgentConnectionPayload>
/**
 * Model AgentExecution
 * 
 */
export type AgentExecution = $Result.DefaultSelection<Prisma.$AgentExecutionPayload>
/**
 * Model Proposal
 * 
 */
export type Proposal = $Result.DefaultSelection<Prisma.$ProposalPayload>
/**
 * Model Approval
 * 
 */
export type Approval = $Result.DefaultSelection<Prisma.$ApprovalPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model CostTracking
 * 
 */
export type CostTracking = $Result.DefaultSelection<Prisma.$CostTrackingPayload>
/**
 * Model NeuraMetricDaily
 * 
 */
export type NeuraMetricDaily = $Result.DefaultSelection<Prisma.$NeuraMetricDailyPayload>
/**
 * Model UserConsent
 * 
 */
export type UserConsent = $Result.DefaultSelection<Prisma.$UserConsentPayload>
/**
 * Model PromptVersion
 * 
 */
export type PromptVersion = $Result.DefaultSelection<Prisma.$PromptVersionPayload>
/**
 * Model IntegrationConfig
 * 
 */
export type IntegrationConfig = $Result.DefaultSelection<Prisma.$IntegrationConfigPayload>
/**
 * Model IntegrationSyncLog
 * 
 */
export type IntegrationSyncLog = $Result.DefaultSelection<Prisma.$IntegrationSyncLogPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Organizations
 * const organizations = await prisma.organization.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Organizations
   * const organizations = await prisma.organization.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<ExtArgs>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs>;

  /**
   * `prisma.chatFeedback`: Exposes CRUD operations for the **ChatFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatFeedbacks
    * const chatFeedbacks = await prisma.chatFeedback.findMany()
    * ```
    */
  get chatFeedback(): Prisma.ChatFeedbackDelegate<ExtArgs>;

  /**
   * `prisma.agentDefinition`: Exposes CRUD operations for the **AgentDefinition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentDefinitions
    * const agentDefinitions = await prisma.agentDefinition.findMany()
    * ```
    */
  get agentDefinition(): Prisma.AgentDefinitionDelegate<ExtArgs>;

  /**
   * `prisma.agentConnection`: Exposes CRUD operations for the **AgentConnection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentConnections
    * const agentConnections = await prisma.agentConnection.findMany()
    * ```
    */
  get agentConnection(): Prisma.AgentConnectionDelegate<ExtArgs>;

  /**
   * `prisma.agentExecution`: Exposes CRUD operations for the **AgentExecution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgentExecutions
    * const agentExecutions = await prisma.agentExecution.findMany()
    * ```
    */
  get agentExecution(): Prisma.AgentExecutionDelegate<ExtArgs>;

  /**
   * `prisma.proposal`: Exposes CRUD operations for the **Proposal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proposals
    * const proposals = await prisma.proposal.findMany()
    * ```
    */
  get proposal(): Prisma.ProposalDelegate<ExtArgs>;

  /**
   * `prisma.approval`: Exposes CRUD operations for the **Approval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Approvals
    * const approvals = await prisma.approval.findMany()
    * ```
    */
  get approval(): Prisma.ApprovalDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.costTracking`: Exposes CRUD operations for the **CostTracking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CostTrackings
    * const costTrackings = await prisma.costTracking.findMany()
    * ```
    */
  get costTracking(): Prisma.CostTrackingDelegate<ExtArgs>;

  /**
   * `prisma.neuraMetricDaily`: Exposes CRUD operations for the **NeuraMetricDaily** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NeuraMetricDailies
    * const neuraMetricDailies = await prisma.neuraMetricDaily.findMany()
    * ```
    */
  get neuraMetricDaily(): Prisma.NeuraMetricDailyDelegate<ExtArgs>;

  /**
   * `prisma.userConsent`: Exposes CRUD operations for the **UserConsent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserConsents
    * const userConsents = await prisma.userConsent.findMany()
    * ```
    */
  get userConsent(): Prisma.UserConsentDelegate<ExtArgs>;

  /**
   * `prisma.promptVersion`: Exposes CRUD operations for the **PromptVersion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromptVersions
    * const promptVersions = await prisma.promptVersion.findMany()
    * ```
    */
  get promptVersion(): Prisma.PromptVersionDelegate<ExtArgs>;

  /**
   * `prisma.integrationConfig`: Exposes CRUD operations for the **IntegrationConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IntegrationConfigs
    * const integrationConfigs = await prisma.integrationConfig.findMany()
    * ```
    */
  get integrationConfig(): Prisma.IntegrationConfigDelegate<ExtArgs>;

  /**
   * `prisma.integrationSyncLog`: Exposes CRUD operations for the **IntegrationSyncLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IntegrationSyncLogs
    * const integrationSyncLogs = await prisma.integrationSyncLog.findMany()
    * ```
    */
  get integrationSyncLog(): Prisma.IntegrationSyncLogDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Organization: 'Organization',
    User: 'User',
    Session: 'Session',
    Chat: 'Chat',
    ChatMessage: 'ChatMessage',
    ChatFeedback: 'ChatFeedback',
    AgentDefinition: 'AgentDefinition',
    AgentConnection: 'AgentConnection',
    AgentExecution: 'AgentExecution',
    Proposal: 'Proposal',
    Approval: 'Approval',
    AuditLog: 'AuditLog',
    CostTracking: 'CostTracking',
    NeuraMetricDaily: 'NeuraMetricDaily',
    UserConsent: 'UserConsent',
    PromptVersion: 'PromptVersion',
    IntegrationConfig: 'IntegrationConfig',
    IntegrationSyncLog: 'IntegrationSyncLog',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "organization" | "user" | "session" | "chat" | "chatMessage" | "chatFeedback" | "agentDefinition" | "agentConnection" | "agentExecution" | "proposal" | "approval" | "auditLog" | "costTracking" | "neuraMetricDaily" | "userConsent" | "promptVersion" | "integrationConfig" | "integrationSyncLog" | "notification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Chat: {
        payload: Prisma.$ChatPayload<ExtArgs>
        fields: Prisma.ChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findFirst: {
            args: Prisma.ChatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          findMany: {
            args: Prisma.ChatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          create: {
            args: Prisma.ChatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          createMany: {
            args: Prisma.ChatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>[]
          }
          delete: {
            args: Prisma.ChatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          update: {
            args: Prisma.ChatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          deleteMany: {
            args: Prisma.ChatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.ChatGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatCountArgs<ExtArgs>
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      ChatFeedback: {
        payload: Prisma.$ChatFeedbackPayload<ExtArgs>
        fields: Prisma.ChatFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatFeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatFeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>
          }
          findFirst: {
            args: Prisma.ChatFeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatFeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>
          }
          findMany: {
            args: Prisma.ChatFeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>[]
          }
          create: {
            args: Prisma.ChatFeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>
          }
          createMany: {
            args: Prisma.ChatFeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatFeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>[]
          }
          delete: {
            args: Prisma.ChatFeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>
          }
          update: {
            args: Prisma.ChatFeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.ChatFeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatFeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatFeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatFeedbackPayload>
          }
          aggregate: {
            args: Prisma.ChatFeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatFeedback>
          }
          groupBy: {
            args: Prisma.ChatFeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatFeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<ChatFeedbackCountAggregateOutputType> | number
          }
        }
      }
      AgentDefinition: {
        payload: Prisma.$AgentDefinitionPayload<ExtArgs>
        fields: Prisma.AgentDefinitionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentDefinitionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentDefinitionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>
          }
          findFirst: {
            args: Prisma.AgentDefinitionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentDefinitionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>
          }
          findMany: {
            args: Prisma.AgentDefinitionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>[]
          }
          create: {
            args: Prisma.AgentDefinitionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>
          }
          createMany: {
            args: Prisma.AgentDefinitionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentDefinitionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>[]
          }
          delete: {
            args: Prisma.AgentDefinitionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>
          }
          update: {
            args: Prisma.AgentDefinitionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>
          }
          deleteMany: {
            args: Prisma.AgentDefinitionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentDefinitionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentDefinitionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentDefinitionPayload>
          }
          aggregate: {
            args: Prisma.AgentDefinitionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentDefinition>
          }
          groupBy: {
            args: Prisma.AgentDefinitionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentDefinitionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentDefinitionCountArgs<ExtArgs>
            result: $Utils.Optional<AgentDefinitionCountAggregateOutputType> | number
          }
        }
      }
      AgentConnection: {
        payload: Prisma.$AgentConnectionPayload<ExtArgs>
        fields: Prisma.AgentConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentConnectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentConnectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>
          }
          findFirst: {
            args: Prisma.AgentConnectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentConnectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>
          }
          findMany: {
            args: Prisma.AgentConnectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>[]
          }
          create: {
            args: Prisma.AgentConnectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>
          }
          createMany: {
            args: Prisma.AgentConnectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentConnectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>[]
          }
          delete: {
            args: Prisma.AgentConnectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>
          }
          update: {
            args: Prisma.AgentConnectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>
          }
          deleteMany: {
            args: Prisma.AgentConnectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentConnectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentConnectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentConnectionPayload>
          }
          aggregate: {
            args: Prisma.AgentConnectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentConnection>
          }
          groupBy: {
            args: Prisma.AgentConnectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentConnectionCountArgs<ExtArgs>
            result: $Utils.Optional<AgentConnectionCountAggregateOutputType> | number
          }
        }
      }
      AgentExecution: {
        payload: Prisma.$AgentExecutionPayload<ExtArgs>
        fields: Prisma.AgentExecutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgentExecutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgentExecutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>
          }
          findFirst: {
            args: Prisma.AgentExecutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgentExecutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>
          }
          findMany: {
            args: Prisma.AgentExecutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>[]
          }
          create: {
            args: Prisma.AgentExecutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>
          }
          createMany: {
            args: Prisma.AgentExecutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgentExecutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>[]
          }
          delete: {
            args: Prisma.AgentExecutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>
          }
          update: {
            args: Prisma.AgentExecutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>
          }
          deleteMany: {
            args: Prisma.AgentExecutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgentExecutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AgentExecutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgentExecutionPayload>
          }
          aggregate: {
            args: Prisma.AgentExecutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgentExecution>
          }
          groupBy: {
            args: Prisma.AgentExecutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgentExecutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgentExecutionCountArgs<ExtArgs>
            result: $Utils.Optional<AgentExecutionCountAggregateOutputType> | number
          }
        }
      }
      Proposal: {
        payload: Prisma.$ProposalPayload<ExtArgs>
        fields: Prisma.ProposalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProposalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProposalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findFirst: {
            args: Prisma.ProposalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProposalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findMany: {
            args: Prisma.ProposalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          create: {
            args: Prisma.ProposalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          createMany: {
            args: Prisma.ProposalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProposalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          delete: {
            args: Prisma.ProposalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          update: {
            args: Prisma.ProposalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          deleteMany: {
            args: Prisma.ProposalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProposalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProposalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          aggregate: {
            args: Prisma.ProposalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProposal>
          }
          groupBy: {
            args: Prisma.ProposalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProposalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProposalCountArgs<ExtArgs>
            result: $Utils.Optional<ProposalCountAggregateOutputType> | number
          }
        }
      }
      Approval: {
        payload: Prisma.$ApprovalPayload<ExtArgs>
        fields: Prisma.ApprovalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprovalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprovalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findFirst: {
            args: Prisma.ApprovalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprovalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          findMany: {
            args: Prisma.ApprovalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          create: {
            args: Prisma.ApprovalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          createMany: {
            args: Prisma.ApprovalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApprovalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>[]
          }
          delete: {
            args: Prisma.ApprovalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          update: {
            args: Prisma.ApprovalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          deleteMany: {
            args: Prisma.ApprovalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApprovalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApprovalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovalPayload>
          }
          aggregate: {
            args: Prisma.ApprovalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApproval>
          }
          groupBy: {
            args: Prisma.ApprovalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApprovalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApprovalCountArgs<ExtArgs>
            result: $Utils.Optional<ApprovalCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      CostTracking: {
        payload: Prisma.$CostTrackingPayload<ExtArgs>
        fields: Prisma.CostTrackingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CostTrackingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CostTrackingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>
          }
          findFirst: {
            args: Prisma.CostTrackingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CostTrackingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>
          }
          findMany: {
            args: Prisma.CostTrackingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>[]
          }
          create: {
            args: Prisma.CostTrackingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>
          }
          createMany: {
            args: Prisma.CostTrackingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CostTrackingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>[]
          }
          delete: {
            args: Prisma.CostTrackingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>
          }
          update: {
            args: Prisma.CostTrackingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>
          }
          deleteMany: {
            args: Prisma.CostTrackingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CostTrackingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CostTrackingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CostTrackingPayload>
          }
          aggregate: {
            args: Prisma.CostTrackingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCostTracking>
          }
          groupBy: {
            args: Prisma.CostTrackingGroupByArgs<ExtArgs>
            result: $Utils.Optional<CostTrackingGroupByOutputType>[]
          }
          count: {
            args: Prisma.CostTrackingCountArgs<ExtArgs>
            result: $Utils.Optional<CostTrackingCountAggregateOutputType> | number
          }
        }
      }
      NeuraMetricDaily: {
        payload: Prisma.$NeuraMetricDailyPayload<ExtArgs>
        fields: Prisma.NeuraMetricDailyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NeuraMetricDailyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NeuraMetricDailyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>
          }
          findFirst: {
            args: Prisma.NeuraMetricDailyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NeuraMetricDailyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>
          }
          findMany: {
            args: Prisma.NeuraMetricDailyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>[]
          }
          create: {
            args: Prisma.NeuraMetricDailyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>
          }
          createMany: {
            args: Prisma.NeuraMetricDailyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NeuraMetricDailyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>[]
          }
          delete: {
            args: Prisma.NeuraMetricDailyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>
          }
          update: {
            args: Prisma.NeuraMetricDailyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>
          }
          deleteMany: {
            args: Prisma.NeuraMetricDailyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NeuraMetricDailyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NeuraMetricDailyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeuraMetricDailyPayload>
          }
          aggregate: {
            args: Prisma.NeuraMetricDailyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNeuraMetricDaily>
          }
          groupBy: {
            args: Prisma.NeuraMetricDailyGroupByArgs<ExtArgs>
            result: $Utils.Optional<NeuraMetricDailyGroupByOutputType>[]
          }
          count: {
            args: Prisma.NeuraMetricDailyCountArgs<ExtArgs>
            result: $Utils.Optional<NeuraMetricDailyCountAggregateOutputType> | number
          }
        }
      }
      UserConsent: {
        payload: Prisma.$UserConsentPayload<ExtArgs>
        fields: Prisma.UserConsentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserConsentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserConsentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          findFirst: {
            args: Prisma.UserConsentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserConsentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          findMany: {
            args: Prisma.UserConsentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>[]
          }
          create: {
            args: Prisma.UserConsentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          createMany: {
            args: Prisma.UserConsentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserConsentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>[]
          }
          delete: {
            args: Prisma.UserConsentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          update: {
            args: Prisma.UserConsentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          deleteMany: {
            args: Prisma.UserConsentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserConsentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserConsentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          aggregate: {
            args: Prisma.UserConsentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserConsent>
          }
          groupBy: {
            args: Prisma.UserConsentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserConsentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserConsentCountArgs<ExtArgs>
            result: $Utils.Optional<UserConsentCountAggregateOutputType> | number
          }
        }
      }
      PromptVersion: {
        payload: Prisma.$PromptVersionPayload<ExtArgs>
        fields: Prisma.PromptVersionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromptVersionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromptVersionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>
          }
          findFirst: {
            args: Prisma.PromptVersionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromptVersionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>
          }
          findMany: {
            args: Prisma.PromptVersionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>[]
          }
          create: {
            args: Prisma.PromptVersionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>
          }
          createMany: {
            args: Prisma.PromptVersionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PromptVersionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>[]
          }
          delete: {
            args: Prisma.PromptVersionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>
          }
          update: {
            args: Prisma.PromptVersionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>
          }
          deleteMany: {
            args: Prisma.PromptVersionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromptVersionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromptVersionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromptVersionPayload>
          }
          aggregate: {
            args: Prisma.PromptVersionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromptVersion>
          }
          groupBy: {
            args: Prisma.PromptVersionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromptVersionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromptVersionCountArgs<ExtArgs>
            result: $Utils.Optional<PromptVersionCountAggregateOutputType> | number
          }
        }
      }
      IntegrationConfig: {
        payload: Prisma.$IntegrationConfigPayload<ExtArgs>
        fields: Prisma.IntegrationConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>
          }
          findFirst: {
            args: Prisma.IntegrationConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>
          }
          findMany: {
            args: Prisma.IntegrationConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>[]
          }
          create: {
            args: Prisma.IntegrationConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>
          }
          createMany: {
            args: Prisma.IntegrationConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>[]
          }
          delete: {
            args: Prisma.IntegrationConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>
          }
          update: {
            args: Prisma.IntegrationConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IntegrationConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationConfigPayload>
          }
          aggregate: {
            args: Prisma.IntegrationConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegrationConfig>
          }
          groupBy: {
            args: Prisma.IntegrationConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationConfigCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationConfigCountAggregateOutputType> | number
          }
        }
      }
      IntegrationSyncLog: {
        payload: Prisma.$IntegrationSyncLogPayload<ExtArgs>
        fields: Prisma.IntegrationSyncLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationSyncLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationSyncLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>
          }
          findFirst: {
            args: Prisma.IntegrationSyncLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationSyncLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>
          }
          findMany: {
            args: Prisma.IntegrationSyncLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>[]
          }
          create: {
            args: Prisma.IntegrationSyncLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>
          }
          createMany: {
            args: Prisma.IntegrationSyncLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationSyncLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>[]
          }
          delete: {
            args: Prisma.IntegrationSyncLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>
          }
          update: {
            args: Prisma.IntegrationSyncLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationSyncLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationSyncLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IntegrationSyncLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationSyncLogPayload>
          }
          aggregate: {
            args: Prisma.IntegrationSyncLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegrationSyncLog>
          }
          groupBy: {
            args: Prisma.IntegrationSyncLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationSyncLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationSyncLogCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationSyncLogCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    users: number
    chats: number
    agentConnections: number
    agentExecutions: number
    proposals: number
    auditLogs: number
    costTracking: number
    neuraMetrics: number
    integrationConfigs: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
    chats?: boolean | OrganizationCountOutputTypeCountChatsArgs
    agentConnections?: boolean | OrganizationCountOutputTypeCountAgentConnectionsArgs
    agentExecutions?: boolean | OrganizationCountOutputTypeCountAgentExecutionsArgs
    proposals?: boolean | OrganizationCountOutputTypeCountProposalsArgs
    auditLogs?: boolean | OrganizationCountOutputTypeCountAuditLogsArgs
    costTracking?: boolean | OrganizationCountOutputTypeCountCostTrackingArgs
    neuraMetrics?: boolean | OrganizationCountOutputTypeCountNeuraMetricsArgs
    integrationConfigs?: boolean | OrganizationCountOutputTypeCountIntegrationConfigsArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountAgentConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentConnectionWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountAgentExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentExecutionWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountProposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountCostTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostTrackingWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountNeuraMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeuraMetricDailyWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountIntegrationConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationConfigWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    chats: number
    chatFeedback: number
    agentConnections: number
    agentExecutions: number
    proposalsCreated: number
    approvals: number
    auditLogs: number
    notifications: number
    consents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    chats?: boolean | UserCountOutputTypeCountChatsArgs
    chatFeedback?: boolean | UserCountOutputTypeCountChatFeedbackArgs
    agentConnections?: boolean | UserCountOutputTypeCountAgentConnectionsArgs
    agentExecutions?: boolean | UserCountOutputTypeCountAgentExecutionsArgs
    proposalsCreated?: boolean | UserCountOutputTypeCountProposalsCreatedArgs
    approvals?: boolean | UserCountOutputTypeCountApprovalsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    consents?: boolean | UserCountOutputTypeCountConsentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatFeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAgentConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentConnectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAgentExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentExecutionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProposalsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConsentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserConsentWhereInput
  }


  /**
   * Count Type ChatCountOutputType
   */

  export type ChatCountOutputType = {
    messages: number
  }

  export type ChatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Count Type ChatMessageCountOutputType
   */

  export type ChatMessageCountOutputType = {
    feedback: number
  }

  export type ChatMessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedback?: boolean | ChatMessageCountOutputTypeCountFeedbackArgs
  }

  // Custom InputTypes
  /**
   * ChatMessageCountOutputType without action
   */
  export type ChatMessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessageCountOutputType
     */
    select?: ChatMessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatMessageCountOutputType without action
   */
  export type ChatMessageCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatFeedbackWhereInput
  }


  /**
   * Count Type AgentDefinitionCountOutputType
   */

  export type AgentDefinitionCountOutputType = {
    connections: number
    executions: number
  }

  export type AgentDefinitionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connections?: boolean | AgentDefinitionCountOutputTypeCountConnectionsArgs
    executions?: boolean | AgentDefinitionCountOutputTypeCountExecutionsArgs
  }

  // Custom InputTypes
  /**
   * AgentDefinitionCountOutputType without action
   */
  export type AgentDefinitionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinitionCountOutputType
     */
    select?: AgentDefinitionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AgentDefinitionCountOutputType without action
   */
  export type AgentDefinitionCountOutputTypeCountConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentConnectionWhereInput
  }

  /**
   * AgentDefinitionCountOutputType without action
   */
  export type AgentDefinitionCountOutputTypeCountExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentExecutionWhereInput
  }


  /**
   * Count Type ProposalCountOutputType
   */

  export type ProposalCountOutputType = {
    approvals: number
  }

  export type ProposalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    approvals?: boolean | ProposalCountOutputTypeCountApprovalsArgs
  }

  // Custom InputTypes
  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalCountOutputType
     */
    select?: ProposalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
  }


  /**
   * Count Type IntegrationConfigCountOutputType
   */

  export type IntegrationConfigCountOutputType = {
    syncLogs: number
  }

  export type IntegrationConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    syncLogs?: boolean | IntegrationConfigCountOutputTypeCountSyncLogsArgs
  }

  // Custom InputTypes
  /**
   * IntegrationConfigCountOutputType without action
   */
  export type IntegrationConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfigCountOutputType
     */
    select?: IntegrationConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IntegrationConfigCountOutputType without action
   */
  export type IntegrationConfigCountOutputTypeCountSyncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationSyncLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    id: number | null
    employeeCount: number | null
    annualRevenueEur: Decimal | null
  }

  export type OrganizationSumAggregateOutputType = {
    id: number | null
    employeeCount: number | null
    annualRevenueEur: Decimal | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    plan: string | null
    industry: string | null
    employeeCount: number | null
    annualRevenueEur: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    plan: string | null
    industry: string | null
    employeeCount: number | null
    annualRevenueEur: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    plan: number
    industry: number
    employeeCount: number
    annualRevenueEur: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    id?: true
    employeeCount?: true
    annualRevenueEur?: true
  }

  export type OrganizationSumAggregateInputType = {
    id?: true
    employeeCount?: true
    annualRevenueEur?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    plan?: true
    industry?: true
    employeeCount?: true
    annualRevenueEur?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    plan?: true
    industry?: true
    employeeCount?: true
    annualRevenueEur?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    plan?: true
    industry?: true
    employeeCount?: true
    annualRevenueEur?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: number
    name: string
    slug: string
    plan: string
    industry: string | null
    employeeCount: number | null
    annualRevenueEur: Decimal | null
    settings: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    plan?: boolean
    industry?: boolean
    employeeCount?: boolean
    annualRevenueEur?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Organization$usersArgs<ExtArgs>
    chats?: boolean | Organization$chatsArgs<ExtArgs>
    agentConnections?: boolean | Organization$agentConnectionsArgs<ExtArgs>
    agentExecutions?: boolean | Organization$agentExecutionsArgs<ExtArgs>
    proposals?: boolean | Organization$proposalsArgs<ExtArgs>
    auditLogs?: boolean | Organization$auditLogsArgs<ExtArgs>
    costTracking?: boolean | Organization$costTrackingArgs<ExtArgs>
    neuraMetrics?: boolean | Organization$neuraMetricsArgs<ExtArgs>
    integrationConfigs?: boolean | Organization$integrationConfigsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    plan?: boolean
    industry?: boolean
    employeeCount?: boolean
    annualRevenueEur?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    plan?: boolean
    industry?: boolean
    employeeCount?: boolean
    annualRevenueEur?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Organization$usersArgs<ExtArgs>
    chats?: boolean | Organization$chatsArgs<ExtArgs>
    agentConnections?: boolean | Organization$agentConnectionsArgs<ExtArgs>
    agentExecutions?: boolean | Organization$agentExecutionsArgs<ExtArgs>
    proposals?: boolean | Organization$proposalsArgs<ExtArgs>
    auditLogs?: boolean | Organization$auditLogsArgs<ExtArgs>
    costTracking?: boolean | Organization$costTrackingArgs<ExtArgs>
    neuraMetrics?: boolean | Organization$neuraMetricsArgs<ExtArgs>
    integrationConfigs?: boolean | Organization$integrationConfigsArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      chats: Prisma.$ChatPayload<ExtArgs>[]
      agentConnections: Prisma.$AgentConnectionPayload<ExtArgs>[]
      agentExecutions: Prisma.$AgentExecutionPayload<ExtArgs>[]
      proposals: Prisma.$ProposalPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      costTracking: Prisma.$CostTrackingPayload<ExtArgs>[]
      neuraMetrics: Prisma.$NeuraMetricDailyPayload<ExtArgs>[]
      integrationConfigs: Prisma.$IntegrationConfigPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      plan: string
      industry: string | null
      employeeCount: number | null
      annualRevenueEur: Prisma.Decimal | null
      settings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    chats<T extends Organization$chatsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany"> | Null>
    agentConnections<T extends Organization$agentConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$agentConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findMany"> | Null>
    agentExecutions<T extends Organization$agentExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$agentExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    proposals<T extends Organization$proposalsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$proposalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends Organization$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    costTracking<T extends Organization$costTrackingArgs<ExtArgs> = {}>(args?: Subset<T, Organization$costTrackingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "findMany"> | Null>
    neuraMetrics<T extends Organization$neuraMetricsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$neuraMetricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "findMany"> | Null>
    integrationConfigs<T extends Organization$integrationConfigsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$integrationConfigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */ 
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'Int'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly slug: FieldRef<"Organization", 'String'>
    readonly plan: FieldRef<"Organization", 'String'>
    readonly industry: FieldRef<"Organization", 'String'>
    readonly employeeCount: FieldRef<"Organization", 'Int'>
    readonly annualRevenueEur: FieldRef<"Organization", 'Decimal'>
    readonly settings: FieldRef<"Organization", 'Json'>
    readonly createdAt: FieldRef<"Organization", 'DateTime'>
    readonly updatedAt: FieldRef<"Organization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization.chats
   */
  export type Organization$chatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Organization.agentConnections
   */
  export type Organization$agentConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    where?: AgentConnectionWhereInput
    orderBy?: AgentConnectionOrderByWithRelationInput | AgentConnectionOrderByWithRelationInput[]
    cursor?: AgentConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentConnectionScalarFieldEnum | AgentConnectionScalarFieldEnum[]
  }

  /**
   * Organization.agentExecutions
   */
  export type Organization$agentExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    where?: AgentExecutionWhereInput
    orderBy?: AgentExecutionOrderByWithRelationInput | AgentExecutionOrderByWithRelationInput[]
    cursor?: AgentExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentExecutionScalarFieldEnum | AgentExecutionScalarFieldEnum[]
  }

  /**
   * Organization.proposals
   */
  export type Organization$proposalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    cursor?: ProposalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Organization.auditLogs
   */
  export type Organization$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Organization.costTracking
   */
  export type Organization$costTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    where?: CostTrackingWhereInput
    orderBy?: CostTrackingOrderByWithRelationInput | CostTrackingOrderByWithRelationInput[]
    cursor?: CostTrackingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CostTrackingScalarFieldEnum | CostTrackingScalarFieldEnum[]
  }

  /**
   * Organization.neuraMetrics
   */
  export type Organization$neuraMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    where?: NeuraMetricDailyWhereInput
    orderBy?: NeuraMetricDailyOrderByWithRelationInput | NeuraMetricDailyOrderByWithRelationInput[]
    cursor?: NeuraMetricDailyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NeuraMetricDailyScalarFieldEnum | NeuraMetricDailyScalarFieldEnum[]
  }

  /**
   * Organization.integrationConfigs
   */
  export type Organization$integrationConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    where?: IntegrationConfigWhereInput
    orderBy?: IntegrationConfigOrderByWithRelationInput | IntegrationConfigOrderByWithRelationInput[]
    cursor?: IntegrationConfigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationConfigScalarFieldEnum | IntegrationConfigScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    hourlyRateEur: Decimal | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
    hourlyRateEur: Decimal | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: string | null
    department: string | null
    hourlyRateEur: Decimal | null
    mfaEnabled: boolean | null
    mfaSecret: string | null
    emailVerified: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    email: string | null
    passwordHash: string | null
    name: string | null
    role: string | null
    department: string | null
    hourlyRateEur: Decimal | null
    mfaEnabled: boolean | null
    mfaSecret: string | null
    emailVerified: boolean | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    organizationId: number
    email: number
    passwordHash: number
    name: number
    role: number
    department: number
    hourlyRateEur: number
    mfaEnabled: number
    mfaSecret: number
    emailVerified: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    organizationId?: true
    hourlyRateEur?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    organizationId?: true
    hourlyRateEur?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    department?: true
    hourlyRateEur?: true
    mfaEnabled?: true
    mfaSecret?: true
    emailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    department?: true
    hourlyRateEur?: true
    mfaEnabled?: true
    mfaSecret?: true
    emailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    organizationId?: true
    email?: true
    passwordHash?: true
    name?: true
    role?: true
    department?: true
    hourlyRateEur?: true
    mfaEnabled?: true
    mfaSecret?: true
    emailVerified?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role: string
    department: string | null
    hourlyRateEur: Decimal | null
    mfaEnabled: boolean
    mfaSecret: string | null
    emailVerified: boolean
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    department?: boolean
    hourlyRateEur?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    chats?: boolean | User$chatsArgs<ExtArgs>
    chatFeedback?: boolean | User$chatFeedbackArgs<ExtArgs>
    agentConnections?: boolean | User$agentConnectionsArgs<ExtArgs>
    agentExecutions?: boolean | User$agentExecutionsArgs<ExtArgs>
    proposalsCreated?: boolean | User$proposalsCreatedArgs<ExtArgs>
    approvals?: boolean | User$approvalsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    consents?: boolean | User$consentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    department?: boolean
    hourlyRateEur?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    organizationId?: boolean
    email?: boolean
    passwordHash?: boolean
    name?: boolean
    role?: boolean
    department?: boolean
    hourlyRateEur?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    emailVerified?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    chats?: boolean | User$chatsArgs<ExtArgs>
    chatFeedback?: boolean | User$chatFeedbackArgs<ExtArgs>
    agentConnections?: boolean | User$agentConnectionsArgs<ExtArgs>
    agentExecutions?: boolean | User$agentExecutionsArgs<ExtArgs>
    proposalsCreated?: boolean | User$proposalsCreatedArgs<ExtArgs>
    approvals?: boolean | User$approvalsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    consents?: boolean | User$consentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      chats: Prisma.$ChatPayload<ExtArgs>[]
      chatFeedback: Prisma.$ChatFeedbackPayload<ExtArgs>[]
      agentConnections: Prisma.$AgentConnectionPayload<ExtArgs>[]
      agentExecutions: Prisma.$AgentExecutionPayload<ExtArgs>[]
      proposalsCreated: Prisma.$ProposalPayload<ExtArgs>[]
      approvals: Prisma.$ApprovalPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      consents: Prisma.$UserConsentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizationId: number
      email: string
      passwordHash: string
      name: string
      role: string
      department: string | null
      hourlyRateEur: Prisma.Decimal | null
      mfaEnabled: boolean
      mfaSecret: string | null
      emailVerified: boolean
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    chats<T extends User$chatsArgs<ExtArgs> = {}>(args?: Subset<T, User$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany"> | Null>
    chatFeedback<T extends User$chatFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, User$chatFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    agentConnections<T extends User$agentConnectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$agentConnectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findMany"> | Null>
    agentExecutions<T extends User$agentExecutionsArgs<ExtArgs> = {}>(args?: Subset<T, User$agentExecutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    proposalsCreated<T extends User$proposalsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$proposalsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany"> | Null>
    approvals<T extends User$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    consents<T extends User$consentsArgs<ExtArgs> = {}>(args?: Subset<T, User$consentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly organizationId: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly department: FieldRef<"User", 'String'>
    readonly hourlyRateEur: FieldRef<"User", 'Decimal'>
    readonly mfaEnabled: FieldRef<"User", 'Boolean'>
    readonly mfaSecret: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.chats
   */
  export type User$chatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    cursor?: ChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * User.chatFeedback
   */
  export type User$chatFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    where?: ChatFeedbackWhereInput
    orderBy?: ChatFeedbackOrderByWithRelationInput | ChatFeedbackOrderByWithRelationInput[]
    cursor?: ChatFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatFeedbackScalarFieldEnum | ChatFeedbackScalarFieldEnum[]
  }

  /**
   * User.agentConnections
   */
  export type User$agentConnectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    where?: AgentConnectionWhereInput
    orderBy?: AgentConnectionOrderByWithRelationInput | AgentConnectionOrderByWithRelationInput[]
    cursor?: AgentConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentConnectionScalarFieldEnum | AgentConnectionScalarFieldEnum[]
  }

  /**
   * User.agentExecutions
   */
  export type User$agentExecutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    where?: AgentExecutionWhereInput
    orderBy?: AgentExecutionOrderByWithRelationInput | AgentExecutionOrderByWithRelationInput[]
    cursor?: AgentExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentExecutionScalarFieldEnum | AgentExecutionScalarFieldEnum[]
  }

  /**
   * User.proposalsCreated
   */
  export type User$proposalsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    cursor?: ProposalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * User.approvals
   */
  export type User$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.consents
   */
  export type User$consentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    where?: UserConsentWhereInput
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    cursor?: UserConsentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: number | null
    refreshToken: string | null
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    refreshToken: string | null
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    refreshToken: number
    ipAddress: number
    userAgent: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: number
    refreshToken: string
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      refreshToken: string
      ipAddress: string | null
      userAgent: string | null
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly refreshToken: FieldRef<"Session", 'String'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Chat
   */

  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    organizationId: number | null
  }

  export type ChatSumAggregateOutputType = {
    id: bigint | null
    userId: number | null
    organizationId: number | null
  }

  export type ChatMinAggregateOutputType = {
    id: bigint | null
    userId: number | null
    organizationId: number | null
    neuraId: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatMaxAggregateOutputType = {
    id: bigint | null
    userId: number | null
    organizationId: number | null
    neuraId: string | null
    title: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    userId: number
    organizationId: number
    neuraId: number
    title: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChatAvgAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
  }

  export type ChatSumAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
  }

  export type ChatMinAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
    neuraId?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
    neuraId?: true
    title?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
    neuraId?: true
    title?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatWhereInput
    orderBy?: ChatOrderByWithAggregationInput | ChatOrderByWithAggregationInput[]
    by: ChatScalarFieldEnum[] | ChatScalarFieldEnum
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _avg?: ChatAvgAggregateInputType
    _sum?: ChatSumAggregateInputType
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }

  export type ChatGroupByOutputType = {
    id: bigint
    userId: number
    organizationId: number
    neuraId: string
    title: string | null
    createdAt: Date
    updatedAt: Date
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    organizationId?: boolean
    neuraId?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    organizationId?: boolean
    neuraId?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>

  export type ChatSelectScalar = {
    id?: boolean
    userId?: boolean
    organizationId?: boolean
    neuraId?: boolean
    title?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    messages?: boolean | Chat$messagesArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $ChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chat"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: number
      organizationId: number
      neuraId: string
      title: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chat"]>
    composites: {}
  }

  type ChatGetPayload<S extends boolean | null | undefined | ChatDefaultArgs> = $Result.GetResult<Prisma.$ChatPayload, S>

  type ChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chat'], meta: { name: 'Chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatFindUniqueArgs>(args: SelectSubset<T, ChatFindUniqueArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatFindFirstArgs>(args?: SelectSubset<T, ChatFindFirstArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatFindManyArgs>(args?: SelectSubset<T, ChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
     */
    create<T extends ChatCreateArgs>(args: SelectSubset<T, ChatCreateArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Chats.
     * @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     * @example
     * // Create many Chats
     * const chat = await prisma.chat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatCreateManyArgs>(args?: SelectSubset<T, ChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chats and returns the data saved in the database.
     * @param {ChatCreateManyAndReturnArgs} args - Arguments to create many Chats.
     * @example
     * // Create many Chats
     * const chat = await prisma.chat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chats and only return the `id`
     * const chatWithIdOnly = await prisma.chat.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
     */
    delete<T extends ChatDeleteArgs>(args: SelectSubset<T, ChatDeleteArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatUpdateArgs>(args: SelectSubset<T, ChatUpdateArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatDeleteManyArgs>(args?: SelectSubset<T, ChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatUpdateManyArgs>(args: SelectSubset<T, ChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
     */
    upsert<T extends ChatUpsertArgs>(args: SelectSubset<T, ChatUpsertArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chat model
   */
  readonly fields: ChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    messages<T extends Chat$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Chat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chat model
   */ 
  interface ChatFieldRefs {
    readonly id: FieldRef<"Chat", 'BigInt'>
    readonly userId: FieldRef<"Chat", 'Int'>
    readonly organizationId: FieldRef<"Chat", 'Int'>
    readonly neuraId: FieldRef<"Chat", 'String'>
    readonly title: FieldRef<"Chat", 'String'>
    readonly createdAt: FieldRef<"Chat", 'DateTime'>
    readonly updatedAt: FieldRef<"Chat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Chat findUnique
   */
  export type ChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findFirst
   */
  export type ChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat findMany
   */
  export type ChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: ChatOrderByWithRelationInput | ChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * Chat create
   */
  export type ChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }

  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chat createManyAndReturn
   */
  export type ChatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Chats.
     */
    data: ChatCreateManyInput | ChatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chat update
   */
  export type ChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }

  /**
   * Chat upsert
   */
  export type ChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }

  /**
   * Chat delete
   */
  export type ChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }

  /**
   * Chat.messages
   */
  export type Chat$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * Chat without action
   */
  export type ChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageAvgAggregateOutputType = {
    id: number | null
    chatId: number | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    latencyMs: number | null
  }

  export type ChatMessageSumAggregateOutputType = {
    id: bigint | null
    chatId: bigint | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    latencyMs: number | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: bigint | null
    chatId: bigint | null
    role: string | null
    content: string | null
    model: string | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    latencyMs: number | null
    createdAt: Date | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: bigint | null
    chatId: bigint | null
    role: string | null
    content: string | null
    model: string | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    latencyMs: number | null
    createdAt: Date | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    chatId: number
    role: number
    content: number
    model: number
    tokensInput: number
    tokensOutput: number
    tokensReasoning: number
    costEur: number
    latencyMs: number
    functionCalls: number
    createdAt: number
    _all: number
  }


  export type ChatMessageAvgAggregateInputType = {
    id?: true
    chatId?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    latencyMs?: true
  }

  export type ChatMessageSumAggregateInputType = {
    id?: true
    chatId?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    latencyMs?: true
  }

  export type ChatMessageMinAggregateInputType = {
    id?: true
    chatId?: true
    role?: true
    content?: true
    model?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    latencyMs?: true
    createdAt?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    chatId?: true
    role?: true
    content?: true
    model?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    latencyMs?: true
    createdAt?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    chatId?: true
    role?: true
    content?: true
    model?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    latencyMs?: true
    functionCalls?: true
    createdAt?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _avg?: ChatMessageAvgAggregateInputType
    _sum?: ChatMessageSumAggregateInputType
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: bigint
    chatId: bigint
    role: string
    content: string
    model: string | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    latencyMs: number | null
    functionCalls: JsonValue | null
    createdAt: Date
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatId?: boolean
    role?: boolean
    content?: boolean
    model?: boolean
    tokensInput?: boolean
    tokensOutput?: boolean
    tokensReasoning?: boolean
    costEur?: boolean
    latencyMs?: boolean
    functionCalls?: boolean
    createdAt?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
    feedback?: boolean | ChatMessage$feedbackArgs<ExtArgs>
    _count?: boolean | ChatMessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatId?: boolean
    role?: boolean
    content?: boolean
    model?: boolean
    tokensInput?: boolean
    tokensOutput?: boolean
    tokensReasoning?: boolean
    costEur?: boolean
    latencyMs?: boolean
    functionCalls?: boolean
    createdAt?: boolean
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    chatId?: boolean
    role?: boolean
    content?: boolean
    model?: boolean
    tokensInput?: boolean
    tokensOutput?: boolean
    tokensReasoning?: boolean
    costEur?: boolean
    latencyMs?: boolean
    functionCalls?: boolean
    createdAt?: boolean
  }

  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
    feedback?: boolean | ChatMessage$feedbackArgs<ExtArgs>
    _count?: boolean | ChatMessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | ChatDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      chat: Prisma.$ChatPayload<ExtArgs>
      feedback: Prisma.$ChatFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      chatId: bigint
      role: string
      content: string
      model: string | null
      tokensInput: number | null
      tokensOutput: number | null
      tokensReasoning: number | null
      costEur: Prisma.Decimal | null
      latencyMs: number | null
      functionCalls: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chat<T extends ChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatDefaultArgs<ExtArgs>>): Prisma__ChatClient<$Result.GetResult<Prisma.$ChatPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    feedback<T extends ChatMessage$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessage$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */ 
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'BigInt'>
    readonly chatId: FieldRef<"ChatMessage", 'BigInt'>
    readonly role: FieldRef<"ChatMessage", 'String'>
    readonly content: FieldRef<"ChatMessage", 'String'>
    readonly model: FieldRef<"ChatMessage", 'String'>
    readonly tokensInput: FieldRef<"ChatMessage", 'Int'>
    readonly tokensOutput: FieldRef<"ChatMessage", 'Int'>
    readonly tokensReasoning: FieldRef<"ChatMessage", 'Int'>
    readonly costEur: FieldRef<"ChatMessage", 'Decimal'>
    readonly latencyMs: FieldRef<"ChatMessage", 'Int'>
    readonly functionCalls: FieldRef<"ChatMessage", 'Json'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
  }

  /**
   * ChatMessage.feedback
   */
  export type ChatMessage$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    where?: ChatFeedbackWhereInput
    orderBy?: ChatFeedbackOrderByWithRelationInput | ChatFeedbackOrderByWithRelationInput[]
    cursor?: ChatFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatFeedbackScalarFieldEnum | ChatFeedbackScalarFieldEnum[]
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model ChatFeedback
   */

  export type AggregateChatFeedback = {
    _count: ChatFeedbackCountAggregateOutputType | null
    _avg: ChatFeedbackAvgAggregateOutputType | null
    _sum: ChatFeedbackSumAggregateOutputType | null
    _min: ChatFeedbackMinAggregateOutputType | null
    _max: ChatFeedbackMaxAggregateOutputType | null
  }

  export type ChatFeedbackAvgAggregateOutputType = {
    id: number | null
    messageId: number | null
    userId: number | null
    rating: number | null
  }

  export type ChatFeedbackSumAggregateOutputType = {
    id: number | null
    messageId: bigint | null
    userId: number | null
    rating: number | null
  }

  export type ChatFeedbackMinAggregateOutputType = {
    id: number | null
    messageId: bigint | null
    userId: number | null
    rating: number | null
    feedbackText: string | null
    createdAt: Date | null
  }

  export type ChatFeedbackMaxAggregateOutputType = {
    id: number | null
    messageId: bigint | null
    userId: number | null
    rating: number | null
    feedbackText: string | null
    createdAt: Date | null
  }

  export type ChatFeedbackCountAggregateOutputType = {
    id: number
    messageId: number
    userId: number
    rating: number
    feedbackText: number
    createdAt: number
    _all: number
  }


  export type ChatFeedbackAvgAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    rating?: true
  }

  export type ChatFeedbackSumAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    rating?: true
  }

  export type ChatFeedbackMinAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    rating?: true
    feedbackText?: true
    createdAt?: true
  }

  export type ChatFeedbackMaxAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    rating?: true
    feedbackText?: true
    createdAt?: true
  }

  export type ChatFeedbackCountAggregateInputType = {
    id?: true
    messageId?: true
    userId?: true
    rating?: true
    feedbackText?: true
    createdAt?: true
    _all?: true
  }

  export type ChatFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatFeedback to aggregate.
     */
    where?: ChatFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatFeedbacks to fetch.
     */
    orderBy?: ChatFeedbackOrderByWithRelationInput | ChatFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatFeedbacks
    **/
    _count?: true | ChatFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatFeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatFeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatFeedbackMaxAggregateInputType
  }

  export type GetChatFeedbackAggregateType<T extends ChatFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateChatFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatFeedback[P]>
      : GetScalarType<T[P], AggregateChatFeedback[P]>
  }




  export type ChatFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatFeedbackWhereInput
    orderBy?: ChatFeedbackOrderByWithAggregationInput | ChatFeedbackOrderByWithAggregationInput[]
    by: ChatFeedbackScalarFieldEnum[] | ChatFeedbackScalarFieldEnum
    having?: ChatFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatFeedbackCountAggregateInputType | true
    _avg?: ChatFeedbackAvgAggregateInputType
    _sum?: ChatFeedbackSumAggregateInputType
    _min?: ChatFeedbackMinAggregateInputType
    _max?: ChatFeedbackMaxAggregateInputType
  }

  export type ChatFeedbackGroupByOutputType = {
    id: number
    messageId: bigint
    userId: number
    rating: number | null
    feedbackText: string | null
    createdAt: Date
    _count: ChatFeedbackCountAggregateOutputType | null
    _avg: ChatFeedbackAvgAggregateOutputType | null
    _sum: ChatFeedbackSumAggregateOutputType | null
    _min: ChatFeedbackMinAggregateOutputType | null
    _max: ChatFeedbackMaxAggregateOutputType | null
  }

  type GetChatFeedbackGroupByPayload<T extends ChatFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], ChatFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type ChatFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    rating?: boolean
    feedbackText?: boolean
    createdAt?: boolean
    message?: boolean | ChatMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatFeedback"]>

  export type ChatFeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    userId?: boolean
    rating?: boolean
    feedbackText?: boolean
    createdAt?: boolean
    message?: boolean | ChatMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatFeedback"]>

  export type ChatFeedbackSelectScalar = {
    id?: boolean
    messageId?: boolean
    userId?: boolean
    rating?: boolean
    feedbackText?: boolean
    createdAt?: boolean
  }

  export type ChatFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | ChatMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatFeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | ChatMessageDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatFeedback"
    objects: {
      message: Prisma.$ChatMessagePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      messageId: bigint
      userId: number
      rating: number | null
      feedbackText: string | null
      createdAt: Date
    }, ExtArgs["result"]["chatFeedback"]>
    composites: {}
  }

  type ChatFeedbackGetPayload<S extends boolean | null | undefined | ChatFeedbackDefaultArgs> = $Result.GetResult<Prisma.$ChatFeedbackPayload, S>

  type ChatFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChatFeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatFeedbackCountAggregateInputType | true
    }

  export interface ChatFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatFeedback'], meta: { name: 'ChatFeedback' } }
    /**
     * Find zero or one ChatFeedback that matches the filter.
     * @param {ChatFeedbackFindUniqueArgs} args - Arguments to find a ChatFeedback
     * @example
     * // Get one ChatFeedback
     * const chatFeedback = await prisma.chatFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatFeedbackFindUniqueArgs>(args: SelectSubset<T, ChatFeedbackFindUniqueArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatFeedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChatFeedbackFindUniqueOrThrowArgs} args - Arguments to find a ChatFeedback
     * @example
     * // Get one ChatFeedback
     * const chatFeedback = await prisma.chatFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatFeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatFeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFeedbackFindFirstArgs} args - Arguments to find a ChatFeedback
     * @example
     * // Get one ChatFeedback
     * const chatFeedback = await prisma.chatFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatFeedbackFindFirstArgs>(args?: SelectSubset<T, ChatFeedbackFindFirstArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFeedbackFindFirstOrThrowArgs} args - Arguments to find a ChatFeedback
     * @example
     * // Get one ChatFeedback
     * const chatFeedback = await prisma.chatFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatFeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatFeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatFeedbacks
     * const chatFeedbacks = await prisma.chatFeedback.findMany()
     * 
     * // Get first 10 ChatFeedbacks
     * const chatFeedbacks = await prisma.chatFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatFeedbackWithIdOnly = await prisma.chatFeedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatFeedbackFindManyArgs>(args?: SelectSubset<T, ChatFeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatFeedback.
     * @param {ChatFeedbackCreateArgs} args - Arguments to create a ChatFeedback.
     * @example
     * // Create one ChatFeedback
     * const ChatFeedback = await prisma.chatFeedback.create({
     *   data: {
     *     // ... data to create a ChatFeedback
     *   }
     * })
     * 
     */
    create<T extends ChatFeedbackCreateArgs>(args: SelectSubset<T, ChatFeedbackCreateArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatFeedbacks.
     * @param {ChatFeedbackCreateManyArgs} args - Arguments to create many ChatFeedbacks.
     * @example
     * // Create many ChatFeedbacks
     * const chatFeedback = await prisma.chatFeedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatFeedbackCreateManyArgs>(args?: SelectSubset<T, ChatFeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatFeedbacks and returns the data saved in the database.
     * @param {ChatFeedbackCreateManyAndReturnArgs} args - Arguments to create many ChatFeedbacks.
     * @example
     * // Create many ChatFeedbacks
     * const chatFeedback = await prisma.chatFeedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatFeedbacks and only return the `id`
     * const chatFeedbackWithIdOnly = await prisma.chatFeedback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatFeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatFeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChatFeedback.
     * @param {ChatFeedbackDeleteArgs} args - Arguments to delete one ChatFeedback.
     * @example
     * // Delete one ChatFeedback
     * const ChatFeedback = await prisma.chatFeedback.delete({
     *   where: {
     *     // ... filter to delete one ChatFeedback
     *   }
     * })
     * 
     */
    delete<T extends ChatFeedbackDeleteArgs>(args: SelectSubset<T, ChatFeedbackDeleteArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatFeedback.
     * @param {ChatFeedbackUpdateArgs} args - Arguments to update one ChatFeedback.
     * @example
     * // Update one ChatFeedback
     * const chatFeedback = await prisma.chatFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatFeedbackUpdateArgs>(args: SelectSubset<T, ChatFeedbackUpdateArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatFeedbacks.
     * @param {ChatFeedbackDeleteManyArgs} args - Arguments to filter ChatFeedbacks to delete.
     * @example
     * // Delete a few ChatFeedbacks
     * const { count } = await prisma.chatFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatFeedbackDeleteManyArgs>(args?: SelectSubset<T, ChatFeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatFeedbacks
     * const chatFeedback = await prisma.chatFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatFeedbackUpdateManyArgs>(args: SelectSubset<T, ChatFeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatFeedback.
     * @param {ChatFeedbackUpsertArgs} args - Arguments to update or create a ChatFeedback.
     * @example
     * // Update or create a ChatFeedback
     * const chatFeedback = await prisma.chatFeedback.upsert({
     *   create: {
     *     // ... data to create a ChatFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatFeedback we want to update
     *   }
     * })
     */
    upsert<T extends ChatFeedbackUpsertArgs>(args: SelectSubset<T, ChatFeedbackUpsertArgs<ExtArgs>>): Prisma__ChatFeedbackClient<$Result.GetResult<Prisma.$ChatFeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFeedbackCountArgs} args - Arguments to filter ChatFeedbacks to count.
     * @example
     * // Count the number of ChatFeedbacks
     * const count = await prisma.chatFeedback.count({
     *   where: {
     *     // ... the filter for the ChatFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends ChatFeedbackCountArgs>(
      args?: Subset<T, ChatFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatFeedbackAggregateArgs>(args: Subset<T, ChatFeedbackAggregateArgs>): Prisma.PrismaPromise<GetChatFeedbackAggregateType<T>>

    /**
     * Group by ChatFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: ChatFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatFeedback model
   */
  readonly fields: ChatFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends ChatMessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessageDefaultArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatFeedback model
   */ 
  interface ChatFeedbackFieldRefs {
    readonly id: FieldRef<"ChatFeedback", 'Int'>
    readonly messageId: FieldRef<"ChatFeedback", 'BigInt'>
    readonly userId: FieldRef<"ChatFeedback", 'Int'>
    readonly rating: FieldRef<"ChatFeedback", 'Int'>
    readonly feedbackText: FieldRef<"ChatFeedback", 'String'>
    readonly createdAt: FieldRef<"ChatFeedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatFeedback findUnique
   */
  export type ChatFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ChatFeedback to fetch.
     */
    where: ChatFeedbackWhereUniqueInput
  }

  /**
   * ChatFeedback findUniqueOrThrow
   */
  export type ChatFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ChatFeedback to fetch.
     */
    where: ChatFeedbackWhereUniqueInput
  }

  /**
   * ChatFeedback findFirst
   */
  export type ChatFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ChatFeedback to fetch.
     */
    where?: ChatFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatFeedbacks to fetch.
     */
    orderBy?: ChatFeedbackOrderByWithRelationInput | ChatFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatFeedbacks.
     */
    cursor?: ChatFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatFeedbacks.
     */
    distinct?: ChatFeedbackScalarFieldEnum | ChatFeedbackScalarFieldEnum[]
  }

  /**
   * ChatFeedback findFirstOrThrow
   */
  export type ChatFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ChatFeedback to fetch.
     */
    where?: ChatFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatFeedbacks to fetch.
     */
    orderBy?: ChatFeedbackOrderByWithRelationInput | ChatFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatFeedbacks.
     */
    cursor?: ChatFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatFeedbacks.
     */
    distinct?: ChatFeedbackScalarFieldEnum | ChatFeedbackScalarFieldEnum[]
  }

  /**
   * ChatFeedback findMany
   */
  export type ChatFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ChatFeedbacks to fetch.
     */
    where?: ChatFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatFeedbacks to fetch.
     */
    orderBy?: ChatFeedbackOrderByWithRelationInput | ChatFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatFeedbacks.
     */
    cursor?: ChatFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatFeedbacks.
     */
    skip?: number
    distinct?: ChatFeedbackScalarFieldEnum | ChatFeedbackScalarFieldEnum[]
  }

  /**
   * ChatFeedback create
   */
  export type ChatFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatFeedback.
     */
    data: XOR<ChatFeedbackCreateInput, ChatFeedbackUncheckedCreateInput>
  }

  /**
   * ChatFeedback createMany
   */
  export type ChatFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatFeedbacks.
     */
    data: ChatFeedbackCreateManyInput | ChatFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatFeedback createManyAndReturn
   */
  export type ChatFeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChatFeedbacks.
     */
    data: ChatFeedbackCreateManyInput | ChatFeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatFeedback update
   */
  export type ChatFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatFeedback.
     */
    data: XOR<ChatFeedbackUpdateInput, ChatFeedbackUncheckedUpdateInput>
    /**
     * Choose, which ChatFeedback to update.
     */
    where: ChatFeedbackWhereUniqueInput
  }

  /**
   * ChatFeedback updateMany
   */
  export type ChatFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatFeedbacks.
     */
    data: XOR<ChatFeedbackUpdateManyMutationInput, ChatFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which ChatFeedbacks to update
     */
    where?: ChatFeedbackWhereInput
  }

  /**
   * ChatFeedback upsert
   */
  export type ChatFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatFeedback to update in case it exists.
     */
    where: ChatFeedbackWhereUniqueInput
    /**
     * In case the ChatFeedback found by the `where` argument doesn't exist, create a new ChatFeedback with this data.
     */
    create: XOR<ChatFeedbackCreateInput, ChatFeedbackUncheckedCreateInput>
    /**
     * In case the ChatFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatFeedbackUpdateInput, ChatFeedbackUncheckedUpdateInput>
  }

  /**
   * ChatFeedback delete
   */
  export type ChatFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
    /**
     * Filter which ChatFeedback to delete.
     */
    where: ChatFeedbackWhereUniqueInput
  }

  /**
   * ChatFeedback deleteMany
   */
  export type ChatFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatFeedbacks to delete
     */
    where?: ChatFeedbackWhereInput
  }

  /**
   * ChatFeedback without action
   */
  export type ChatFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatFeedback
     */
    select?: ChatFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatFeedbackInclude<ExtArgs> | null
  }


  /**
   * Model AgentDefinition
   */

  export type AggregateAgentDefinition = {
    _count: AgentDefinitionCountAggregateOutputType | null
    _avg: AgentDefinitionAvgAggregateOutputType | null
    _sum: AgentDefinitionSumAggregateOutputType | null
    _min: AgentDefinitionMinAggregateOutputType | null
    _max: AgentDefinitionMaxAggregateOutputType | null
  }

  export type AgentDefinitionAvgAggregateOutputType = {
    estimatedTimeSavedHours: Decimal | null
    estimatedRoiPercentage: Decimal | null
  }

  export type AgentDefinitionSumAggregateOutputType = {
    estimatedTimeSavedHours: Decimal | null
    estimatedRoiPercentage: Decimal | null
  }

  export type AgentDefinitionMinAggregateOutputType = {
    id: string | null
    neuraId: string | null
    name: string | null
    description: string | null
    category: string | null
    difficulty: string | null
    estimatedTimeSavedHours: Decimal | null
    estimatedRoiPercentage: Decimal | null
    createdAt: Date | null
  }

  export type AgentDefinitionMaxAggregateOutputType = {
    id: string | null
    neuraId: string | null
    name: string | null
    description: string | null
    category: string | null
    difficulty: string | null
    estimatedTimeSavedHours: Decimal | null
    estimatedRoiPercentage: Decimal | null
    createdAt: Date | null
  }

  export type AgentDefinitionCountAggregateOutputType = {
    id: number
    neuraId: number
    name: number
    description: number
    category: number
    difficulty: number
    estimatedTimeSavedHours: number
    estimatedRoiPercentage: number
    tags: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type AgentDefinitionAvgAggregateInputType = {
    estimatedTimeSavedHours?: true
    estimatedRoiPercentage?: true
  }

  export type AgentDefinitionSumAggregateInputType = {
    estimatedTimeSavedHours?: true
    estimatedRoiPercentage?: true
  }

  export type AgentDefinitionMinAggregateInputType = {
    id?: true
    neuraId?: true
    name?: true
    description?: true
    category?: true
    difficulty?: true
    estimatedTimeSavedHours?: true
    estimatedRoiPercentage?: true
    createdAt?: true
  }

  export type AgentDefinitionMaxAggregateInputType = {
    id?: true
    neuraId?: true
    name?: true
    description?: true
    category?: true
    difficulty?: true
    estimatedTimeSavedHours?: true
    estimatedRoiPercentage?: true
    createdAt?: true
  }

  export type AgentDefinitionCountAggregateInputType = {
    id?: true
    neuraId?: true
    name?: true
    description?: true
    category?: true
    difficulty?: true
    estimatedTimeSavedHours?: true
    estimatedRoiPercentage?: true
    tags?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type AgentDefinitionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentDefinition to aggregate.
     */
    where?: AgentDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentDefinitions to fetch.
     */
    orderBy?: AgentDefinitionOrderByWithRelationInput | AgentDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentDefinitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentDefinitions
    **/
    _count?: true | AgentDefinitionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentDefinitionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentDefinitionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentDefinitionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentDefinitionMaxAggregateInputType
  }

  export type GetAgentDefinitionAggregateType<T extends AgentDefinitionAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentDefinition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentDefinition[P]>
      : GetScalarType<T[P], AggregateAgentDefinition[P]>
  }




  export type AgentDefinitionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentDefinitionWhereInput
    orderBy?: AgentDefinitionOrderByWithAggregationInput | AgentDefinitionOrderByWithAggregationInput[]
    by: AgentDefinitionScalarFieldEnum[] | AgentDefinitionScalarFieldEnum
    having?: AgentDefinitionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentDefinitionCountAggregateInputType | true
    _avg?: AgentDefinitionAvgAggregateInputType
    _sum?: AgentDefinitionSumAggregateInputType
    _min?: AgentDefinitionMinAggregateInputType
    _max?: AgentDefinitionMaxAggregateInputType
  }

  export type AgentDefinitionGroupByOutputType = {
    id: string
    neuraId: string
    name: string
    description: string | null
    category: string | null
    difficulty: string | null
    estimatedTimeSavedHours: Decimal | null
    estimatedRoiPercentage: Decimal | null
    tags: string[]
    metadata: JsonValue | null
    createdAt: Date
    _count: AgentDefinitionCountAggregateOutputType | null
    _avg: AgentDefinitionAvgAggregateOutputType | null
    _sum: AgentDefinitionSumAggregateOutputType | null
    _min: AgentDefinitionMinAggregateOutputType | null
    _max: AgentDefinitionMaxAggregateOutputType | null
  }

  type GetAgentDefinitionGroupByPayload<T extends AgentDefinitionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentDefinitionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentDefinitionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentDefinitionGroupByOutputType[P]>
            : GetScalarType<T[P], AgentDefinitionGroupByOutputType[P]>
        }
      >
    >


  export type AgentDefinitionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    neuraId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    estimatedTimeSavedHours?: boolean
    estimatedRoiPercentage?: boolean
    tags?: boolean
    metadata?: boolean
    createdAt?: boolean
    connections?: boolean | AgentDefinition$connectionsArgs<ExtArgs>
    executions?: boolean | AgentDefinition$executionsArgs<ExtArgs>
    _count?: boolean | AgentDefinitionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentDefinition"]>

  export type AgentDefinitionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    neuraId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    estimatedTimeSavedHours?: boolean
    estimatedRoiPercentage?: boolean
    tags?: boolean
    metadata?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["agentDefinition"]>

  export type AgentDefinitionSelectScalar = {
    id?: boolean
    neuraId?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    difficulty?: boolean
    estimatedTimeSavedHours?: boolean
    estimatedRoiPercentage?: boolean
    tags?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type AgentDefinitionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connections?: boolean | AgentDefinition$connectionsArgs<ExtArgs>
    executions?: boolean | AgentDefinition$executionsArgs<ExtArgs>
    _count?: boolean | AgentDefinitionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AgentDefinitionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AgentDefinitionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentDefinition"
    objects: {
      connections: Prisma.$AgentConnectionPayload<ExtArgs>[]
      executions: Prisma.$AgentExecutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      neuraId: string
      name: string
      description: string | null
      category: string | null
      difficulty: string | null
      estimatedTimeSavedHours: Prisma.Decimal | null
      estimatedRoiPercentage: Prisma.Decimal | null
      tags: string[]
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["agentDefinition"]>
    composites: {}
  }

  type AgentDefinitionGetPayload<S extends boolean | null | undefined | AgentDefinitionDefaultArgs> = $Result.GetResult<Prisma.$AgentDefinitionPayload, S>

  type AgentDefinitionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentDefinitionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentDefinitionCountAggregateInputType | true
    }

  export interface AgentDefinitionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentDefinition'], meta: { name: 'AgentDefinition' } }
    /**
     * Find zero or one AgentDefinition that matches the filter.
     * @param {AgentDefinitionFindUniqueArgs} args - Arguments to find a AgentDefinition
     * @example
     * // Get one AgentDefinition
     * const agentDefinition = await prisma.agentDefinition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentDefinitionFindUniqueArgs>(args: SelectSubset<T, AgentDefinitionFindUniqueArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AgentDefinition that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentDefinitionFindUniqueOrThrowArgs} args - Arguments to find a AgentDefinition
     * @example
     * // Get one AgentDefinition
     * const agentDefinition = await prisma.agentDefinition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentDefinitionFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentDefinitionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AgentDefinition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentDefinitionFindFirstArgs} args - Arguments to find a AgentDefinition
     * @example
     * // Get one AgentDefinition
     * const agentDefinition = await prisma.agentDefinition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentDefinitionFindFirstArgs>(args?: SelectSubset<T, AgentDefinitionFindFirstArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AgentDefinition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentDefinitionFindFirstOrThrowArgs} args - Arguments to find a AgentDefinition
     * @example
     * // Get one AgentDefinition
     * const agentDefinition = await prisma.agentDefinition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentDefinitionFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentDefinitionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AgentDefinitions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentDefinitionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentDefinitions
     * const agentDefinitions = await prisma.agentDefinition.findMany()
     * 
     * // Get first 10 AgentDefinitions
     * const agentDefinitions = await prisma.agentDefinition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentDefinitionWithIdOnly = await prisma.agentDefinition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentDefinitionFindManyArgs>(args?: SelectSubset<T, AgentDefinitionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AgentDefinition.
     * @param {AgentDefinitionCreateArgs} args - Arguments to create a AgentDefinition.
     * @example
     * // Create one AgentDefinition
     * const AgentDefinition = await prisma.agentDefinition.create({
     *   data: {
     *     // ... data to create a AgentDefinition
     *   }
     * })
     * 
     */
    create<T extends AgentDefinitionCreateArgs>(args: SelectSubset<T, AgentDefinitionCreateArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AgentDefinitions.
     * @param {AgentDefinitionCreateManyArgs} args - Arguments to create many AgentDefinitions.
     * @example
     * // Create many AgentDefinitions
     * const agentDefinition = await prisma.agentDefinition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentDefinitionCreateManyArgs>(args?: SelectSubset<T, AgentDefinitionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgentDefinitions and returns the data saved in the database.
     * @param {AgentDefinitionCreateManyAndReturnArgs} args - Arguments to create many AgentDefinitions.
     * @example
     * // Create many AgentDefinitions
     * const agentDefinition = await prisma.agentDefinition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgentDefinitions and only return the `id`
     * const agentDefinitionWithIdOnly = await prisma.agentDefinition.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentDefinitionCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentDefinitionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AgentDefinition.
     * @param {AgentDefinitionDeleteArgs} args - Arguments to delete one AgentDefinition.
     * @example
     * // Delete one AgentDefinition
     * const AgentDefinition = await prisma.agentDefinition.delete({
     *   where: {
     *     // ... filter to delete one AgentDefinition
     *   }
     * })
     * 
     */
    delete<T extends AgentDefinitionDeleteArgs>(args: SelectSubset<T, AgentDefinitionDeleteArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AgentDefinition.
     * @param {AgentDefinitionUpdateArgs} args - Arguments to update one AgentDefinition.
     * @example
     * // Update one AgentDefinition
     * const agentDefinition = await prisma.agentDefinition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentDefinitionUpdateArgs>(args: SelectSubset<T, AgentDefinitionUpdateArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AgentDefinitions.
     * @param {AgentDefinitionDeleteManyArgs} args - Arguments to filter AgentDefinitions to delete.
     * @example
     * // Delete a few AgentDefinitions
     * const { count } = await prisma.agentDefinition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentDefinitionDeleteManyArgs>(args?: SelectSubset<T, AgentDefinitionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentDefinitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentDefinitionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentDefinitions
     * const agentDefinition = await prisma.agentDefinition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentDefinitionUpdateManyArgs>(args: SelectSubset<T, AgentDefinitionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgentDefinition.
     * @param {AgentDefinitionUpsertArgs} args - Arguments to update or create a AgentDefinition.
     * @example
     * // Update or create a AgentDefinition
     * const agentDefinition = await prisma.agentDefinition.upsert({
     *   create: {
     *     // ... data to create a AgentDefinition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentDefinition we want to update
     *   }
     * })
     */
    upsert<T extends AgentDefinitionUpsertArgs>(args: SelectSubset<T, AgentDefinitionUpsertArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AgentDefinitions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentDefinitionCountArgs} args - Arguments to filter AgentDefinitions to count.
     * @example
     * // Count the number of AgentDefinitions
     * const count = await prisma.agentDefinition.count({
     *   where: {
     *     // ... the filter for the AgentDefinitions we want to count
     *   }
     * })
    **/
    count<T extends AgentDefinitionCountArgs>(
      args?: Subset<T, AgentDefinitionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentDefinitionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentDefinition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentDefinitionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentDefinitionAggregateArgs>(args: Subset<T, AgentDefinitionAggregateArgs>): Prisma.PrismaPromise<GetAgentDefinitionAggregateType<T>>

    /**
     * Group by AgentDefinition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentDefinitionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentDefinitionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentDefinitionGroupByArgs['orderBy'] }
        : { orderBy?: AgentDefinitionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentDefinitionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentDefinitionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentDefinition model
   */
  readonly fields: AgentDefinitionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentDefinition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentDefinitionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    connections<T extends AgentDefinition$connectionsArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefinition$connectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findMany"> | Null>
    executions<T extends AgentDefinition$executionsArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefinition$executionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentDefinition model
   */ 
  interface AgentDefinitionFieldRefs {
    readonly id: FieldRef<"AgentDefinition", 'String'>
    readonly neuraId: FieldRef<"AgentDefinition", 'String'>
    readonly name: FieldRef<"AgentDefinition", 'String'>
    readonly description: FieldRef<"AgentDefinition", 'String'>
    readonly category: FieldRef<"AgentDefinition", 'String'>
    readonly difficulty: FieldRef<"AgentDefinition", 'String'>
    readonly estimatedTimeSavedHours: FieldRef<"AgentDefinition", 'Decimal'>
    readonly estimatedRoiPercentage: FieldRef<"AgentDefinition", 'Decimal'>
    readonly tags: FieldRef<"AgentDefinition", 'String[]'>
    readonly metadata: FieldRef<"AgentDefinition", 'Json'>
    readonly createdAt: FieldRef<"AgentDefinition", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AgentDefinition findUnique
   */
  export type AgentDefinitionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which AgentDefinition to fetch.
     */
    where: AgentDefinitionWhereUniqueInput
  }

  /**
   * AgentDefinition findUniqueOrThrow
   */
  export type AgentDefinitionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which AgentDefinition to fetch.
     */
    where: AgentDefinitionWhereUniqueInput
  }

  /**
   * AgentDefinition findFirst
   */
  export type AgentDefinitionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which AgentDefinition to fetch.
     */
    where?: AgentDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentDefinitions to fetch.
     */
    orderBy?: AgentDefinitionOrderByWithRelationInput | AgentDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentDefinitions.
     */
    cursor?: AgentDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentDefinitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentDefinitions.
     */
    distinct?: AgentDefinitionScalarFieldEnum | AgentDefinitionScalarFieldEnum[]
  }

  /**
   * AgentDefinition findFirstOrThrow
   */
  export type AgentDefinitionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which AgentDefinition to fetch.
     */
    where?: AgentDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentDefinitions to fetch.
     */
    orderBy?: AgentDefinitionOrderByWithRelationInput | AgentDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentDefinitions.
     */
    cursor?: AgentDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentDefinitions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentDefinitions.
     */
    distinct?: AgentDefinitionScalarFieldEnum | AgentDefinitionScalarFieldEnum[]
  }

  /**
   * AgentDefinition findMany
   */
  export type AgentDefinitionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * Filter, which AgentDefinitions to fetch.
     */
    where?: AgentDefinitionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentDefinitions to fetch.
     */
    orderBy?: AgentDefinitionOrderByWithRelationInput | AgentDefinitionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentDefinitions.
     */
    cursor?: AgentDefinitionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentDefinitions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentDefinitions.
     */
    skip?: number
    distinct?: AgentDefinitionScalarFieldEnum | AgentDefinitionScalarFieldEnum[]
  }

  /**
   * AgentDefinition create
   */
  export type AgentDefinitionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentDefinition.
     */
    data: XOR<AgentDefinitionCreateInput, AgentDefinitionUncheckedCreateInput>
  }

  /**
   * AgentDefinition createMany
   */
  export type AgentDefinitionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentDefinitions.
     */
    data: AgentDefinitionCreateManyInput | AgentDefinitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentDefinition createManyAndReturn
   */
  export type AgentDefinitionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AgentDefinitions.
     */
    data: AgentDefinitionCreateManyInput | AgentDefinitionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentDefinition update
   */
  export type AgentDefinitionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentDefinition.
     */
    data: XOR<AgentDefinitionUpdateInput, AgentDefinitionUncheckedUpdateInput>
    /**
     * Choose, which AgentDefinition to update.
     */
    where: AgentDefinitionWhereUniqueInput
  }

  /**
   * AgentDefinition updateMany
   */
  export type AgentDefinitionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentDefinitions.
     */
    data: XOR<AgentDefinitionUpdateManyMutationInput, AgentDefinitionUncheckedUpdateManyInput>
    /**
     * Filter which AgentDefinitions to update
     */
    where?: AgentDefinitionWhereInput
  }

  /**
   * AgentDefinition upsert
   */
  export type AgentDefinitionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentDefinition to update in case it exists.
     */
    where: AgentDefinitionWhereUniqueInput
    /**
     * In case the AgentDefinition found by the `where` argument doesn't exist, create a new AgentDefinition with this data.
     */
    create: XOR<AgentDefinitionCreateInput, AgentDefinitionUncheckedCreateInput>
    /**
     * In case the AgentDefinition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentDefinitionUpdateInput, AgentDefinitionUncheckedUpdateInput>
  }

  /**
   * AgentDefinition delete
   */
  export type AgentDefinitionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
    /**
     * Filter which AgentDefinition to delete.
     */
    where: AgentDefinitionWhereUniqueInput
  }

  /**
   * AgentDefinition deleteMany
   */
  export type AgentDefinitionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentDefinitions to delete
     */
    where?: AgentDefinitionWhereInput
  }

  /**
   * AgentDefinition.connections
   */
  export type AgentDefinition$connectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    where?: AgentConnectionWhereInput
    orderBy?: AgentConnectionOrderByWithRelationInput | AgentConnectionOrderByWithRelationInput[]
    cursor?: AgentConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentConnectionScalarFieldEnum | AgentConnectionScalarFieldEnum[]
  }

  /**
   * AgentDefinition.executions
   */
  export type AgentDefinition$executionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    where?: AgentExecutionWhereInput
    orderBy?: AgentExecutionOrderByWithRelationInput | AgentExecutionOrderByWithRelationInput[]
    cursor?: AgentExecutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgentExecutionScalarFieldEnum | AgentExecutionScalarFieldEnum[]
  }

  /**
   * AgentDefinition without action
   */
  export type AgentDefinitionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentDefinition
     */
    select?: AgentDefinitionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentDefinitionInclude<ExtArgs> | null
  }


  /**
   * Model AgentConnection
   */

  export type AggregateAgentConnection = {
    _count: AgentConnectionCountAggregateOutputType | null
    _avg: AgentConnectionAvgAggregateOutputType | null
    _sum: AgentConnectionSumAggregateOutputType | null
    _min: AgentConnectionMinAggregateOutputType | null
    _max: AgentConnectionMaxAggregateOutputType | null
  }

  export type AgentConnectionAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    userId: number | null
  }

  export type AgentConnectionSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
    userId: number | null
  }

  export type AgentConnectionMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    userId: number | null
    agentId: string | null
    provider: string | null
    webhookUrl: string | null
    apiKeyEncrypted: string | null
    isActive: boolean | null
    lastTestedAt: Date | null
    lastTestSuccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgentConnectionMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    userId: number | null
    agentId: string | null
    provider: string | null
    webhookUrl: string | null
    apiKeyEncrypted: string | null
    isActive: boolean | null
    lastTestedAt: Date | null
    lastTestSuccess: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgentConnectionCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    agentId: number
    provider: number
    webhookUrl: number
    apiKeyEncrypted: number
    config: number
    isActive: number
    lastTestedAt: number
    lastTestSuccess: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgentConnectionAvgAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
  }

  export type AgentConnectionSumAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
  }

  export type AgentConnectionMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    agentId?: true
    provider?: true
    webhookUrl?: true
    apiKeyEncrypted?: true
    isActive?: true
    lastTestedAt?: true
    lastTestSuccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgentConnectionMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    agentId?: true
    provider?: true
    webhookUrl?: true
    apiKeyEncrypted?: true
    isActive?: true
    lastTestedAt?: true
    lastTestSuccess?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgentConnectionCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    agentId?: true
    provider?: true
    webhookUrl?: true
    apiKeyEncrypted?: true
    config?: true
    isActive?: true
    lastTestedAt?: true
    lastTestSuccess?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgentConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentConnection to aggregate.
     */
    where?: AgentConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentConnections to fetch.
     */
    orderBy?: AgentConnectionOrderByWithRelationInput | AgentConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentConnections
    **/
    _count?: true | AgentConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentConnectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentConnectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentConnectionMaxAggregateInputType
  }

  export type GetAgentConnectionAggregateType<T extends AgentConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentConnection[P]>
      : GetScalarType<T[P], AggregateAgentConnection[P]>
  }




  export type AgentConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentConnectionWhereInput
    orderBy?: AgentConnectionOrderByWithAggregationInput | AgentConnectionOrderByWithAggregationInput[]
    by: AgentConnectionScalarFieldEnum[] | AgentConnectionScalarFieldEnum
    having?: AgentConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentConnectionCountAggregateInputType | true
    _avg?: AgentConnectionAvgAggregateInputType
    _sum?: AgentConnectionSumAggregateInputType
    _min?: AgentConnectionMinAggregateInputType
    _max?: AgentConnectionMaxAggregateInputType
  }

  export type AgentConnectionGroupByOutputType = {
    id: number
    organizationId: number
    userId: number
    agentId: string
    provider: string
    webhookUrl: string | null
    apiKeyEncrypted: string | null
    config: JsonValue | null
    isActive: boolean
    lastTestedAt: Date | null
    lastTestSuccess: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: AgentConnectionCountAggregateOutputType | null
    _avg: AgentConnectionAvgAggregateOutputType | null
    _sum: AgentConnectionSumAggregateOutputType | null
    _min: AgentConnectionMinAggregateOutputType | null
    _max: AgentConnectionMaxAggregateOutputType | null
  }

  type GetAgentConnectionGroupByPayload<T extends AgentConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], AgentConnectionGroupByOutputType[P]>
        }
      >
    >


  export type AgentConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    agentId?: boolean
    provider?: boolean
    webhookUrl?: boolean
    apiKeyEncrypted?: boolean
    config?: boolean
    isActive?: boolean
    lastTestedAt?: boolean
    lastTestSuccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentConnection"]>

  export type AgentConnectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    agentId?: boolean
    provider?: boolean
    webhookUrl?: boolean
    apiKeyEncrypted?: boolean
    config?: boolean
    isActive?: boolean
    lastTestedAt?: boolean
    lastTestSuccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentConnection"]>

  export type AgentConnectionSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    agentId?: boolean
    provider?: boolean
    webhookUrl?: boolean
    apiKeyEncrypted?: boolean
    config?: boolean
    isActive?: boolean
    lastTestedAt?: boolean
    lastTestSuccess?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgentConnectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }
  export type AgentConnectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }

  export type $AgentConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentConnection"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      agentDefinition: Prisma.$AgentDefinitionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizationId: number
      userId: number
      agentId: string
      provider: string
      webhookUrl: string | null
      apiKeyEncrypted: string | null
      config: Prisma.JsonValue | null
      isActive: boolean
      lastTestedAt: Date | null
      lastTestSuccess: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["agentConnection"]>
    composites: {}
  }

  type AgentConnectionGetPayload<S extends boolean | null | undefined | AgentConnectionDefaultArgs> = $Result.GetResult<Prisma.$AgentConnectionPayload, S>

  type AgentConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentConnectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentConnectionCountAggregateInputType | true
    }

  export interface AgentConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentConnection'], meta: { name: 'AgentConnection' } }
    /**
     * Find zero or one AgentConnection that matches the filter.
     * @param {AgentConnectionFindUniqueArgs} args - Arguments to find a AgentConnection
     * @example
     * // Get one AgentConnection
     * const agentConnection = await prisma.agentConnection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentConnectionFindUniqueArgs>(args: SelectSubset<T, AgentConnectionFindUniqueArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AgentConnection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentConnectionFindUniqueOrThrowArgs} args - Arguments to find a AgentConnection
     * @example
     * // Get one AgentConnection
     * const agentConnection = await prisma.agentConnection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentConnectionFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentConnectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AgentConnection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentConnectionFindFirstArgs} args - Arguments to find a AgentConnection
     * @example
     * // Get one AgentConnection
     * const agentConnection = await prisma.agentConnection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentConnectionFindFirstArgs>(args?: SelectSubset<T, AgentConnectionFindFirstArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AgentConnection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentConnectionFindFirstOrThrowArgs} args - Arguments to find a AgentConnection
     * @example
     * // Get one AgentConnection
     * const agentConnection = await prisma.agentConnection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentConnectionFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentConnectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AgentConnections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentConnectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentConnections
     * const agentConnections = await prisma.agentConnection.findMany()
     * 
     * // Get first 10 AgentConnections
     * const agentConnections = await prisma.agentConnection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentConnectionWithIdOnly = await prisma.agentConnection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentConnectionFindManyArgs>(args?: SelectSubset<T, AgentConnectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AgentConnection.
     * @param {AgentConnectionCreateArgs} args - Arguments to create a AgentConnection.
     * @example
     * // Create one AgentConnection
     * const AgentConnection = await prisma.agentConnection.create({
     *   data: {
     *     // ... data to create a AgentConnection
     *   }
     * })
     * 
     */
    create<T extends AgentConnectionCreateArgs>(args: SelectSubset<T, AgentConnectionCreateArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AgentConnections.
     * @param {AgentConnectionCreateManyArgs} args - Arguments to create many AgentConnections.
     * @example
     * // Create many AgentConnections
     * const agentConnection = await prisma.agentConnection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentConnectionCreateManyArgs>(args?: SelectSubset<T, AgentConnectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgentConnections and returns the data saved in the database.
     * @param {AgentConnectionCreateManyAndReturnArgs} args - Arguments to create many AgentConnections.
     * @example
     * // Create many AgentConnections
     * const agentConnection = await prisma.agentConnection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgentConnections and only return the `id`
     * const agentConnectionWithIdOnly = await prisma.agentConnection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentConnectionCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentConnectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AgentConnection.
     * @param {AgentConnectionDeleteArgs} args - Arguments to delete one AgentConnection.
     * @example
     * // Delete one AgentConnection
     * const AgentConnection = await prisma.agentConnection.delete({
     *   where: {
     *     // ... filter to delete one AgentConnection
     *   }
     * })
     * 
     */
    delete<T extends AgentConnectionDeleteArgs>(args: SelectSubset<T, AgentConnectionDeleteArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AgentConnection.
     * @param {AgentConnectionUpdateArgs} args - Arguments to update one AgentConnection.
     * @example
     * // Update one AgentConnection
     * const agentConnection = await prisma.agentConnection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentConnectionUpdateArgs>(args: SelectSubset<T, AgentConnectionUpdateArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AgentConnections.
     * @param {AgentConnectionDeleteManyArgs} args - Arguments to filter AgentConnections to delete.
     * @example
     * // Delete a few AgentConnections
     * const { count } = await prisma.agentConnection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentConnectionDeleteManyArgs>(args?: SelectSubset<T, AgentConnectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentConnections
     * const agentConnection = await prisma.agentConnection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentConnectionUpdateManyArgs>(args: SelectSubset<T, AgentConnectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgentConnection.
     * @param {AgentConnectionUpsertArgs} args - Arguments to update or create a AgentConnection.
     * @example
     * // Update or create a AgentConnection
     * const agentConnection = await prisma.agentConnection.upsert({
     *   create: {
     *     // ... data to create a AgentConnection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentConnection we want to update
     *   }
     * })
     */
    upsert<T extends AgentConnectionUpsertArgs>(args: SelectSubset<T, AgentConnectionUpsertArgs<ExtArgs>>): Prisma__AgentConnectionClient<$Result.GetResult<Prisma.$AgentConnectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AgentConnections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentConnectionCountArgs} args - Arguments to filter AgentConnections to count.
     * @example
     * // Count the number of AgentConnections
     * const count = await prisma.agentConnection.count({
     *   where: {
     *     // ... the filter for the AgentConnections we want to count
     *   }
     * })
    **/
    count<T extends AgentConnectionCountArgs>(
      args?: Subset<T, AgentConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentConnectionAggregateArgs>(args: Subset<T, AgentConnectionAggregateArgs>): Prisma.PrismaPromise<GetAgentConnectionAggregateType<T>>

    /**
     * Group by AgentConnection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentConnectionGroupByArgs['orderBy'] }
        : { orderBy?: AgentConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentConnection model
   */
  readonly fields: AgentConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentConnection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    agentDefinition<T extends AgentDefinitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefinitionDefaultArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentConnection model
   */ 
  interface AgentConnectionFieldRefs {
    readonly id: FieldRef<"AgentConnection", 'Int'>
    readonly organizationId: FieldRef<"AgentConnection", 'Int'>
    readonly userId: FieldRef<"AgentConnection", 'Int'>
    readonly agentId: FieldRef<"AgentConnection", 'String'>
    readonly provider: FieldRef<"AgentConnection", 'String'>
    readonly webhookUrl: FieldRef<"AgentConnection", 'String'>
    readonly apiKeyEncrypted: FieldRef<"AgentConnection", 'String'>
    readonly config: FieldRef<"AgentConnection", 'Json'>
    readonly isActive: FieldRef<"AgentConnection", 'Boolean'>
    readonly lastTestedAt: FieldRef<"AgentConnection", 'DateTime'>
    readonly lastTestSuccess: FieldRef<"AgentConnection", 'Boolean'>
    readonly createdAt: FieldRef<"AgentConnection", 'DateTime'>
    readonly updatedAt: FieldRef<"AgentConnection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AgentConnection findUnique
   */
  export type AgentConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * Filter, which AgentConnection to fetch.
     */
    where: AgentConnectionWhereUniqueInput
  }

  /**
   * AgentConnection findUniqueOrThrow
   */
  export type AgentConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * Filter, which AgentConnection to fetch.
     */
    where: AgentConnectionWhereUniqueInput
  }

  /**
   * AgentConnection findFirst
   */
  export type AgentConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * Filter, which AgentConnection to fetch.
     */
    where?: AgentConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentConnections to fetch.
     */
    orderBy?: AgentConnectionOrderByWithRelationInput | AgentConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentConnections.
     */
    cursor?: AgentConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentConnections.
     */
    distinct?: AgentConnectionScalarFieldEnum | AgentConnectionScalarFieldEnum[]
  }

  /**
   * AgentConnection findFirstOrThrow
   */
  export type AgentConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * Filter, which AgentConnection to fetch.
     */
    where?: AgentConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentConnections to fetch.
     */
    orderBy?: AgentConnectionOrderByWithRelationInput | AgentConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentConnections.
     */
    cursor?: AgentConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentConnections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentConnections.
     */
    distinct?: AgentConnectionScalarFieldEnum | AgentConnectionScalarFieldEnum[]
  }

  /**
   * AgentConnection findMany
   */
  export type AgentConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * Filter, which AgentConnections to fetch.
     */
    where?: AgentConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentConnections to fetch.
     */
    orderBy?: AgentConnectionOrderByWithRelationInput | AgentConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentConnections.
     */
    cursor?: AgentConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentConnections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentConnections.
     */
    skip?: number
    distinct?: AgentConnectionScalarFieldEnum | AgentConnectionScalarFieldEnum[]
  }

  /**
   * AgentConnection create
   */
  export type AgentConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentConnection.
     */
    data: XOR<AgentConnectionCreateInput, AgentConnectionUncheckedCreateInput>
  }

  /**
   * AgentConnection createMany
   */
  export type AgentConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentConnections.
     */
    data: AgentConnectionCreateManyInput | AgentConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentConnection createManyAndReturn
   */
  export type AgentConnectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AgentConnections.
     */
    data: AgentConnectionCreateManyInput | AgentConnectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgentConnection update
   */
  export type AgentConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentConnection.
     */
    data: XOR<AgentConnectionUpdateInput, AgentConnectionUncheckedUpdateInput>
    /**
     * Choose, which AgentConnection to update.
     */
    where: AgentConnectionWhereUniqueInput
  }

  /**
   * AgentConnection updateMany
   */
  export type AgentConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentConnections.
     */
    data: XOR<AgentConnectionUpdateManyMutationInput, AgentConnectionUncheckedUpdateManyInput>
    /**
     * Filter which AgentConnections to update
     */
    where?: AgentConnectionWhereInput
  }

  /**
   * AgentConnection upsert
   */
  export type AgentConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentConnection to update in case it exists.
     */
    where: AgentConnectionWhereUniqueInput
    /**
     * In case the AgentConnection found by the `where` argument doesn't exist, create a new AgentConnection with this data.
     */
    create: XOR<AgentConnectionCreateInput, AgentConnectionUncheckedCreateInput>
    /**
     * In case the AgentConnection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentConnectionUpdateInput, AgentConnectionUncheckedUpdateInput>
  }

  /**
   * AgentConnection delete
   */
  export type AgentConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
    /**
     * Filter which AgentConnection to delete.
     */
    where: AgentConnectionWhereUniqueInput
  }

  /**
   * AgentConnection deleteMany
   */
  export type AgentConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentConnections to delete
     */
    where?: AgentConnectionWhereInput
  }

  /**
   * AgentConnection without action
   */
  export type AgentConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentConnection
     */
    select?: AgentConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentConnectionInclude<ExtArgs> | null
  }


  /**
   * Model AgentExecution
   */

  export type AggregateAgentExecution = {
    _count: AgentExecutionCountAggregateOutputType | null
    _avg: AgentExecutionAvgAggregateOutputType | null
    _sum: AgentExecutionSumAggregateOutputType | null
    _min: AgentExecutionMinAggregateOutputType | null
    _max: AgentExecutionMaxAggregateOutputType | null
  }

  export type AgentExecutionAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    userId: number | null
    chatMessageId: number | null
    proposalId: number | null
    durationMs: number | null
    retryCount: number | null
  }

  export type AgentExecutionSumAggregateOutputType = {
    id: bigint | null
    organizationId: number | null
    userId: number | null
    chatMessageId: bigint | null
    proposalId: number | null
    durationMs: number | null
    retryCount: number | null
  }

  export type AgentExecutionMinAggregateOutputType = {
    id: bigint | null
    organizationId: number | null
    userId: number | null
    agentId: string | null
    neuraId: string | null
    chatMessageId: bigint | null
    proposalId: number | null
    status: string | null
    errorMessage: string | null
    durationMs: number | null
    retryCount: number | null
    idempotencyKey: string | null
    createdAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type AgentExecutionMaxAggregateOutputType = {
    id: bigint | null
    organizationId: number | null
    userId: number | null
    agentId: string | null
    neuraId: string | null
    chatMessageId: bigint | null
    proposalId: number | null
    status: string | null
    errorMessage: string | null
    durationMs: number | null
    retryCount: number | null
    idempotencyKey: string | null
    createdAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type AgentExecutionCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    agentId: number
    neuraId: number
    chatMessageId: number
    proposalId: number
    parameters: number
    result: number
    status: number
    errorMessage: number
    durationMs: number
    retryCount: number
    idempotencyKey: number
    createdAt: number
    startedAt: number
    completedAt: number
    _all: number
  }


  export type AgentExecutionAvgAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    chatMessageId?: true
    proposalId?: true
    durationMs?: true
    retryCount?: true
  }

  export type AgentExecutionSumAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    chatMessageId?: true
    proposalId?: true
    durationMs?: true
    retryCount?: true
  }

  export type AgentExecutionMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    agentId?: true
    neuraId?: true
    chatMessageId?: true
    proposalId?: true
    status?: true
    errorMessage?: true
    durationMs?: true
    retryCount?: true
    idempotencyKey?: true
    createdAt?: true
    startedAt?: true
    completedAt?: true
  }

  export type AgentExecutionMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    agentId?: true
    neuraId?: true
    chatMessageId?: true
    proposalId?: true
    status?: true
    errorMessage?: true
    durationMs?: true
    retryCount?: true
    idempotencyKey?: true
    createdAt?: true
    startedAt?: true
    completedAt?: true
  }

  export type AgentExecutionCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    agentId?: true
    neuraId?: true
    chatMessageId?: true
    proposalId?: true
    parameters?: true
    result?: true
    status?: true
    errorMessage?: true
    durationMs?: true
    retryCount?: true
    idempotencyKey?: true
    createdAt?: true
    startedAt?: true
    completedAt?: true
    _all?: true
  }

  export type AgentExecutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentExecution to aggregate.
     */
    where?: AgentExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentExecutions to fetch.
     */
    orderBy?: AgentExecutionOrderByWithRelationInput | AgentExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgentExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgentExecutions
    **/
    _count?: true | AgentExecutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgentExecutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgentExecutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgentExecutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgentExecutionMaxAggregateInputType
  }

  export type GetAgentExecutionAggregateType<T extends AgentExecutionAggregateArgs> = {
        [P in keyof T & keyof AggregateAgentExecution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgentExecution[P]>
      : GetScalarType<T[P], AggregateAgentExecution[P]>
  }




  export type AgentExecutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgentExecutionWhereInput
    orderBy?: AgentExecutionOrderByWithAggregationInput | AgentExecutionOrderByWithAggregationInput[]
    by: AgentExecutionScalarFieldEnum[] | AgentExecutionScalarFieldEnum
    having?: AgentExecutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgentExecutionCountAggregateInputType | true
    _avg?: AgentExecutionAvgAggregateInputType
    _sum?: AgentExecutionSumAggregateInputType
    _min?: AgentExecutionMinAggregateInputType
    _max?: AgentExecutionMaxAggregateInputType
  }

  export type AgentExecutionGroupByOutputType = {
    id: bigint
    organizationId: number
    userId: number
    agentId: string
    neuraId: string | null
    chatMessageId: bigint | null
    proposalId: number | null
    parameters: JsonValue | null
    result: JsonValue | null
    status: string
    errorMessage: string | null
    durationMs: number | null
    retryCount: number
    idempotencyKey: string | null
    createdAt: Date
    startedAt: Date | null
    completedAt: Date | null
    _count: AgentExecutionCountAggregateOutputType | null
    _avg: AgentExecutionAvgAggregateOutputType | null
    _sum: AgentExecutionSumAggregateOutputType | null
    _min: AgentExecutionMinAggregateOutputType | null
    _max: AgentExecutionMaxAggregateOutputType | null
  }

  type GetAgentExecutionGroupByPayload<T extends AgentExecutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgentExecutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgentExecutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgentExecutionGroupByOutputType[P]>
            : GetScalarType<T[P], AgentExecutionGroupByOutputType[P]>
        }
      >
    >


  export type AgentExecutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    agentId?: boolean
    neuraId?: boolean
    chatMessageId?: boolean
    proposalId?: boolean
    parameters?: boolean
    result?: boolean
    status?: boolean
    errorMessage?: boolean
    durationMs?: boolean
    retryCount?: boolean
    idempotencyKey?: boolean
    createdAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentExecution"]>

  export type AgentExecutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    agentId?: boolean
    neuraId?: boolean
    chatMessageId?: boolean
    proposalId?: boolean
    parameters?: boolean
    result?: boolean
    status?: boolean
    errorMessage?: boolean
    durationMs?: boolean
    retryCount?: boolean
    idempotencyKey?: boolean
    createdAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["agentExecution"]>

  export type AgentExecutionSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    agentId?: boolean
    neuraId?: boolean
    chatMessageId?: boolean
    proposalId?: boolean
    parameters?: boolean
    result?: boolean
    status?: boolean
    errorMessage?: boolean
    durationMs?: boolean
    retryCount?: boolean
    idempotencyKey?: boolean
    createdAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
  }

  export type AgentExecutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }
  export type AgentExecutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    agentDefinition?: boolean | AgentDefinitionDefaultArgs<ExtArgs>
  }

  export type $AgentExecutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgentExecution"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      agentDefinition: Prisma.$AgentDefinitionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      organizationId: number
      userId: number
      agentId: string
      neuraId: string | null
      chatMessageId: bigint | null
      proposalId: number | null
      parameters: Prisma.JsonValue | null
      result: Prisma.JsonValue | null
      status: string
      errorMessage: string | null
      durationMs: number | null
      retryCount: number
      idempotencyKey: string | null
      createdAt: Date
      startedAt: Date | null
      completedAt: Date | null
    }, ExtArgs["result"]["agentExecution"]>
    composites: {}
  }

  type AgentExecutionGetPayload<S extends boolean | null | undefined | AgentExecutionDefaultArgs> = $Result.GetResult<Prisma.$AgentExecutionPayload, S>

  type AgentExecutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgentExecutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AgentExecutionCountAggregateInputType | true
    }

  export interface AgentExecutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgentExecution'], meta: { name: 'AgentExecution' } }
    /**
     * Find zero or one AgentExecution that matches the filter.
     * @param {AgentExecutionFindUniqueArgs} args - Arguments to find a AgentExecution
     * @example
     * // Get one AgentExecution
     * const agentExecution = await prisma.agentExecution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgentExecutionFindUniqueArgs>(args: SelectSubset<T, AgentExecutionFindUniqueArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AgentExecution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AgentExecutionFindUniqueOrThrowArgs} args - Arguments to find a AgentExecution
     * @example
     * // Get one AgentExecution
     * const agentExecution = await prisma.agentExecution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgentExecutionFindUniqueOrThrowArgs>(args: SelectSubset<T, AgentExecutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AgentExecution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentExecutionFindFirstArgs} args - Arguments to find a AgentExecution
     * @example
     * // Get one AgentExecution
     * const agentExecution = await prisma.agentExecution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgentExecutionFindFirstArgs>(args?: SelectSubset<T, AgentExecutionFindFirstArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AgentExecution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentExecutionFindFirstOrThrowArgs} args - Arguments to find a AgentExecution
     * @example
     * // Get one AgentExecution
     * const agentExecution = await prisma.agentExecution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgentExecutionFindFirstOrThrowArgs>(args?: SelectSubset<T, AgentExecutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AgentExecutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentExecutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgentExecutions
     * const agentExecutions = await prisma.agentExecution.findMany()
     * 
     * // Get first 10 AgentExecutions
     * const agentExecutions = await prisma.agentExecution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agentExecutionWithIdOnly = await prisma.agentExecution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgentExecutionFindManyArgs>(args?: SelectSubset<T, AgentExecutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AgentExecution.
     * @param {AgentExecutionCreateArgs} args - Arguments to create a AgentExecution.
     * @example
     * // Create one AgentExecution
     * const AgentExecution = await prisma.agentExecution.create({
     *   data: {
     *     // ... data to create a AgentExecution
     *   }
     * })
     * 
     */
    create<T extends AgentExecutionCreateArgs>(args: SelectSubset<T, AgentExecutionCreateArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AgentExecutions.
     * @param {AgentExecutionCreateManyArgs} args - Arguments to create many AgentExecutions.
     * @example
     * // Create many AgentExecutions
     * const agentExecution = await prisma.agentExecution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgentExecutionCreateManyArgs>(args?: SelectSubset<T, AgentExecutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgentExecutions and returns the data saved in the database.
     * @param {AgentExecutionCreateManyAndReturnArgs} args - Arguments to create many AgentExecutions.
     * @example
     * // Create many AgentExecutions
     * const agentExecution = await prisma.agentExecution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgentExecutions and only return the `id`
     * const agentExecutionWithIdOnly = await prisma.agentExecution.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgentExecutionCreateManyAndReturnArgs>(args?: SelectSubset<T, AgentExecutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AgentExecution.
     * @param {AgentExecutionDeleteArgs} args - Arguments to delete one AgentExecution.
     * @example
     * // Delete one AgentExecution
     * const AgentExecution = await prisma.agentExecution.delete({
     *   where: {
     *     // ... filter to delete one AgentExecution
     *   }
     * })
     * 
     */
    delete<T extends AgentExecutionDeleteArgs>(args: SelectSubset<T, AgentExecutionDeleteArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AgentExecution.
     * @param {AgentExecutionUpdateArgs} args - Arguments to update one AgentExecution.
     * @example
     * // Update one AgentExecution
     * const agentExecution = await prisma.agentExecution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgentExecutionUpdateArgs>(args: SelectSubset<T, AgentExecutionUpdateArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AgentExecutions.
     * @param {AgentExecutionDeleteManyArgs} args - Arguments to filter AgentExecutions to delete.
     * @example
     * // Delete a few AgentExecutions
     * const { count } = await prisma.agentExecution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgentExecutionDeleteManyArgs>(args?: SelectSubset<T, AgentExecutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgentExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentExecutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgentExecutions
     * const agentExecution = await prisma.agentExecution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgentExecutionUpdateManyArgs>(args: SelectSubset<T, AgentExecutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AgentExecution.
     * @param {AgentExecutionUpsertArgs} args - Arguments to update or create a AgentExecution.
     * @example
     * // Update or create a AgentExecution
     * const agentExecution = await prisma.agentExecution.upsert({
     *   create: {
     *     // ... data to create a AgentExecution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgentExecution we want to update
     *   }
     * })
     */
    upsert<T extends AgentExecutionUpsertArgs>(args: SelectSubset<T, AgentExecutionUpsertArgs<ExtArgs>>): Prisma__AgentExecutionClient<$Result.GetResult<Prisma.$AgentExecutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AgentExecutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentExecutionCountArgs} args - Arguments to filter AgentExecutions to count.
     * @example
     * // Count the number of AgentExecutions
     * const count = await prisma.agentExecution.count({
     *   where: {
     *     // ... the filter for the AgentExecutions we want to count
     *   }
     * })
    **/
    count<T extends AgentExecutionCountArgs>(
      args?: Subset<T, AgentExecutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgentExecutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgentExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentExecutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgentExecutionAggregateArgs>(args: Subset<T, AgentExecutionAggregateArgs>): Prisma.PrismaPromise<GetAgentExecutionAggregateType<T>>

    /**
     * Group by AgentExecution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgentExecutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgentExecutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgentExecutionGroupByArgs['orderBy'] }
        : { orderBy?: AgentExecutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgentExecutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgentExecutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgentExecution model
   */
  readonly fields: AgentExecutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgentExecution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgentExecutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    agentDefinition<T extends AgentDefinitionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AgentDefinitionDefaultArgs<ExtArgs>>): Prisma__AgentDefinitionClient<$Result.GetResult<Prisma.$AgentDefinitionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgentExecution model
   */ 
  interface AgentExecutionFieldRefs {
    readonly id: FieldRef<"AgentExecution", 'BigInt'>
    readonly organizationId: FieldRef<"AgentExecution", 'Int'>
    readonly userId: FieldRef<"AgentExecution", 'Int'>
    readonly agentId: FieldRef<"AgentExecution", 'String'>
    readonly neuraId: FieldRef<"AgentExecution", 'String'>
    readonly chatMessageId: FieldRef<"AgentExecution", 'BigInt'>
    readonly proposalId: FieldRef<"AgentExecution", 'Int'>
    readonly parameters: FieldRef<"AgentExecution", 'Json'>
    readonly result: FieldRef<"AgentExecution", 'Json'>
    readonly status: FieldRef<"AgentExecution", 'String'>
    readonly errorMessage: FieldRef<"AgentExecution", 'String'>
    readonly durationMs: FieldRef<"AgentExecution", 'Int'>
    readonly retryCount: FieldRef<"AgentExecution", 'Int'>
    readonly idempotencyKey: FieldRef<"AgentExecution", 'String'>
    readonly createdAt: FieldRef<"AgentExecution", 'DateTime'>
    readonly startedAt: FieldRef<"AgentExecution", 'DateTime'>
    readonly completedAt: FieldRef<"AgentExecution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AgentExecution findUnique
   */
  export type AgentExecutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * Filter, which AgentExecution to fetch.
     */
    where: AgentExecutionWhereUniqueInput
  }

  /**
   * AgentExecution findUniqueOrThrow
   */
  export type AgentExecutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * Filter, which AgentExecution to fetch.
     */
    where: AgentExecutionWhereUniqueInput
  }

  /**
   * AgentExecution findFirst
   */
  export type AgentExecutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * Filter, which AgentExecution to fetch.
     */
    where?: AgentExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentExecutions to fetch.
     */
    orderBy?: AgentExecutionOrderByWithRelationInput | AgentExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentExecutions.
     */
    cursor?: AgentExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentExecutions.
     */
    distinct?: AgentExecutionScalarFieldEnum | AgentExecutionScalarFieldEnum[]
  }

  /**
   * AgentExecution findFirstOrThrow
   */
  export type AgentExecutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * Filter, which AgentExecution to fetch.
     */
    where?: AgentExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentExecutions to fetch.
     */
    orderBy?: AgentExecutionOrderByWithRelationInput | AgentExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgentExecutions.
     */
    cursor?: AgentExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentExecutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgentExecutions.
     */
    distinct?: AgentExecutionScalarFieldEnum | AgentExecutionScalarFieldEnum[]
  }

  /**
   * AgentExecution findMany
   */
  export type AgentExecutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * Filter, which AgentExecutions to fetch.
     */
    where?: AgentExecutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgentExecutions to fetch.
     */
    orderBy?: AgentExecutionOrderByWithRelationInput | AgentExecutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgentExecutions.
     */
    cursor?: AgentExecutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgentExecutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgentExecutions.
     */
    skip?: number
    distinct?: AgentExecutionScalarFieldEnum | AgentExecutionScalarFieldEnum[]
  }

  /**
   * AgentExecution create
   */
  export type AgentExecutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * The data needed to create a AgentExecution.
     */
    data: XOR<AgentExecutionCreateInput, AgentExecutionUncheckedCreateInput>
  }

  /**
   * AgentExecution createMany
   */
  export type AgentExecutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgentExecutions.
     */
    data: AgentExecutionCreateManyInput | AgentExecutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgentExecution createManyAndReturn
   */
  export type AgentExecutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AgentExecutions.
     */
    data: AgentExecutionCreateManyInput | AgentExecutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgentExecution update
   */
  export type AgentExecutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * The data needed to update a AgentExecution.
     */
    data: XOR<AgentExecutionUpdateInput, AgentExecutionUncheckedUpdateInput>
    /**
     * Choose, which AgentExecution to update.
     */
    where: AgentExecutionWhereUniqueInput
  }

  /**
   * AgentExecution updateMany
   */
  export type AgentExecutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgentExecutions.
     */
    data: XOR<AgentExecutionUpdateManyMutationInput, AgentExecutionUncheckedUpdateManyInput>
    /**
     * Filter which AgentExecutions to update
     */
    where?: AgentExecutionWhereInput
  }

  /**
   * AgentExecution upsert
   */
  export type AgentExecutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * The filter to search for the AgentExecution to update in case it exists.
     */
    where: AgentExecutionWhereUniqueInput
    /**
     * In case the AgentExecution found by the `where` argument doesn't exist, create a new AgentExecution with this data.
     */
    create: XOR<AgentExecutionCreateInput, AgentExecutionUncheckedCreateInput>
    /**
     * In case the AgentExecution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgentExecutionUpdateInput, AgentExecutionUncheckedUpdateInput>
  }

  /**
   * AgentExecution delete
   */
  export type AgentExecutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
    /**
     * Filter which AgentExecution to delete.
     */
    where: AgentExecutionWhereUniqueInput
  }

  /**
   * AgentExecution deleteMany
   */
  export type AgentExecutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgentExecutions to delete
     */
    where?: AgentExecutionWhereInput
  }

  /**
   * AgentExecution without action
   */
  export type AgentExecutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgentExecution
     */
    select?: AgentExecutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgentExecutionInclude<ExtArgs> | null
  }


  /**
   * Model Proposal
   */

  export type AggregateProposal = {
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  export type ProposalAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    createdByUserId: number | null
  }

  export type ProposalSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
    createdByUserId: number | null
  }

  export type ProposalMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    createdByUserId: number | null
    neuraId: string | null
    action: string | null
    description: string | null
    rollbackPlan: string | null
    status: string | null
    executedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deadlineAt: Date | null
  }

  export type ProposalMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    createdByUserId: number | null
    neuraId: string | null
    action: string | null
    description: string | null
    rollbackPlan: string | null
    status: string | null
    executedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deadlineAt: Date | null
  }

  export type ProposalCountAggregateOutputType = {
    id: number
    organizationId: number
    createdByUserId: number
    neuraId: number
    action: number
    description: number
    parameters: number
    impactAnalysis: number
    requiredApprovals: number
    rollbackPlan: number
    status: number
    executedAt: number
    executionResult: number
    createdAt: number
    updatedAt: number
    deadlineAt: number
    _all: number
  }


  export type ProposalAvgAggregateInputType = {
    id?: true
    organizationId?: true
    createdByUserId?: true
  }

  export type ProposalSumAggregateInputType = {
    id?: true
    organizationId?: true
    createdByUserId?: true
  }

  export type ProposalMinAggregateInputType = {
    id?: true
    organizationId?: true
    createdByUserId?: true
    neuraId?: true
    action?: true
    description?: true
    rollbackPlan?: true
    status?: true
    executedAt?: true
    createdAt?: true
    updatedAt?: true
    deadlineAt?: true
  }

  export type ProposalMaxAggregateInputType = {
    id?: true
    organizationId?: true
    createdByUserId?: true
    neuraId?: true
    action?: true
    description?: true
    rollbackPlan?: true
    status?: true
    executedAt?: true
    createdAt?: true
    updatedAt?: true
    deadlineAt?: true
  }

  export type ProposalCountAggregateInputType = {
    id?: true
    organizationId?: true
    createdByUserId?: true
    neuraId?: true
    action?: true
    description?: true
    parameters?: true
    impactAnalysis?: true
    requiredApprovals?: true
    rollbackPlan?: true
    status?: true
    executedAt?: true
    executionResult?: true
    createdAt?: true
    updatedAt?: true
    deadlineAt?: true
    _all?: true
  }

  export type ProposalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposal to aggregate.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proposals
    **/
    _count?: true | ProposalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProposalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProposalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProposalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProposalMaxAggregateInputType
  }

  export type GetProposalAggregateType<T extends ProposalAggregateArgs> = {
        [P in keyof T & keyof AggregateProposal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposal[P]>
      : GetScalarType<T[P], AggregateProposal[P]>
  }




  export type ProposalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithAggregationInput | ProposalOrderByWithAggregationInput[]
    by: ProposalScalarFieldEnum[] | ProposalScalarFieldEnum
    having?: ProposalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProposalCountAggregateInputType | true
    _avg?: ProposalAvgAggregateInputType
    _sum?: ProposalSumAggregateInputType
    _min?: ProposalMinAggregateInputType
    _max?: ProposalMaxAggregateInputType
  }

  export type ProposalGroupByOutputType = {
    id: number
    organizationId: number
    createdByUserId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonValue
    impactAnalysis: JsonValue | null
    requiredApprovals: string[]
    rollbackPlan: string | null
    status: string
    executedAt: Date | null
    executionResult: JsonValue | null
    createdAt: Date
    updatedAt: Date
    deadlineAt: Date | null
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  type GetProposalGroupByPayload<T extends ProposalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProposalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProposalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProposalGroupByOutputType[P]>
            : GetScalarType<T[P], ProposalGroupByOutputType[P]>
        }
      >
    >


  export type ProposalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdByUserId?: boolean
    neuraId?: boolean
    action?: boolean
    description?: boolean
    parameters?: boolean
    impactAnalysis?: boolean
    requiredApprovals?: boolean
    rollbackPlan?: boolean
    status?: boolean
    executedAt?: boolean
    executionResult?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deadlineAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    approvals?: boolean | Proposal$approvalsArgs<ExtArgs>
    _count?: boolean | ProposalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    createdByUserId?: boolean
    neuraId?: boolean
    action?: boolean
    description?: boolean
    parameters?: boolean
    impactAnalysis?: boolean
    requiredApprovals?: boolean
    rollbackPlan?: boolean
    status?: boolean
    executedAt?: boolean
    executionResult?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deadlineAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectScalar = {
    id?: boolean
    organizationId?: boolean
    createdByUserId?: boolean
    neuraId?: boolean
    action?: boolean
    description?: boolean
    parameters?: boolean
    impactAnalysis?: boolean
    requiredApprovals?: boolean
    rollbackPlan?: boolean
    status?: boolean
    executedAt?: boolean
    executionResult?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deadlineAt?: boolean
  }

  export type ProposalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    approvals?: boolean | Proposal$approvalsArgs<ExtArgs>
    _count?: boolean | ProposalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProposalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProposalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proposal"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      approvals: Prisma.$ApprovalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizationId: number
      createdByUserId: number
      neuraId: string
      action: string
      description: string
      parameters: Prisma.JsonValue
      impactAnalysis: Prisma.JsonValue | null
      requiredApprovals: string[]
      rollbackPlan: string | null
      status: string
      executedAt: Date | null
      executionResult: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      deadlineAt: Date | null
    }, ExtArgs["result"]["proposal"]>
    composites: {}
  }

  type ProposalGetPayload<S extends boolean | null | undefined | ProposalDefaultArgs> = $Result.GetResult<Prisma.$ProposalPayload, S>

  type ProposalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProposalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProposalCountAggregateInputType | true
    }

  export interface ProposalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proposal'], meta: { name: 'Proposal' } }
    /**
     * Find zero or one Proposal that matches the filter.
     * @param {ProposalFindUniqueArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProposalFindUniqueArgs>(args: SelectSubset<T, ProposalFindUniqueArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Proposal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProposalFindUniqueOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProposalFindUniqueOrThrowArgs>(args: SelectSubset<T, ProposalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Proposal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProposalFindFirstArgs>(args?: SelectSubset<T, ProposalFindFirstArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Proposal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProposalFindFirstOrThrowArgs>(args?: SelectSubset<T, ProposalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Proposals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proposals
     * const proposals = await prisma.proposal.findMany()
     * 
     * // Get first 10 Proposals
     * const proposals = await prisma.proposal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proposalWithIdOnly = await prisma.proposal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProposalFindManyArgs>(args?: SelectSubset<T, ProposalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Proposal.
     * @param {ProposalCreateArgs} args - Arguments to create a Proposal.
     * @example
     * // Create one Proposal
     * const Proposal = await prisma.proposal.create({
     *   data: {
     *     // ... data to create a Proposal
     *   }
     * })
     * 
     */
    create<T extends ProposalCreateArgs>(args: SelectSubset<T, ProposalCreateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Proposals.
     * @param {ProposalCreateManyArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProposalCreateManyArgs>(args?: SelectSubset<T, ProposalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Proposals and returns the data saved in the database.
     * @param {ProposalCreateManyAndReturnArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Proposals and only return the `id`
     * const proposalWithIdOnly = await prisma.proposal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProposalCreateManyAndReturnArgs>(args?: SelectSubset<T, ProposalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Proposal.
     * @param {ProposalDeleteArgs} args - Arguments to delete one Proposal.
     * @example
     * // Delete one Proposal
     * const Proposal = await prisma.proposal.delete({
     *   where: {
     *     // ... filter to delete one Proposal
     *   }
     * })
     * 
     */
    delete<T extends ProposalDeleteArgs>(args: SelectSubset<T, ProposalDeleteArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Proposal.
     * @param {ProposalUpdateArgs} args - Arguments to update one Proposal.
     * @example
     * // Update one Proposal
     * const proposal = await prisma.proposal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProposalUpdateArgs>(args: SelectSubset<T, ProposalUpdateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Proposals.
     * @param {ProposalDeleteManyArgs} args - Arguments to filter Proposals to delete.
     * @example
     * // Delete a few Proposals
     * const { count } = await prisma.proposal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProposalDeleteManyArgs>(args?: SelectSubset<T, ProposalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proposals
     * const proposal = await prisma.proposal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProposalUpdateManyArgs>(args: SelectSubset<T, ProposalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proposal.
     * @param {ProposalUpsertArgs} args - Arguments to update or create a Proposal.
     * @example
     * // Update or create a Proposal
     * const proposal = await prisma.proposal.upsert({
     *   create: {
     *     // ... data to create a Proposal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proposal we want to update
     *   }
     * })
     */
    upsert<T extends ProposalUpsertArgs>(args: SelectSubset<T, ProposalUpsertArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalCountArgs} args - Arguments to filter Proposals to count.
     * @example
     * // Count the number of Proposals
     * const count = await prisma.proposal.count({
     *   where: {
     *     // ... the filter for the Proposals we want to count
     *   }
     * })
    **/
    count<T extends ProposalCountArgs>(
      args?: Subset<T, ProposalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProposalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProposalAggregateArgs>(args: Subset<T, ProposalAggregateArgs>): Prisma.PrismaPromise<GetProposalAggregateType<T>>

    /**
     * Group by Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProposalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProposalGroupByArgs['orderBy'] }
        : { orderBy?: ProposalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProposalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proposal model
   */
  readonly fields: ProposalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proposal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProposalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    approvals<T extends Proposal$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, Proposal$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Proposal model
   */ 
  interface ProposalFieldRefs {
    readonly id: FieldRef<"Proposal", 'Int'>
    readonly organizationId: FieldRef<"Proposal", 'Int'>
    readonly createdByUserId: FieldRef<"Proposal", 'Int'>
    readonly neuraId: FieldRef<"Proposal", 'String'>
    readonly action: FieldRef<"Proposal", 'String'>
    readonly description: FieldRef<"Proposal", 'String'>
    readonly parameters: FieldRef<"Proposal", 'Json'>
    readonly impactAnalysis: FieldRef<"Proposal", 'Json'>
    readonly requiredApprovals: FieldRef<"Proposal", 'String[]'>
    readonly rollbackPlan: FieldRef<"Proposal", 'String'>
    readonly status: FieldRef<"Proposal", 'String'>
    readonly executedAt: FieldRef<"Proposal", 'DateTime'>
    readonly executionResult: FieldRef<"Proposal", 'Json'>
    readonly createdAt: FieldRef<"Proposal", 'DateTime'>
    readonly updatedAt: FieldRef<"Proposal", 'DateTime'>
    readonly deadlineAt: FieldRef<"Proposal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Proposal findUnique
   */
  export type ProposalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findUniqueOrThrow
   */
  export type ProposalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findFirst
   */
  export type ProposalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findFirstOrThrow
   */
  export type ProposalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findMany
   */
  export type ProposalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposals to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal create
   */
  export type ProposalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to create a Proposal.
     */
    data: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
  }

  /**
   * Proposal createMany
   */
  export type ProposalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proposal createManyAndReturn
   */
  export type ProposalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Proposal update
   */
  export type ProposalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to update a Proposal.
     */
    data: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
    /**
     * Choose, which Proposal to update.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal updateMany
   */
  export type ProposalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proposals.
     */
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyInput>
    /**
     * Filter which Proposals to update
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal upsert
   */
  export type ProposalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The filter to search for the Proposal to update in case it exists.
     */
    where: ProposalWhereUniqueInput
    /**
     * In case the Proposal found by the `where` argument doesn't exist, create a new Proposal with this data.
     */
    create: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
    /**
     * In case the Proposal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
  }

  /**
   * Proposal delete
   */
  export type ProposalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter which Proposal to delete.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal deleteMany
   */
  export type ProposalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposals to delete
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal.approvals
   */
  export type Proposal$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    cursor?: ApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Proposal without action
   */
  export type ProposalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
  }


  /**
   * Model Approval
   */

  export type AggregateApproval = {
    _count: ApprovalCountAggregateOutputType | null
    _avg: ApprovalAvgAggregateOutputType | null
    _sum: ApprovalSumAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  export type ApprovalAvgAggregateOutputType = {
    id: number | null
    proposalId: number | null
    userId: number | null
  }

  export type ApprovalSumAggregateOutputType = {
    id: number | null
    proposalId: number | null
    userId: number | null
  }

  export type ApprovalMinAggregateOutputType = {
    id: number | null
    proposalId: number | null
    userId: number | null
    roleRequired: string | null
    approved: boolean | null
    comment: string | null
    createdAt: Date | null
  }

  export type ApprovalMaxAggregateOutputType = {
    id: number | null
    proposalId: number | null
    userId: number | null
    roleRequired: string | null
    approved: boolean | null
    comment: string | null
    createdAt: Date | null
  }

  export type ApprovalCountAggregateOutputType = {
    id: number
    proposalId: number
    userId: number
    roleRequired: number
    approved: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ApprovalAvgAggregateInputType = {
    id?: true
    proposalId?: true
    userId?: true
  }

  export type ApprovalSumAggregateInputType = {
    id?: true
    proposalId?: true
    userId?: true
  }

  export type ApprovalMinAggregateInputType = {
    id?: true
    proposalId?: true
    userId?: true
    roleRequired?: true
    approved?: true
    comment?: true
    createdAt?: true
  }

  export type ApprovalMaxAggregateInputType = {
    id?: true
    proposalId?: true
    userId?: true
    roleRequired?: true
    approved?: true
    comment?: true
    createdAt?: true
  }

  export type ApprovalCountAggregateInputType = {
    id?: true
    proposalId?: true
    userId?: true
    roleRequired?: true
    approved?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ApprovalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approval to aggregate.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Approvals
    **/
    _count?: true | ApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApprovalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApprovalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovalMaxAggregateInputType
  }

  export type GetApprovalAggregateType<T extends ApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApproval[P]>
      : GetScalarType<T[P], AggregateApproval[P]>
  }




  export type ApprovalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovalWhereInput
    orderBy?: ApprovalOrderByWithAggregationInput | ApprovalOrderByWithAggregationInput[]
    by: ApprovalScalarFieldEnum[] | ApprovalScalarFieldEnum
    having?: ApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovalCountAggregateInputType | true
    _avg?: ApprovalAvgAggregateInputType
    _sum?: ApprovalSumAggregateInputType
    _min?: ApprovalMinAggregateInputType
    _max?: ApprovalMaxAggregateInputType
  }

  export type ApprovalGroupByOutputType = {
    id: number
    proposalId: number
    userId: number
    roleRequired: string
    approved: boolean | null
    comment: string | null
    createdAt: Date
    _count: ApprovalCountAggregateOutputType | null
    _avg: ApprovalAvgAggregateOutputType | null
    _sum: ApprovalSumAggregateOutputType | null
    _min: ApprovalMinAggregateOutputType | null
    _max: ApprovalMaxAggregateOutputType | null
  }

  type GetApprovalGroupByPayload<T extends ApprovalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovalGroupByOutputType[P]>
        }
      >
    >


  export type ApprovalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposalId?: boolean
    userId?: boolean
    roleRequired?: boolean
    approved?: boolean
    comment?: boolean
    createdAt?: boolean
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposalId?: boolean
    userId?: boolean
    roleRequired?: boolean
    approved?: boolean
    comment?: boolean
    createdAt?: boolean
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["approval"]>

  export type ApprovalSelectScalar = {
    id?: boolean
    proposalId?: boolean
    userId?: boolean
    roleRequired?: boolean
    approved?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ApprovalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ApprovalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ApprovalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Approval"
    objects: {
      proposal: Prisma.$ProposalPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      proposalId: number
      userId: number
      roleRequired: string
      approved: boolean | null
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["approval"]>
    composites: {}
  }

  type ApprovalGetPayload<S extends boolean | null | undefined | ApprovalDefaultArgs> = $Result.GetResult<Prisma.$ApprovalPayload, S>

  type ApprovalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApprovalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApprovalCountAggregateInputType | true
    }

  export interface ApprovalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Approval'], meta: { name: 'Approval' } }
    /**
     * Find zero or one Approval that matches the filter.
     * @param {ApprovalFindUniqueArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApprovalFindUniqueArgs>(args: SelectSubset<T, ApprovalFindUniqueArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Approval that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApprovalFindUniqueOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApprovalFindUniqueOrThrowArgs>(args: SelectSubset<T, ApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Approval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApprovalFindFirstArgs>(args?: SelectSubset<T, ApprovalFindFirstArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Approval that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindFirstOrThrowArgs} args - Arguments to find a Approval
     * @example
     * // Get one Approval
     * const approval = await prisma.approval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApprovalFindFirstOrThrowArgs>(args?: SelectSubset<T, ApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Approvals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Approvals
     * const approvals = await prisma.approval.findMany()
     * 
     * // Get first 10 Approvals
     * const approvals = await prisma.approval.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approvalWithIdOnly = await prisma.approval.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApprovalFindManyArgs>(args?: SelectSubset<T, ApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Approval.
     * @param {ApprovalCreateArgs} args - Arguments to create a Approval.
     * @example
     * // Create one Approval
     * const Approval = await prisma.approval.create({
     *   data: {
     *     // ... data to create a Approval
     *   }
     * })
     * 
     */
    create<T extends ApprovalCreateArgs>(args: SelectSubset<T, ApprovalCreateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Approvals.
     * @param {ApprovalCreateManyArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approval = await prisma.approval.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApprovalCreateManyArgs>(args?: SelectSubset<T, ApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Approvals and returns the data saved in the database.
     * @param {ApprovalCreateManyAndReturnArgs} args - Arguments to create many Approvals.
     * @example
     * // Create many Approvals
     * const approval = await prisma.approval.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Approvals and only return the `id`
     * const approvalWithIdOnly = await prisma.approval.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApprovalCreateManyAndReturnArgs>(args?: SelectSubset<T, ApprovalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Approval.
     * @param {ApprovalDeleteArgs} args - Arguments to delete one Approval.
     * @example
     * // Delete one Approval
     * const Approval = await prisma.approval.delete({
     *   where: {
     *     // ... filter to delete one Approval
     *   }
     * })
     * 
     */
    delete<T extends ApprovalDeleteArgs>(args: SelectSubset<T, ApprovalDeleteArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Approval.
     * @param {ApprovalUpdateArgs} args - Arguments to update one Approval.
     * @example
     * // Update one Approval
     * const approval = await prisma.approval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApprovalUpdateArgs>(args: SelectSubset<T, ApprovalUpdateArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Approvals.
     * @param {ApprovalDeleteManyArgs} args - Arguments to filter Approvals to delete.
     * @example
     * // Delete a few Approvals
     * const { count } = await prisma.approval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApprovalDeleteManyArgs>(args?: SelectSubset<T, ApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Approvals
     * const approval = await prisma.approval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApprovalUpdateManyArgs>(args: SelectSubset<T, ApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Approval.
     * @param {ApprovalUpsertArgs} args - Arguments to update or create a Approval.
     * @example
     * // Update or create a Approval
     * const approval = await prisma.approval.upsert({
     *   create: {
     *     // ... data to create a Approval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Approval we want to update
     *   }
     * })
     */
    upsert<T extends ApprovalUpsertArgs>(args: SelectSubset<T, ApprovalUpsertArgs<ExtArgs>>): Prisma__ApprovalClient<$Result.GetResult<Prisma.$ApprovalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Approvals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalCountArgs} args - Arguments to filter Approvals to count.
     * @example
     * // Count the number of Approvals
     * const count = await prisma.approval.count({
     *   where: {
     *     // ... the filter for the Approvals we want to count
     *   }
     * })
    **/
    count<T extends ApprovalCountArgs>(
      args?: Subset<T, ApprovalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovalAggregateArgs>(args: Subset<T, ApprovalAggregateArgs>): Prisma.PrismaPromise<GetApprovalAggregateType<T>>

    /**
     * Group by Approval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovalGroupByArgs['orderBy'] }
        : { orderBy?: ApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Approval model
   */
  readonly fields: ApprovalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Approval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprovalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proposal<T extends ProposalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProposalDefaultArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Approval model
   */ 
  interface ApprovalFieldRefs {
    readonly id: FieldRef<"Approval", 'Int'>
    readonly proposalId: FieldRef<"Approval", 'Int'>
    readonly userId: FieldRef<"Approval", 'Int'>
    readonly roleRequired: FieldRef<"Approval", 'String'>
    readonly approved: FieldRef<"Approval", 'Boolean'>
    readonly comment: FieldRef<"Approval", 'String'>
    readonly createdAt: FieldRef<"Approval", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Approval findUnique
   */
  export type ApprovalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findUniqueOrThrow
   */
  export type ApprovalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval findFirst
   */
  export type ApprovalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findFirstOrThrow
   */
  export type ApprovalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approval to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Approvals.
     */
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval findMany
   */
  export type ApprovalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter, which Approvals to fetch.
     */
    where?: ApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Approvals to fetch.
     */
    orderBy?: ApprovalOrderByWithRelationInput | ApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Approvals.
     */
    cursor?: ApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Approvals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Approvals.
     */
    skip?: number
    distinct?: ApprovalScalarFieldEnum | ApprovalScalarFieldEnum[]
  }

  /**
   * Approval create
   */
  export type ApprovalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to create a Approval.
     */
    data: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
  }

  /**
   * Approval createMany
   */
  export type ApprovalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalCreateManyInput | ApprovalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Approval createManyAndReturn
   */
  export type ApprovalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Approvals.
     */
    data: ApprovalCreateManyInput | ApprovalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Approval update
   */
  export type ApprovalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The data needed to update a Approval.
     */
    data: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
    /**
     * Choose, which Approval to update.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval updateMany
   */
  export type ApprovalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Approvals.
     */
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyInput>
    /**
     * Filter which Approvals to update
     */
    where?: ApprovalWhereInput
  }

  /**
   * Approval upsert
   */
  export type ApprovalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * The filter to search for the Approval to update in case it exists.
     */
    where: ApprovalWhereUniqueInput
    /**
     * In case the Approval found by the `where` argument doesn't exist, create a new Approval with this data.
     */
    create: XOR<ApprovalCreateInput, ApprovalUncheckedCreateInput>
    /**
     * In case the Approval was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprovalUpdateInput, ApprovalUncheckedUpdateInput>
  }

  /**
   * Approval delete
   */
  export type ApprovalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
    /**
     * Filter which Approval to delete.
     */
    where: ApprovalWhereUniqueInput
  }

  /**
   * Approval deleteMany
   */
  export type ApprovalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Approvals to delete
     */
    where?: ApprovalWhereInput
  }

  /**
   * Approval without action
   */
  export type ApprovalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Approval
     */
    select?: ApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApprovalInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    userId: number | null
    proposalId: number | null
    approvedBy: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: bigint | null
    organizationId: number | null
    userId: number | null
    proposalId: number | null
    approvedBy: number[]
  }

  export type AuditLogMinAggregateOutputType = {
    id: bigint | null
    timestamp: Date | null
    organizationId: number | null
    userId: number | null
    neuraId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    proposalId: number | null
    ipAddress: string | null
    userAgent: string | null
    correlationId: string | null
    hash: string | null
    previousHash: string | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: bigint | null
    timestamp: Date | null
    organizationId: number | null
    userId: number | null
    neuraId: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    proposalId: number | null
    ipAddress: string | null
    userAgent: string | null
    correlationId: string | null
    hash: string | null
    previousHash: string | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    timestamp: number
    organizationId: number
    userId: number
    neuraId: number
    action: number
    entityType: number
    entityId: number
    beforeState: number
    afterState: number
    proposalId: number
    approvedBy: number
    ipAddress: number
    userAgent: number
    correlationId: number
    hash: number
    previousHash: number
    metadata: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    proposalId?: true
    approvedBy?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    proposalId?: true
    approvedBy?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    timestamp?: true
    organizationId?: true
    userId?: true
    neuraId?: true
    action?: true
    entityType?: true
    entityId?: true
    proposalId?: true
    ipAddress?: true
    userAgent?: true
    correlationId?: true
    hash?: true
    previousHash?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    timestamp?: true
    organizationId?: true
    userId?: true
    neuraId?: true
    action?: true
    entityType?: true
    entityId?: true
    proposalId?: true
    ipAddress?: true
    userAgent?: true
    correlationId?: true
    hash?: true
    previousHash?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    timestamp?: true
    organizationId?: true
    userId?: true
    neuraId?: true
    action?: true
    entityType?: true
    entityId?: true
    beforeState?: true
    afterState?: true
    proposalId?: true
    approvedBy?: true
    ipAddress?: true
    userAgent?: true
    correlationId?: true
    hash?: true
    previousHash?: true
    metadata?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: bigint
    timestamp: Date
    organizationId: number
    userId: number | null
    neuraId: string | null
    action: string
    entityType: string | null
    entityId: string | null
    beforeState: JsonValue | null
    afterState: JsonValue | null
    proposalId: number | null
    approvedBy: number[]
    ipAddress: string | null
    userAgent: string | null
    correlationId: string
    hash: string
    previousHash: string | null
    metadata: JsonValue | null
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    organizationId?: boolean
    userId?: boolean
    neuraId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    beforeState?: boolean
    afterState?: boolean
    proposalId?: boolean
    approvedBy?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    correlationId?: boolean
    hash?: boolean
    previousHash?: boolean
    metadata?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    timestamp?: boolean
    organizationId?: boolean
    userId?: boolean
    neuraId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    beforeState?: boolean
    afterState?: boolean
    proposalId?: boolean
    approvedBy?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    correlationId?: boolean
    hash?: boolean
    previousHash?: boolean
    metadata?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    timestamp?: boolean
    organizationId?: boolean
    userId?: boolean
    neuraId?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    beforeState?: boolean
    afterState?: boolean
    proposalId?: boolean
    approvedBy?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    correlationId?: boolean
    hash?: boolean
    previousHash?: boolean
    metadata?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      timestamp: Date
      organizationId: number
      userId: number | null
      neuraId: string | null
      action: string
      entityType: string | null
      entityId: string | null
      beforeState: Prisma.JsonValue | null
      afterState: Prisma.JsonValue | null
      proposalId: number | null
      approvedBy: number[]
      ipAddress: string | null
      userAgent: string | null
      correlationId: string
      hash: string
      previousHash: string | null
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'BigInt'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
    readonly organizationId: FieldRef<"AuditLog", 'Int'>
    readonly userId: FieldRef<"AuditLog", 'Int'>
    readonly neuraId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entityType: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly beforeState: FieldRef<"AuditLog", 'Json'>
    readonly afterState: FieldRef<"AuditLog", 'Json'>
    readonly proposalId: FieldRef<"AuditLog", 'Int'>
    readonly approvedBy: FieldRef<"AuditLog", 'Int[]'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly correlationId: FieldRef<"AuditLog", 'String'>
    readonly hash: FieldRef<"AuditLog", 'String'>
    readonly previousHash: FieldRef<"AuditLog", 'String'>
    readonly metadata: FieldRef<"AuditLog", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model CostTracking
   */

  export type AggregateCostTracking = {
    _count: CostTrackingCountAggregateOutputType | null
    _avg: CostTrackingAvgAggregateOutputType | null
    _sum: CostTrackingSumAggregateOutputType | null
    _min: CostTrackingMinAggregateOutputType | null
    _max: CostTrackingMaxAggregateOutputType | null
  }

  export type CostTrackingAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    userId: number | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    costUsd: Decimal | null
  }

  export type CostTrackingSumAggregateOutputType = {
    id: bigint | null
    organizationId: number | null
    userId: number | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    costUsd: Decimal | null
  }

  export type CostTrackingMinAggregateOutputType = {
    id: bigint | null
    organizationId: number | null
    userId: number | null
    neuraId: string | null
    agentId: string | null
    resourceType: string | null
    resourceName: string | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    costUsd: Decimal | null
    model: string | null
    timestamp: Date | null
  }

  export type CostTrackingMaxAggregateOutputType = {
    id: bigint | null
    organizationId: number | null
    userId: number | null
    neuraId: string | null
    agentId: string | null
    resourceType: string | null
    resourceName: string | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal | null
    costUsd: Decimal | null
    model: string | null
    timestamp: Date | null
  }

  export type CostTrackingCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    neuraId: number
    agentId: number
    resourceType: number
    resourceName: number
    tokensInput: number
    tokensOutput: number
    tokensReasoning: number
    costEur: number
    costUsd: number
    model: number
    timestamp: number
    _all: number
  }


  export type CostTrackingAvgAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    costUsd?: true
  }

  export type CostTrackingSumAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    costUsd?: true
  }

  export type CostTrackingMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    neuraId?: true
    agentId?: true
    resourceType?: true
    resourceName?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    costUsd?: true
    model?: true
    timestamp?: true
  }

  export type CostTrackingMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    neuraId?: true
    agentId?: true
    resourceType?: true
    resourceName?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    costUsd?: true
    model?: true
    timestamp?: true
  }

  export type CostTrackingCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    neuraId?: true
    agentId?: true
    resourceType?: true
    resourceName?: true
    tokensInput?: true
    tokensOutput?: true
    tokensReasoning?: true
    costEur?: true
    costUsd?: true
    model?: true
    timestamp?: true
    _all?: true
  }

  export type CostTrackingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CostTracking to aggregate.
     */
    where?: CostTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostTrackings to fetch.
     */
    orderBy?: CostTrackingOrderByWithRelationInput | CostTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CostTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CostTrackings
    **/
    _count?: true | CostTrackingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CostTrackingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CostTrackingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CostTrackingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CostTrackingMaxAggregateInputType
  }

  export type GetCostTrackingAggregateType<T extends CostTrackingAggregateArgs> = {
        [P in keyof T & keyof AggregateCostTracking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCostTracking[P]>
      : GetScalarType<T[P], AggregateCostTracking[P]>
  }




  export type CostTrackingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CostTrackingWhereInput
    orderBy?: CostTrackingOrderByWithAggregationInput | CostTrackingOrderByWithAggregationInput[]
    by: CostTrackingScalarFieldEnum[] | CostTrackingScalarFieldEnum
    having?: CostTrackingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CostTrackingCountAggregateInputType | true
    _avg?: CostTrackingAvgAggregateInputType
    _sum?: CostTrackingSumAggregateInputType
    _min?: CostTrackingMinAggregateInputType
    _max?: CostTrackingMaxAggregateInputType
  }

  export type CostTrackingGroupByOutputType = {
    id: bigint
    organizationId: number
    userId: number | null
    neuraId: string | null
    agentId: string | null
    resourceType: string
    resourceName: string | null
    tokensInput: number | null
    tokensOutput: number | null
    tokensReasoning: number | null
    costEur: Decimal
    costUsd: Decimal | null
    model: string | null
    timestamp: Date
    _count: CostTrackingCountAggregateOutputType | null
    _avg: CostTrackingAvgAggregateOutputType | null
    _sum: CostTrackingSumAggregateOutputType | null
    _min: CostTrackingMinAggregateOutputType | null
    _max: CostTrackingMaxAggregateOutputType | null
  }

  type GetCostTrackingGroupByPayload<T extends CostTrackingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CostTrackingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CostTrackingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CostTrackingGroupByOutputType[P]>
            : GetScalarType<T[P], CostTrackingGroupByOutputType[P]>
        }
      >
    >


  export type CostTrackingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    neuraId?: boolean
    agentId?: boolean
    resourceType?: boolean
    resourceName?: boolean
    tokensInput?: boolean
    tokensOutput?: boolean
    tokensReasoning?: boolean
    costEur?: boolean
    costUsd?: boolean
    model?: boolean
    timestamp?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["costTracking"]>

  export type CostTrackingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    neuraId?: boolean
    agentId?: boolean
    resourceType?: boolean
    resourceName?: boolean
    tokensInput?: boolean
    tokensOutput?: boolean
    tokensReasoning?: boolean
    costEur?: boolean
    costUsd?: boolean
    model?: boolean
    timestamp?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["costTracking"]>

  export type CostTrackingSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    neuraId?: boolean
    agentId?: boolean
    resourceType?: boolean
    resourceName?: boolean
    tokensInput?: boolean
    tokensOutput?: boolean
    tokensReasoning?: boolean
    costEur?: boolean
    costUsd?: boolean
    model?: boolean
    timestamp?: boolean
  }

  export type CostTrackingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type CostTrackingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $CostTrackingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CostTracking"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      organizationId: number
      userId: number | null
      neuraId: string | null
      agentId: string | null
      resourceType: string
      resourceName: string | null
      tokensInput: number | null
      tokensOutput: number | null
      tokensReasoning: number | null
      costEur: Prisma.Decimal
      costUsd: Prisma.Decimal | null
      model: string | null
      timestamp: Date
    }, ExtArgs["result"]["costTracking"]>
    composites: {}
  }

  type CostTrackingGetPayload<S extends boolean | null | undefined | CostTrackingDefaultArgs> = $Result.GetResult<Prisma.$CostTrackingPayload, S>

  type CostTrackingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CostTrackingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CostTrackingCountAggregateInputType | true
    }

  export interface CostTrackingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CostTracking'], meta: { name: 'CostTracking' } }
    /**
     * Find zero or one CostTracking that matches the filter.
     * @param {CostTrackingFindUniqueArgs} args - Arguments to find a CostTracking
     * @example
     * // Get one CostTracking
     * const costTracking = await prisma.costTracking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CostTrackingFindUniqueArgs>(args: SelectSubset<T, CostTrackingFindUniqueArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CostTracking that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CostTrackingFindUniqueOrThrowArgs} args - Arguments to find a CostTracking
     * @example
     * // Get one CostTracking
     * const costTracking = await prisma.costTracking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CostTrackingFindUniqueOrThrowArgs>(args: SelectSubset<T, CostTrackingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CostTracking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostTrackingFindFirstArgs} args - Arguments to find a CostTracking
     * @example
     * // Get one CostTracking
     * const costTracking = await prisma.costTracking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CostTrackingFindFirstArgs>(args?: SelectSubset<T, CostTrackingFindFirstArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CostTracking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostTrackingFindFirstOrThrowArgs} args - Arguments to find a CostTracking
     * @example
     * // Get one CostTracking
     * const costTracking = await prisma.costTracking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CostTrackingFindFirstOrThrowArgs>(args?: SelectSubset<T, CostTrackingFindFirstOrThrowArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CostTrackings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostTrackingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CostTrackings
     * const costTrackings = await prisma.costTracking.findMany()
     * 
     * // Get first 10 CostTrackings
     * const costTrackings = await prisma.costTracking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const costTrackingWithIdOnly = await prisma.costTracking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CostTrackingFindManyArgs>(args?: SelectSubset<T, CostTrackingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CostTracking.
     * @param {CostTrackingCreateArgs} args - Arguments to create a CostTracking.
     * @example
     * // Create one CostTracking
     * const CostTracking = await prisma.costTracking.create({
     *   data: {
     *     // ... data to create a CostTracking
     *   }
     * })
     * 
     */
    create<T extends CostTrackingCreateArgs>(args: SelectSubset<T, CostTrackingCreateArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CostTrackings.
     * @param {CostTrackingCreateManyArgs} args - Arguments to create many CostTrackings.
     * @example
     * // Create many CostTrackings
     * const costTracking = await prisma.costTracking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CostTrackingCreateManyArgs>(args?: SelectSubset<T, CostTrackingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CostTrackings and returns the data saved in the database.
     * @param {CostTrackingCreateManyAndReturnArgs} args - Arguments to create many CostTrackings.
     * @example
     * // Create many CostTrackings
     * const costTracking = await prisma.costTracking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CostTrackings and only return the `id`
     * const costTrackingWithIdOnly = await prisma.costTracking.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CostTrackingCreateManyAndReturnArgs>(args?: SelectSubset<T, CostTrackingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CostTracking.
     * @param {CostTrackingDeleteArgs} args - Arguments to delete one CostTracking.
     * @example
     * // Delete one CostTracking
     * const CostTracking = await prisma.costTracking.delete({
     *   where: {
     *     // ... filter to delete one CostTracking
     *   }
     * })
     * 
     */
    delete<T extends CostTrackingDeleteArgs>(args: SelectSubset<T, CostTrackingDeleteArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CostTracking.
     * @param {CostTrackingUpdateArgs} args - Arguments to update one CostTracking.
     * @example
     * // Update one CostTracking
     * const costTracking = await prisma.costTracking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CostTrackingUpdateArgs>(args: SelectSubset<T, CostTrackingUpdateArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CostTrackings.
     * @param {CostTrackingDeleteManyArgs} args - Arguments to filter CostTrackings to delete.
     * @example
     * // Delete a few CostTrackings
     * const { count } = await prisma.costTracking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CostTrackingDeleteManyArgs>(args?: SelectSubset<T, CostTrackingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CostTrackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostTrackingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CostTrackings
     * const costTracking = await prisma.costTracking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CostTrackingUpdateManyArgs>(args: SelectSubset<T, CostTrackingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CostTracking.
     * @param {CostTrackingUpsertArgs} args - Arguments to update or create a CostTracking.
     * @example
     * // Update or create a CostTracking
     * const costTracking = await prisma.costTracking.upsert({
     *   create: {
     *     // ... data to create a CostTracking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CostTracking we want to update
     *   }
     * })
     */
    upsert<T extends CostTrackingUpsertArgs>(args: SelectSubset<T, CostTrackingUpsertArgs<ExtArgs>>): Prisma__CostTrackingClient<$Result.GetResult<Prisma.$CostTrackingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CostTrackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostTrackingCountArgs} args - Arguments to filter CostTrackings to count.
     * @example
     * // Count the number of CostTrackings
     * const count = await prisma.costTracking.count({
     *   where: {
     *     // ... the filter for the CostTrackings we want to count
     *   }
     * })
    **/
    count<T extends CostTrackingCountArgs>(
      args?: Subset<T, CostTrackingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CostTrackingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CostTracking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostTrackingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CostTrackingAggregateArgs>(args: Subset<T, CostTrackingAggregateArgs>): Prisma.PrismaPromise<GetCostTrackingAggregateType<T>>

    /**
     * Group by CostTracking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CostTrackingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CostTrackingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CostTrackingGroupByArgs['orderBy'] }
        : { orderBy?: CostTrackingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CostTrackingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCostTrackingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CostTracking model
   */
  readonly fields: CostTrackingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CostTracking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CostTrackingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CostTracking model
   */ 
  interface CostTrackingFieldRefs {
    readonly id: FieldRef<"CostTracking", 'BigInt'>
    readonly organizationId: FieldRef<"CostTracking", 'Int'>
    readonly userId: FieldRef<"CostTracking", 'Int'>
    readonly neuraId: FieldRef<"CostTracking", 'String'>
    readonly agentId: FieldRef<"CostTracking", 'String'>
    readonly resourceType: FieldRef<"CostTracking", 'String'>
    readonly resourceName: FieldRef<"CostTracking", 'String'>
    readonly tokensInput: FieldRef<"CostTracking", 'Int'>
    readonly tokensOutput: FieldRef<"CostTracking", 'Int'>
    readonly tokensReasoning: FieldRef<"CostTracking", 'Int'>
    readonly costEur: FieldRef<"CostTracking", 'Decimal'>
    readonly costUsd: FieldRef<"CostTracking", 'Decimal'>
    readonly model: FieldRef<"CostTracking", 'String'>
    readonly timestamp: FieldRef<"CostTracking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CostTracking findUnique
   */
  export type CostTrackingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * Filter, which CostTracking to fetch.
     */
    where: CostTrackingWhereUniqueInput
  }

  /**
   * CostTracking findUniqueOrThrow
   */
  export type CostTrackingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * Filter, which CostTracking to fetch.
     */
    where: CostTrackingWhereUniqueInput
  }

  /**
   * CostTracking findFirst
   */
  export type CostTrackingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * Filter, which CostTracking to fetch.
     */
    where?: CostTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostTrackings to fetch.
     */
    orderBy?: CostTrackingOrderByWithRelationInput | CostTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CostTrackings.
     */
    cursor?: CostTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CostTrackings.
     */
    distinct?: CostTrackingScalarFieldEnum | CostTrackingScalarFieldEnum[]
  }

  /**
   * CostTracking findFirstOrThrow
   */
  export type CostTrackingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * Filter, which CostTracking to fetch.
     */
    where?: CostTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostTrackings to fetch.
     */
    orderBy?: CostTrackingOrderByWithRelationInput | CostTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CostTrackings.
     */
    cursor?: CostTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CostTrackings.
     */
    distinct?: CostTrackingScalarFieldEnum | CostTrackingScalarFieldEnum[]
  }

  /**
   * CostTracking findMany
   */
  export type CostTrackingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * Filter, which CostTrackings to fetch.
     */
    where?: CostTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CostTrackings to fetch.
     */
    orderBy?: CostTrackingOrderByWithRelationInput | CostTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CostTrackings.
     */
    cursor?: CostTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CostTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CostTrackings.
     */
    skip?: number
    distinct?: CostTrackingScalarFieldEnum | CostTrackingScalarFieldEnum[]
  }

  /**
   * CostTracking create
   */
  export type CostTrackingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * The data needed to create a CostTracking.
     */
    data: XOR<CostTrackingCreateInput, CostTrackingUncheckedCreateInput>
  }

  /**
   * CostTracking createMany
   */
  export type CostTrackingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CostTrackings.
     */
    data: CostTrackingCreateManyInput | CostTrackingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CostTracking createManyAndReturn
   */
  export type CostTrackingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CostTrackings.
     */
    data: CostTrackingCreateManyInput | CostTrackingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CostTracking update
   */
  export type CostTrackingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * The data needed to update a CostTracking.
     */
    data: XOR<CostTrackingUpdateInput, CostTrackingUncheckedUpdateInput>
    /**
     * Choose, which CostTracking to update.
     */
    where: CostTrackingWhereUniqueInput
  }

  /**
   * CostTracking updateMany
   */
  export type CostTrackingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CostTrackings.
     */
    data: XOR<CostTrackingUpdateManyMutationInput, CostTrackingUncheckedUpdateManyInput>
    /**
     * Filter which CostTrackings to update
     */
    where?: CostTrackingWhereInput
  }

  /**
   * CostTracking upsert
   */
  export type CostTrackingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * The filter to search for the CostTracking to update in case it exists.
     */
    where: CostTrackingWhereUniqueInput
    /**
     * In case the CostTracking found by the `where` argument doesn't exist, create a new CostTracking with this data.
     */
    create: XOR<CostTrackingCreateInput, CostTrackingUncheckedCreateInput>
    /**
     * In case the CostTracking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CostTrackingUpdateInput, CostTrackingUncheckedUpdateInput>
  }

  /**
   * CostTracking delete
   */
  export type CostTrackingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
    /**
     * Filter which CostTracking to delete.
     */
    where: CostTrackingWhereUniqueInput
  }

  /**
   * CostTracking deleteMany
   */
  export type CostTrackingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CostTrackings to delete
     */
    where?: CostTrackingWhereInput
  }

  /**
   * CostTracking without action
   */
  export type CostTrackingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CostTracking
     */
    select?: CostTrackingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CostTrackingInclude<ExtArgs> | null
  }


  /**
   * Model NeuraMetricDaily
   */

  export type AggregateNeuraMetricDaily = {
    _count: NeuraMetricDailyCountAggregateOutputType | null
    _avg: NeuraMetricDailyAvgAggregateOutputType | null
    _sum: NeuraMetricDailySumAggregateOutputType | null
    _min: NeuraMetricDailyMinAggregateOutputType | null
    _max: NeuraMetricDailyMaxAggregateOutputType | null
  }

  export type NeuraMetricDailyAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
    conversationsCount: number | null
    messagesCount: number | null
    agentExecutionsCount: number | null
    timeSavedHours: Decimal | null
    valueGeneratedEur: Decimal | null
    costConsumedEur: Decimal | null
    roiPercentage: Decimal | null
    avgResponseTimeMs: number | null
    errorCount: number | null
    userSatisfactionAvg: Decimal | null
  }

  export type NeuraMetricDailySumAggregateOutputType = {
    id: number | null
    organizationId: number | null
    conversationsCount: number | null
    messagesCount: number | null
    agentExecutionsCount: number | null
    timeSavedHours: Decimal | null
    valueGeneratedEur: Decimal | null
    costConsumedEur: Decimal | null
    roiPercentage: Decimal | null
    avgResponseTimeMs: number | null
    errorCount: number | null
    userSatisfactionAvg: Decimal | null
  }

  export type NeuraMetricDailyMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    neuraId: string | null
    date: Date | null
    conversationsCount: number | null
    messagesCount: number | null
    agentExecutionsCount: number | null
    timeSavedHours: Decimal | null
    valueGeneratedEur: Decimal | null
    costConsumedEur: Decimal | null
    roiPercentage: Decimal | null
    avgResponseTimeMs: number | null
    errorCount: number | null
    userSatisfactionAvg: Decimal | null
    createdAt: Date | null
  }

  export type NeuraMetricDailyMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    neuraId: string | null
    date: Date | null
    conversationsCount: number | null
    messagesCount: number | null
    agentExecutionsCount: number | null
    timeSavedHours: Decimal | null
    valueGeneratedEur: Decimal | null
    costConsumedEur: Decimal | null
    roiPercentage: Decimal | null
    avgResponseTimeMs: number | null
    errorCount: number | null
    userSatisfactionAvg: Decimal | null
    createdAt: Date | null
  }

  export type NeuraMetricDailyCountAggregateOutputType = {
    id: number
    organizationId: number
    neuraId: number
    date: number
    conversationsCount: number
    messagesCount: number
    agentExecutionsCount: number
    timeSavedHours: number
    valueGeneratedEur: number
    costConsumedEur: number
    roiPercentage: number
    avgResponseTimeMs: number
    errorCount: number
    userSatisfactionAvg: number
    createdAt: number
    _all: number
  }


  export type NeuraMetricDailyAvgAggregateInputType = {
    id?: true
    organizationId?: true
    conversationsCount?: true
    messagesCount?: true
    agentExecutionsCount?: true
    timeSavedHours?: true
    valueGeneratedEur?: true
    costConsumedEur?: true
    roiPercentage?: true
    avgResponseTimeMs?: true
    errorCount?: true
    userSatisfactionAvg?: true
  }

  export type NeuraMetricDailySumAggregateInputType = {
    id?: true
    organizationId?: true
    conversationsCount?: true
    messagesCount?: true
    agentExecutionsCount?: true
    timeSavedHours?: true
    valueGeneratedEur?: true
    costConsumedEur?: true
    roiPercentage?: true
    avgResponseTimeMs?: true
    errorCount?: true
    userSatisfactionAvg?: true
  }

  export type NeuraMetricDailyMinAggregateInputType = {
    id?: true
    organizationId?: true
    neuraId?: true
    date?: true
    conversationsCount?: true
    messagesCount?: true
    agentExecutionsCount?: true
    timeSavedHours?: true
    valueGeneratedEur?: true
    costConsumedEur?: true
    roiPercentage?: true
    avgResponseTimeMs?: true
    errorCount?: true
    userSatisfactionAvg?: true
    createdAt?: true
  }

  export type NeuraMetricDailyMaxAggregateInputType = {
    id?: true
    organizationId?: true
    neuraId?: true
    date?: true
    conversationsCount?: true
    messagesCount?: true
    agentExecutionsCount?: true
    timeSavedHours?: true
    valueGeneratedEur?: true
    costConsumedEur?: true
    roiPercentage?: true
    avgResponseTimeMs?: true
    errorCount?: true
    userSatisfactionAvg?: true
    createdAt?: true
  }

  export type NeuraMetricDailyCountAggregateInputType = {
    id?: true
    organizationId?: true
    neuraId?: true
    date?: true
    conversationsCount?: true
    messagesCount?: true
    agentExecutionsCount?: true
    timeSavedHours?: true
    valueGeneratedEur?: true
    costConsumedEur?: true
    roiPercentage?: true
    avgResponseTimeMs?: true
    errorCount?: true
    userSatisfactionAvg?: true
    createdAt?: true
    _all?: true
  }

  export type NeuraMetricDailyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NeuraMetricDaily to aggregate.
     */
    where?: NeuraMetricDailyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeuraMetricDailies to fetch.
     */
    orderBy?: NeuraMetricDailyOrderByWithRelationInput | NeuraMetricDailyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NeuraMetricDailyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeuraMetricDailies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeuraMetricDailies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NeuraMetricDailies
    **/
    _count?: true | NeuraMetricDailyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NeuraMetricDailyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NeuraMetricDailySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NeuraMetricDailyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NeuraMetricDailyMaxAggregateInputType
  }

  export type GetNeuraMetricDailyAggregateType<T extends NeuraMetricDailyAggregateArgs> = {
        [P in keyof T & keyof AggregateNeuraMetricDaily]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNeuraMetricDaily[P]>
      : GetScalarType<T[P], AggregateNeuraMetricDaily[P]>
  }




  export type NeuraMetricDailyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeuraMetricDailyWhereInput
    orderBy?: NeuraMetricDailyOrderByWithAggregationInput | NeuraMetricDailyOrderByWithAggregationInput[]
    by: NeuraMetricDailyScalarFieldEnum[] | NeuraMetricDailyScalarFieldEnum
    having?: NeuraMetricDailyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NeuraMetricDailyCountAggregateInputType | true
    _avg?: NeuraMetricDailyAvgAggregateInputType
    _sum?: NeuraMetricDailySumAggregateInputType
    _min?: NeuraMetricDailyMinAggregateInputType
    _max?: NeuraMetricDailyMaxAggregateInputType
  }

  export type NeuraMetricDailyGroupByOutputType = {
    id: number
    organizationId: number
    neuraId: string
    date: Date
    conversationsCount: number
    messagesCount: number
    agentExecutionsCount: number
    timeSavedHours: Decimal
    valueGeneratedEur: Decimal
    costConsumedEur: Decimal
    roiPercentage: Decimal | null
    avgResponseTimeMs: number | null
    errorCount: number
    userSatisfactionAvg: Decimal | null
    createdAt: Date
    _count: NeuraMetricDailyCountAggregateOutputType | null
    _avg: NeuraMetricDailyAvgAggregateOutputType | null
    _sum: NeuraMetricDailySumAggregateOutputType | null
    _min: NeuraMetricDailyMinAggregateOutputType | null
    _max: NeuraMetricDailyMaxAggregateOutputType | null
  }

  type GetNeuraMetricDailyGroupByPayload<T extends NeuraMetricDailyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NeuraMetricDailyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NeuraMetricDailyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NeuraMetricDailyGroupByOutputType[P]>
            : GetScalarType<T[P], NeuraMetricDailyGroupByOutputType[P]>
        }
      >
    >


  export type NeuraMetricDailySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    neuraId?: boolean
    date?: boolean
    conversationsCount?: boolean
    messagesCount?: boolean
    agentExecutionsCount?: boolean
    timeSavedHours?: boolean
    valueGeneratedEur?: boolean
    costConsumedEur?: boolean
    roiPercentage?: boolean
    avgResponseTimeMs?: boolean
    errorCount?: boolean
    userSatisfactionAvg?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["neuraMetricDaily"]>

  export type NeuraMetricDailySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    neuraId?: boolean
    date?: boolean
    conversationsCount?: boolean
    messagesCount?: boolean
    agentExecutionsCount?: boolean
    timeSavedHours?: boolean
    valueGeneratedEur?: boolean
    costConsumedEur?: boolean
    roiPercentage?: boolean
    avgResponseTimeMs?: boolean
    errorCount?: boolean
    userSatisfactionAvg?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["neuraMetricDaily"]>

  export type NeuraMetricDailySelectScalar = {
    id?: boolean
    organizationId?: boolean
    neuraId?: boolean
    date?: boolean
    conversationsCount?: boolean
    messagesCount?: boolean
    agentExecutionsCount?: boolean
    timeSavedHours?: boolean
    valueGeneratedEur?: boolean
    costConsumedEur?: boolean
    roiPercentage?: boolean
    avgResponseTimeMs?: boolean
    errorCount?: boolean
    userSatisfactionAvg?: boolean
    createdAt?: boolean
  }

  export type NeuraMetricDailyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type NeuraMetricDailyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $NeuraMetricDailyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NeuraMetricDaily"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizationId: number
      neuraId: string
      date: Date
      conversationsCount: number
      messagesCount: number
      agentExecutionsCount: number
      timeSavedHours: Prisma.Decimal
      valueGeneratedEur: Prisma.Decimal
      costConsumedEur: Prisma.Decimal
      roiPercentage: Prisma.Decimal | null
      avgResponseTimeMs: number | null
      errorCount: number
      userSatisfactionAvg: Prisma.Decimal | null
      createdAt: Date
    }, ExtArgs["result"]["neuraMetricDaily"]>
    composites: {}
  }

  type NeuraMetricDailyGetPayload<S extends boolean | null | undefined | NeuraMetricDailyDefaultArgs> = $Result.GetResult<Prisma.$NeuraMetricDailyPayload, S>

  type NeuraMetricDailyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NeuraMetricDailyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NeuraMetricDailyCountAggregateInputType | true
    }

  export interface NeuraMetricDailyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NeuraMetricDaily'], meta: { name: 'NeuraMetricDaily' } }
    /**
     * Find zero or one NeuraMetricDaily that matches the filter.
     * @param {NeuraMetricDailyFindUniqueArgs} args - Arguments to find a NeuraMetricDaily
     * @example
     * // Get one NeuraMetricDaily
     * const neuraMetricDaily = await prisma.neuraMetricDaily.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NeuraMetricDailyFindUniqueArgs>(args: SelectSubset<T, NeuraMetricDailyFindUniqueArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NeuraMetricDaily that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NeuraMetricDailyFindUniqueOrThrowArgs} args - Arguments to find a NeuraMetricDaily
     * @example
     * // Get one NeuraMetricDaily
     * const neuraMetricDaily = await prisma.neuraMetricDaily.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NeuraMetricDailyFindUniqueOrThrowArgs>(args: SelectSubset<T, NeuraMetricDailyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NeuraMetricDaily that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeuraMetricDailyFindFirstArgs} args - Arguments to find a NeuraMetricDaily
     * @example
     * // Get one NeuraMetricDaily
     * const neuraMetricDaily = await prisma.neuraMetricDaily.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NeuraMetricDailyFindFirstArgs>(args?: SelectSubset<T, NeuraMetricDailyFindFirstArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NeuraMetricDaily that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeuraMetricDailyFindFirstOrThrowArgs} args - Arguments to find a NeuraMetricDaily
     * @example
     * // Get one NeuraMetricDaily
     * const neuraMetricDaily = await prisma.neuraMetricDaily.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NeuraMetricDailyFindFirstOrThrowArgs>(args?: SelectSubset<T, NeuraMetricDailyFindFirstOrThrowArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NeuraMetricDailies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeuraMetricDailyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NeuraMetricDailies
     * const neuraMetricDailies = await prisma.neuraMetricDaily.findMany()
     * 
     * // Get first 10 NeuraMetricDailies
     * const neuraMetricDailies = await prisma.neuraMetricDaily.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const neuraMetricDailyWithIdOnly = await prisma.neuraMetricDaily.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NeuraMetricDailyFindManyArgs>(args?: SelectSubset<T, NeuraMetricDailyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NeuraMetricDaily.
     * @param {NeuraMetricDailyCreateArgs} args - Arguments to create a NeuraMetricDaily.
     * @example
     * // Create one NeuraMetricDaily
     * const NeuraMetricDaily = await prisma.neuraMetricDaily.create({
     *   data: {
     *     // ... data to create a NeuraMetricDaily
     *   }
     * })
     * 
     */
    create<T extends NeuraMetricDailyCreateArgs>(args: SelectSubset<T, NeuraMetricDailyCreateArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NeuraMetricDailies.
     * @param {NeuraMetricDailyCreateManyArgs} args - Arguments to create many NeuraMetricDailies.
     * @example
     * // Create many NeuraMetricDailies
     * const neuraMetricDaily = await prisma.neuraMetricDaily.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NeuraMetricDailyCreateManyArgs>(args?: SelectSubset<T, NeuraMetricDailyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NeuraMetricDailies and returns the data saved in the database.
     * @param {NeuraMetricDailyCreateManyAndReturnArgs} args - Arguments to create many NeuraMetricDailies.
     * @example
     * // Create many NeuraMetricDailies
     * const neuraMetricDaily = await prisma.neuraMetricDaily.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NeuraMetricDailies and only return the `id`
     * const neuraMetricDailyWithIdOnly = await prisma.neuraMetricDaily.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NeuraMetricDailyCreateManyAndReturnArgs>(args?: SelectSubset<T, NeuraMetricDailyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a NeuraMetricDaily.
     * @param {NeuraMetricDailyDeleteArgs} args - Arguments to delete one NeuraMetricDaily.
     * @example
     * // Delete one NeuraMetricDaily
     * const NeuraMetricDaily = await prisma.neuraMetricDaily.delete({
     *   where: {
     *     // ... filter to delete one NeuraMetricDaily
     *   }
     * })
     * 
     */
    delete<T extends NeuraMetricDailyDeleteArgs>(args: SelectSubset<T, NeuraMetricDailyDeleteArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NeuraMetricDaily.
     * @param {NeuraMetricDailyUpdateArgs} args - Arguments to update one NeuraMetricDaily.
     * @example
     * // Update one NeuraMetricDaily
     * const neuraMetricDaily = await prisma.neuraMetricDaily.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NeuraMetricDailyUpdateArgs>(args: SelectSubset<T, NeuraMetricDailyUpdateArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NeuraMetricDailies.
     * @param {NeuraMetricDailyDeleteManyArgs} args - Arguments to filter NeuraMetricDailies to delete.
     * @example
     * // Delete a few NeuraMetricDailies
     * const { count } = await prisma.neuraMetricDaily.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NeuraMetricDailyDeleteManyArgs>(args?: SelectSubset<T, NeuraMetricDailyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NeuraMetricDailies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeuraMetricDailyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NeuraMetricDailies
     * const neuraMetricDaily = await prisma.neuraMetricDaily.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NeuraMetricDailyUpdateManyArgs>(args: SelectSubset<T, NeuraMetricDailyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NeuraMetricDaily.
     * @param {NeuraMetricDailyUpsertArgs} args - Arguments to update or create a NeuraMetricDaily.
     * @example
     * // Update or create a NeuraMetricDaily
     * const neuraMetricDaily = await prisma.neuraMetricDaily.upsert({
     *   create: {
     *     // ... data to create a NeuraMetricDaily
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NeuraMetricDaily we want to update
     *   }
     * })
     */
    upsert<T extends NeuraMetricDailyUpsertArgs>(args: SelectSubset<T, NeuraMetricDailyUpsertArgs<ExtArgs>>): Prisma__NeuraMetricDailyClient<$Result.GetResult<Prisma.$NeuraMetricDailyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NeuraMetricDailies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeuraMetricDailyCountArgs} args - Arguments to filter NeuraMetricDailies to count.
     * @example
     * // Count the number of NeuraMetricDailies
     * const count = await prisma.neuraMetricDaily.count({
     *   where: {
     *     // ... the filter for the NeuraMetricDailies we want to count
     *   }
     * })
    **/
    count<T extends NeuraMetricDailyCountArgs>(
      args?: Subset<T, NeuraMetricDailyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NeuraMetricDailyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NeuraMetricDaily.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeuraMetricDailyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NeuraMetricDailyAggregateArgs>(args: Subset<T, NeuraMetricDailyAggregateArgs>): Prisma.PrismaPromise<GetNeuraMetricDailyAggregateType<T>>

    /**
     * Group by NeuraMetricDaily.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeuraMetricDailyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NeuraMetricDailyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NeuraMetricDailyGroupByArgs['orderBy'] }
        : { orderBy?: NeuraMetricDailyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NeuraMetricDailyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNeuraMetricDailyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NeuraMetricDaily model
   */
  readonly fields: NeuraMetricDailyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NeuraMetricDaily.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NeuraMetricDailyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NeuraMetricDaily model
   */ 
  interface NeuraMetricDailyFieldRefs {
    readonly id: FieldRef<"NeuraMetricDaily", 'Int'>
    readonly organizationId: FieldRef<"NeuraMetricDaily", 'Int'>
    readonly neuraId: FieldRef<"NeuraMetricDaily", 'String'>
    readonly date: FieldRef<"NeuraMetricDaily", 'DateTime'>
    readonly conversationsCount: FieldRef<"NeuraMetricDaily", 'Int'>
    readonly messagesCount: FieldRef<"NeuraMetricDaily", 'Int'>
    readonly agentExecutionsCount: FieldRef<"NeuraMetricDaily", 'Int'>
    readonly timeSavedHours: FieldRef<"NeuraMetricDaily", 'Decimal'>
    readonly valueGeneratedEur: FieldRef<"NeuraMetricDaily", 'Decimal'>
    readonly costConsumedEur: FieldRef<"NeuraMetricDaily", 'Decimal'>
    readonly roiPercentage: FieldRef<"NeuraMetricDaily", 'Decimal'>
    readonly avgResponseTimeMs: FieldRef<"NeuraMetricDaily", 'Int'>
    readonly errorCount: FieldRef<"NeuraMetricDaily", 'Int'>
    readonly userSatisfactionAvg: FieldRef<"NeuraMetricDaily", 'Decimal'>
    readonly createdAt: FieldRef<"NeuraMetricDaily", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NeuraMetricDaily findUnique
   */
  export type NeuraMetricDailyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * Filter, which NeuraMetricDaily to fetch.
     */
    where: NeuraMetricDailyWhereUniqueInput
  }

  /**
   * NeuraMetricDaily findUniqueOrThrow
   */
  export type NeuraMetricDailyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * Filter, which NeuraMetricDaily to fetch.
     */
    where: NeuraMetricDailyWhereUniqueInput
  }

  /**
   * NeuraMetricDaily findFirst
   */
  export type NeuraMetricDailyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * Filter, which NeuraMetricDaily to fetch.
     */
    where?: NeuraMetricDailyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeuraMetricDailies to fetch.
     */
    orderBy?: NeuraMetricDailyOrderByWithRelationInput | NeuraMetricDailyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NeuraMetricDailies.
     */
    cursor?: NeuraMetricDailyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeuraMetricDailies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeuraMetricDailies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NeuraMetricDailies.
     */
    distinct?: NeuraMetricDailyScalarFieldEnum | NeuraMetricDailyScalarFieldEnum[]
  }

  /**
   * NeuraMetricDaily findFirstOrThrow
   */
  export type NeuraMetricDailyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * Filter, which NeuraMetricDaily to fetch.
     */
    where?: NeuraMetricDailyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeuraMetricDailies to fetch.
     */
    orderBy?: NeuraMetricDailyOrderByWithRelationInput | NeuraMetricDailyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NeuraMetricDailies.
     */
    cursor?: NeuraMetricDailyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeuraMetricDailies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeuraMetricDailies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NeuraMetricDailies.
     */
    distinct?: NeuraMetricDailyScalarFieldEnum | NeuraMetricDailyScalarFieldEnum[]
  }

  /**
   * NeuraMetricDaily findMany
   */
  export type NeuraMetricDailyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * Filter, which NeuraMetricDailies to fetch.
     */
    where?: NeuraMetricDailyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NeuraMetricDailies to fetch.
     */
    orderBy?: NeuraMetricDailyOrderByWithRelationInput | NeuraMetricDailyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NeuraMetricDailies.
     */
    cursor?: NeuraMetricDailyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NeuraMetricDailies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NeuraMetricDailies.
     */
    skip?: number
    distinct?: NeuraMetricDailyScalarFieldEnum | NeuraMetricDailyScalarFieldEnum[]
  }

  /**
   * NeuraMetricDaily create
   */
  export type NeuraMetricDailyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * The data needed to create a NeuraMetricDaily.
     */
    data: XOR<NeuraMetricDailyCreateInput, NeuraMetricDailyUncheckedCreateInput>
  }

  /**
   * NeuraMetricDaily createMany
   */
  export type NeuraMetricDailyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NeuraMetricDailies.
     */
    data: NeuraMetricDailyCreateManyInput | NeuraMetricDailyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NeuraMetricDaily createManyAndReturn
   */
  export type NeuraMetricDailyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many NeuraMetricDailies.
     */
    data: NeuraMetricDailyCreateManyInput | NeuraMetricDailyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NeuraMetricDaily update
   */
  export type NeuraMetricDailyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * The data needed to update a NeuraMetricDaily.
     */
    data: XOR<NeuraMetricDailyUpdateInput, NeuraMetricDailyUncheckedUpdateInput>
    /**
     * Choose, which NeuraMetricDaily to update.
     */
    where: NeuraMetricDailyWhereUniqueInput
  }

  /**
   * NeuraMetricDaily updateMany
   */
  export type NeuraMetricDailyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NeuraMetricDailies.
     */
    data: XOR<NeuraMetricDailyUpdateManyMutationInput, NeuraMetricDailyUncheckedUpdateManyInput>
    /**
     * Filter which NeuraMetricDailies to update
     */
    where?: NeuraMetricDailyWhereInput
  }

  /**
   * NeuraMetricDaily upsert
   */
  export type NeuraMetricDailyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * The filter to search for the NeuraMetricDaily to update in case it exists.
     */
    where: NeuraMetricDailyWhereUniqueInput
    /**
     * In case the NeuraMetricDaily found by the `where` argument doesn't exist, create a new NeuraMetricDaily with this data.
     */
    create: XOR<NeuraMetricDailyCreateInput, NeuraMetricDailyUncheckedCreateInput>
    /**
     * In case the NeuraMetricDaily was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NeuraMetricDailyUpdateInput, NeuraMetricDailyUncheckedUpdateInput>
  }

  /**
   * NeuraMetricDaily delete
   */
  export type NeuraMetricDailyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
    /**
     * Filter which NeuraMetricDaily to delete.
     */
    where: NeuraMetricDailyWhereUniqueInput
  }

  /**
   * NeuraMetricDaily deleteMany
   */
  export type NeuraMetricDailyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NeuraMetricDailies to delete
     */
    where?: NeuraMetricDailyWhereInput
  }

  /**
   * NeuraMetricDaily without action
   */
  export type NeuraMetricDailyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeuraMetricDaily
     */
    select?: NeuraMetricDailySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeuraMetricDailyInclude<ExtArgs> | null
  }


  /**
   * Model UserConsent
   */

  export type AggregateUserConsent = {
    _count: UserConsentCountAggregateOutputType | null
    _avg: UserConsentAvgAggregateOutputType | null
    _sum: UserConsentSumAggregateOutputType | null
    _min: UserConsentMinAggregateOutputType | null
    _max: UserConsentMaxAggregateOutputType | null
  }

  export type UserConsentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserConsentSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserConsentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    consentType: string | null
    granted: boolean | null
    ipAddress: string | null
    grantedAt: Date | null
    revokedAt: Date | null
  }

  export type UserConsentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    consentType: string | null
    granted: boolean | null
    ipAddress: string | null
    grantedAt: Date | null
    revokedAt: Date | null
  }

  export type UserConsentCountAggregateOutputType = {
    id: number
    userId: number
    consentType: number
    granted: number
    ipAddress: number
    grantedAt: number
    revokedAt: number
    _all: number
  }


  export type UserConsentAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserConsentSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserConsentMinAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    ipAddress?: true
    grantedAt?: true
    revokedAt?: true
  }

  export type UserConsentMaxAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    ipAddress?: true
    grantedAt?: true
    revokedAt?: true
  }

  export type UserConsentCountAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    ipAddress?: true
    grantedAt?: true
    revokedAt?: true
    _all?: true
  }

  export type UserConsentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserConsent to aggregate.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserConsents
    **/
    _count?: true | UserConsentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserConsentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserConsentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserConsentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserConsentMaxAggregateInputType
  }

  export type GetUserConsentAggregateType<T extends UserConsentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserConsent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserConsent[P]>
      : GetScalarType<T[P], AggregateUserConsent[P]>
  }




  export type UserConsentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserConsentWhereInput
    orderBy?: UserConsentOrderByWithAggregationInput | UserConsentOrderByWithAggregationInput[]
    by: UserConsentScalarFieldEnum[] | UserConsentScalarFieldEnum
    having?: UserConsentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserConsentCountAggregateInputType | true
    _avg?: UserConsentAvgAggregateInputType
    _sum?: UserConsentSumAggregateInputType
    _min?: UserConsentMinAggregateInputType
    _max?: UserConsentMaxAggregateInputType
  }

  export type UserConsentGroupByOutputType = {
    id: number
    userId: number
    consentType: string
    granted: boolean
    ipAddress: string | null
    grantedAt: Date
    revokedAt: Date | null
    _count: UserConsentCountAggregateOutputType | null
    _avg: UserConsentAvgAggregateOutputType | null
    _sum: UserConsentSumAggregateOutputType | null
    _min: UserConsentMinAggregateOutputType | null
    _max: UserConsentMaxAggregateOutputType | null
  }

  type GetUserConsentGroupByPayload<T extends UserConsentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserConsentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserConsentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserConsentGroupByOutputType[P]>
            : GetScalarType<T[P], UserConsentGroupByOutputType[P]>
        }
      >
    >


  export type UserConsentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    ipAddress?: boolean
    grantedAt?: boolean
    revokedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userConsent"]>

  export type UserConsentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    ipAddress?: boolean
    grantedAt?: boolean
    revokedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userConsent"]>

  export type UserConsentSelectScalar = {
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    ipAddress?: boolean
    grantedAt?: boolean
    revokedAt?: boolean
  }

  export type UserConsentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserConsentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserConsentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserConsent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      consentType: string
      granted: boolean
      ipAddress: string | null
      grantedAt: Date
      revokedAt: Date | null
    }, ExtArgs["result"]["userConsent"]>
    composites: {}
  }

  type UserConsentGetPayload<S extends boolean | null | undefined | UserConsentDefaultArgs> = $Result.GetResult<Prisma.$UserConsentPayload, S>

  type UserConsentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserConsentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserConsentCountAggregateInputType | true
    }

  export interface UserConsentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserConsent'], meta: { name: 'UserConsent' } }
    /**
     * Find zero or one UserConsent that matches the filter.
     * @param {UserConsentFindUniqueArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserConsentFindUniqueArgs>(args: SelectSubset<T, UserConsentFindUniqueArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserConsent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserConsentFindUniqueOrThrowArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserConsentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserConsentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserConsent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentFindFirstArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserConsentFindFirstArgs>(args?: SelectSubset<T, UserConsentFindFirstArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserConsent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentFindFirstOrThrowArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserConsentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserConsentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserConsents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserConsents
     * const userConsents = await prisma.userConsent.findMany()
     * 
     * // Get first 10 UserConsents
     * const userConsents = await prisma.userConsent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userConsentWithIdOnly = await prisma.userConsent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserConsentFindManyArgs>(args?: SelectSubset<T, UserConsentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserConsent.
     * @param {UserConsentCreateArgs} args - Arguments to create a UserConsent.
     * @example
     * // Create one UserConsent
     * const UserConsent = await prisma.userConsent.create({
     *   data: {
     *     // ... data to create a UserConsent
     *   }
     * })
     * 
     */
    create<T extends UserConsentCreateArgs>(args: SelectSubset<T, UserConsentCreateArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserConsents.
     * @param {UserConsentCreateManyArgs} args - Arguments to create many UserConsents.
     * @example
     * // Create many UserConsents
     * const userConsent = await prisma.userConsent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserConsentCreateManyArgs>(args?: SelectSubset<T, UserConsentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserConsents and returns the data saved in the database.
     * @param {UserConsentCreateManyAndReturnArgs} args - Arguments to create many UserConsents.
     * @example
     * // Create many UserConsents
     * const userConsent = await prisma.userConsent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserConsents and only return the `id`
     * const userConsentWithIdOnly = await prisma.userConsent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserConsentCreateManyAndReturnArgs>(args?: SelectSubset<T, UserConsentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserConsent.
     * @param {UserConsentDeleteArgs} args - Arguments to delete one UserConsent.
     * @example
     * // Delete one UserConsent
     * const UserConsent = await prisma.userConsent.delete({
     *   where: {
     *     // ... filter to delete one UserConsent
     *   }
     * })
     * 
     */
    delete<T extends UserConsentDeleteArgs>(args: SelectSubset<T, UserConsentDeleteArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserConsent.
     * @param {UserConsentUpdateArgs} args - Arguments to update one UserConsent.
     * @example
     * // Update one UserConsent
     * const userConsent = await prisma.userConsent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserConsentUpdateArgs>(args: SelectSubset<T, UserConsentUpdateArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserConsents.
     * @param {UserConsentDeleteManyArgs} args - Arguments to filter UserConsents to delete.
     * @example
     * // Delete a few UserConsents
     * const { count } = await prisma.userConsent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserConsentDeleteManyArgs>(args?: SelectSubset<T, UserConsentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserConsents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserConsents
     * const userConsent = await prisma.userConsent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserConsentUpdateManyArgs>(args: SelectSubset<T, UserConsentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserConsent.
     * @param {UserConsentUpsertArgs} args - Arguments to update or create a UserConsent.
     * @example
     * // Update or create a UserConsent
     * const userConsent = await prisma.userConsent.upsert({
     *   create: {
     *     // ... data to create a UserConsent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserConsent we want to update
     *   }
     * })
     */
    upsert<T extends UserConsentUpsertArgs>(args: SelectSubset<T, UserConsentUpsertArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserConsents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentCountArgs} args - Arguments to filter UserConsents to count.
     * @example
     * // Count the number of UserConsents
     * const count = await prisma.userConsent.count({
     *   where: {
     *     // ... the filter for the UserConsents we want to count
     *   }
     * })
    **/
    count<T extends UserConsentCountArgs>(
      args?: Subset<T, UserConsentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserConsentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserConsent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserConsentAggregateArgs>(args: Subset<T, UserConsentAggregateArgs>): Prisma.PrismaPromise<GetUserConsentAggregateType<T>>

    /**
     * Group by UserConsent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserConsentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserConsentGroupByArgs['orderBy'] }
        : { orderBy?: UserConsentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserConsentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserConsentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserConsent model
   */
  readonly fields: UserConsentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserConsent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserConsentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserConsent model
   */ 
  interface UserConsentFieldRefs {
    readonly id: FieldRef<"UserConsent", 'Int'>
    readonly userId: FieldRef<"UserConsent", 'Int'>
    readonly consentType: FieldRef<"UserConsent", 'String'>
    readonly granted: FieldRef<"UserConsent", 'Boolean'>
    readonly ipAddress: FieldRef<"UserConsent", 'String'>
    readonly grantedAt: FieldRef<"UserConsent", 'DateTime'>
    readonly revokedAt: FieldRef<"UserConsent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserConsent findUnique
   */
  export type UserConsentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent findUniqueOrThrow
   */
  export type UserConsentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent findFirst
   */
  export type UserConsentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserConsents.
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserConsents.
     */
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * UserConsent findFirstOrThrow
   */
  export type UserConsentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserConsents.
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserConsents.
     */
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * UserConsent findMany
   */
  export type UserConsentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsents to fetch.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserConsents.
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * UserConsent create
   */
  export type UserConsentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserConsent.
     */
    data: XOR<UserConsentCreateInput, UserConsentUncheckedCreateInput>
  }

  /**
   * UserConsent createMany
   */
  export type UserConsentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserConsents.
     */
    data: UserConsentCreateManyInput | UserConsentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserConsent createManyAndReturn
   */
  export type UserConsentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserConsents.
     */
    data: UserConsentCreateManyInput | UserConsentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserConsent update
   */
  export type UserConsentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserConsent.
     */
    data: XOR<UserConsentUpdateInput, UserConsentUncheckedUpdateInput>
    /**
     * Choose, which UserConsent to update.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent updateMany
   */
  export type UserConsentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserConsents.
     */
    data: XOR<UserConsentUpdateManyMutationInput, UserConsentUncheckedUpdateManyInput>
    /**
     * Filter which UserConsents to update
     */
    where?: UserConsentWhereInput
  }

  /**
   * UserConsent upsert
   */
  export type UserConsentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserConsent to update in case it exists.
     */
    where: UserConsentWhereUniqueInput
    /**
     * In case the UserConsent found by the `where` argument doesn't exist, create a new UserConsent with this data.
     */
    create: XOR<UserConsentCreateInput, UserConsentUncheckedCreateInput>
    /**
     * In case the UserConsent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserConsentUpdateInput, UserConsentUncheckedUpdateInput>
  }

  /**
   * UserConsent delete
   */
  export type UserConsentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter which UserConsent to delete.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent deleteMany
   */
  export type UserConsentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserConsents to delete
     */
    where?: UserConsentWhereInput
  }

  /**
   * UserConsent without action
   */
  export type UserConsentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
  }


  /**
   * Model PromptVersion
   */

  export type AggregatePromptVersion = {
    _count: PromptVersionCountAggregateOutputType | null
    _avg: PromptVersionAvgAggregateOutputType | null
    _sum: PromptVersionSumAggregateOutputType | null
    _min: PromptVersionMinAggregateOutputType | null
    _max: PromptVersionMaxAggregateOutputType | null
  }

  export type PromptVersionAvgAggregateOutputType = {
    id: number | null
    version: number | null
    temperature: Decimal | null
    maxTokens: number | null
    performanceScore: Decimal | null
    createdById: number | null
  }

  export type PromptVersionSumAggregateOutputType = {
    id: number | null
    version: number | null
    temperature: Decimal | null
    maxTokens: number | null
    performanceScore: Decimal | null
    createdById: number | null
  }

  export type PromptVersionMinAggregateOutputType = {
    id: number | null
    neuraId: string | null
    version: number | null
    systemPrompt: string | null
    contextTemplate: string | null
    model: string | null
    temperature: Decimal | null
    maxTokens: number | null
    isActive: boolean | null
    performanceScore: Decimal | null
    createdById: number | null
    createdAt: Date | null
  }

  export type PromptVersionMaxAggregateOutputType = {
    id: number | null
    neuraId: string | null
    version: number | null
    systemPrompt: string | null
    contextTemplate: string | null
    model: string | null
    temperature: Decimal | null
    maxTokens: number | null
    isActive: boolean | null
    performanceScore: Decimal | null
    createdById: number | null
    createdAt: Date | null
  }

  export type PromptVersionCountAggregateOutputType = {
    id: number
    neuraId: number
    version: number
    systemPrompt: number
    contextTemplate: number
    fewShotExamples: number
    tools: number
    model: number
    temperature: number
    maxTokens: number
    isActive: number
    performanceScore: number
    createdById: number
    createdAt: number
    _all: number
  }


  export type PromptVersionAvgAggregateInputType = {
    id?: true
    version?: true
    temperature?: true
    maxTokens?: true
    performanceScore?: true
    createdById?: true
  }

  export type PromptVersionSumAggregateInputType = {
    id?: true
    version?: true
    temperature?: true
    maxTokens?: true
    performanceScore?: true
    createdById?: true
  }

  export type PromptVersionMinAggregateInputType = {
    id?: true
    neuraId?: true
    version?: true
    systemPrompt?: true
    contextTemplate?: true
    model?: true
    temperature?: true
    maxTokens?: true
    isActive?: true
    performanceScore?: true
    createdById?: true
    createdAt?: true
  }

  export type PromptVersionMaxAggregateInputType = {
    id?: true
    neuraId?: true
    version?: true
    systemPrompt?: true
    contextTemplate?: true
    model?: true
    temperature?: true
    maxTokens?: true
    isActive?: true
    performanceScore?: true
    createdById?: true
    createdAt?: true
  }

  export type PromptVersionCountAggregateInputType = {
    id?: true
    neuraId?: true
    version?: true
    systemPrompt?: true
    contextTemplate?: true
    fewShotExamples?: true
    tools?: true
    model?: true
    temperature?: true
    maxTokens?: true
    isActive?: true
    performanceScore?: true
    createdById?: true
    createdAt?: true
    _all?: true
  }

  export type PromptVersionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromptVersion to aggregate.
     */
    where?: PromptVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptVersions to fetch.
     */
    orderBy?: PromptVersionOrderByWithRelationInput | PromptVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromptVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromptVersions
    **/
    _count?: true | PromptVersionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromptVersionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromptVersionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromptVersionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromptVersionMaxAggregateInputType
  }

  export type GetPromptVersionAggregateType<T extends PromptVersionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromptVersion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromptVersion[P]>
      : GetScalarType<T[P], AggregatePromptVersion[P]>
  }




  export type PromptVersionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromptVersionWhereInput
    orderBy?: PromptVersionOrderByWithAggregationInput | PromptVersionOrderByWithAggregationInput[]
    by: PromptVersionScalarFieldEnum[] | PromptVersionScalarFieldEnum
    having?: PromptVersionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromptVersionCountAggregateInputType | true
    _avg?: PromptVersionAvgAggregateInputType
    _sum?: PromptVersionSumAggregateInputType
    _min?: PromptVersionMinAggregateInputType
    _max?: PromptVersionMaxAggregateInputType
  }

  export type PromptVersionGroupByOutputType = {
    id: number
    neuraId: string
    version: number
    systemPrompt: string
    contextTemplate: string | null
    fewShotExamples: JsonValue | null
    tools: JsonValue | null
    model: string | null
    temperature: Decimal | null
    maxTokens: number | null
    isActive: boolean
    performanceScore: Decimal | null
    createdById: number | null
    createdAt: Date
    _count: PromptVersionCountAggregateOutputType | null
    _avg: PromptVersionAvgAggregateOutputType | null
    _sum: PromptVersionSumAggregateOutputType | null
    _min: PromptVersionMinAggregateOutputType | null
    _max: PromptVersionMaxAggregateOutputType | null
  }

  type GetPromptVersionGroupByPayload<T extends PromptVersionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromptVersionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromptVersionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromptVersionGroupByOutputType[P]>
            : GetScalarType<T[P], PromptVersionGroupByOutputType[P]>
        }
      >
    >


  export type PromptVersionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    neuraId?: boolean
    version?: boolean
    systemPrompt?: boolean
    contextTemplate?: boolean
    fewShotExamples?: boolean
    tools?: boolean
    model?: boolean
    temperature?: boolean
    maxTokens?: boolean
    isActive?: boolean
    performanceScore?: boolean
    createdById?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["promptVersion"]>

  export type PromptVersionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    neuraId?: boolean
    version?: boolean
    systemPrompt?: boolean
    contextTemplate?: boolean
    fewShotExamples?: boolean
    tools?: boolean
    model?: boolean
    temperature?: boolean
    maxTokens?: boolean
    isActive?: boolean
    performanceScore?: boolean
    createdById?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["promptVersion"]>

  export type PromptVersionSelectScalar = {
    id?: boolean
    neuraId?: boolean
    version?: boolean
    systemPrompt?: boolean
    contextTemplate?: boolean
    fewShotExamples?: boolean
    tools?: boolean
    model?: boolean
    temperature?: boolean
    maxTokens?: boolean
    isActive?: boolean
    performanceScore?: boolean
    createdById?: boolean
    createdAt?: boolean
  }


  export type $PromptVersionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PromptVersion"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      neuraId: string
      version: number
      systemPrompt: string
      contextTemplate: string | null
      fewShotExamples: Prisma.JsonValue | null
      tools: Prisma.JsonValue | null
      model: string | null
      temperature: Prisma.Decimal | null
      maxTokens: number | null
      isActive: boolean
      performanceScore: Prisma.Decimal | null
      createdById: number | null
      createdAt: Date
    }, ExtArgs["result"]["promptVersion"]>
    composites: {}
  }

  type PromptVersionGetPayload<S extends boolean | null | undefined | PromptVersionDefaultArgs> = $Result.GetResult<Prisma.$PromptVersionPayload, S>

  type PromptVersionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PromptVersionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PromptVersionCountAggregateInputType | true
    }

  export interface PromptVersionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromptVersion'], meta: { name: 'PromptVersion' } }
    /**
     * Find zero or one PromptVersion that matches the filter.
     * @param {PromptVersionFindUniqueArgs} args - Arguments to find a PromptVersion
     * @example
     * // Get one PromptVersion
     * const promptVersion = await prisma.promptVersion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromptVersionFindUniqueArgs>(args: SelectSubset<T, PromptVersionFindUniqueArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PromptVersion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PromptVersionFindUniqueOrThrowArgs} args - Arguments to find a PromptVersion
     * @example
     * // Get one PromptVersion
     * const promptVersion = await prisma.promptVersion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromptVersionFindUniqueOrThrowArgs>(args: SelectSubset<T, PromptVersionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PromptVersion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptVersionFindFirstArgs} args - Arguments to find a PromptVersion
     * @example
     * // Get one PromptVersion
     * const promptVersion = await prisma.promptVersion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromptVersionFindFirstArgs>(args?: SelectSubset<T, PromptVersionFindFirstArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PromptVersion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptVersionFindFirstOrThrowArgs} args - Arguments to find a PromptVersion
     * @example
     * // Get one PromptVersion
     * const promptVersion = await prisma.promptVersion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromptVersionFindFirstOrThrowArgs>(args?: SelectSubset<T, PromptVersionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PromptVersions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptVersionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromptVersions
     * const promptVersions = await prisma.promptVersion.findMany()
     * 
     * // Get first 10 PromptVersions
     * const promptVersions = await prisma.promptVersion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promptVersionWithIdOnly = await prisma.promptVersion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromptVersionFindManyArgs>(args?: SelectSubset<T, PromptVersionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PromptVersion.
     * @param {PromptVersionCreateArgs} args - Arguments to create a PromptVersion.
     * @example
     * // Create one PromptVersion
     * const PromptVersion = await prisma.promptVersion.create({
     *   data: {
     *     // ... data to create a PromptVersion
     *   }
     * })
     * 
     */
    create<T extends PromptVersionCreateArgs>(args: SelectSubset<T, PromptVersionCreateArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PromptVersions.
     * @param {PromptVersionCreateManyArgs} args - Arguments to create many PromptVersions.
     * @example
     * // Create many PromptVersions
     * const promptVersion = await prisma.promptVersion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromptVersionCreateManyArgs>(args?: SelectSubset<T, PromptVersionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PromptVersions and returns the data saved in the database.
     * @param {PromptVersionCreateManyAndReturnArgs} args - Arguments to create many PromptVersions.
     * @example
     * // Create many PromptVersions
     * const promptVersion = await prisma.promptVersion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PromptVersions and only return the `id`
     * const promptVersionWithIdOnly = await prisma.promptVersion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PromptVersionCreateManyAndReturnArgs>(args?: SelectSubset<T, PromptVersionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PromptVersion.
     * @param {PromptVersionDeleteArgs} args - Arguments to delete one PromptVersion.
     * @example
     * // Delete one PromptVersion
     * const PromptVersion = await prisma.promptVersion.delete({
     *   where: {
     *     // ... filter to delete one PromptVersion
     *   }
     * })
     * 
     */
    delete<T extends PromptVersionDeleteArgs>(args: SelectSubset<T, PromptVersionDeleteArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PromptVersion.
     * @param {PromptVersionUpdateArgs} args - Arguments to update one PromptVersion.
     * @example
     * // Update one PromptVersion
     * const promptVersion = await prisma.promptVersion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromptVersionUpdateArgs>(args: SelectSubset<T, PromptVersionUpdateArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PromptVersions.
     * @param {PromptVersionDeleteManyArgs} args - Arguments to filter PromptVersions to delete.
     * @example
     * // Delete a few PromptVersions
     * const { count } = await prisma.promptVersion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromptVersionDeleteManyArgs>(args?: SelectSubset<T, PromptVersionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromptVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptVersionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromptVersions
     * const promptVersion = await prisma.promptVersion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromptVersionUpdateManyArgs>(args: SelectSubset<T, PromptVersionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PromptVersion.
     * @param {PromptVersionUpsertArgs} args - Arguments to update or create a PromptVersion.
     * @example
     * // Update or create a PromptVersion
     * const promptVersion = await prisma.promptVersion.upsert({
     *   create: {
     *     // ... data to create a PromptVersion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromptVersion we want to update
     *   }
     * })
     */
    upsert<T extends PromptVersionUpsertArgs>(args: SelectSubset<T, PromptVersionUpsertArgs<ExtArgs>>): Prisma__PromptVersionClient<$Result.GetResult<Prisma.$PromptVersionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PromptVersions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptVersionCountArgs} args - Arguments to filter PromptVersions to count.
     * @example
     * // Count the number of PromptVersions
     * const count = await prisma.promptVersion.count({
     *   where: {
     *     // ... the filter for the PromptVersions we want to count
     *   }
     * })
    **/
    count<T extends PromptVersionCountArgs>(
      args?: Subset<T, PromptVersionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromptVersionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromptVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptVersionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromptVersionAggregateArgs>(args: Subset<T, PromptVersionAggregateArgs>): Prisma.PrismaPromise<GetPromptVersionAggregateType<T>>

    /**
     * Group by PromptVersion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromptVersionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromptVersionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromptVersionGroupByArgs['orderBy'] }
        : { orderBy?: PromptVersionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromptVersionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromptVersionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PromptVersion model
   */
  readonly fields: PromptVersionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PromptVersion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromptVersionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PromptVersion model
   */ 
  interface PromptVersionFieldRefs {
    readonly id: FieldRef<"PromptVersion", 'Int'>
    readonly neuraId: FieldRef<"PromptVersion", 'String'>
    readonly version: FieldRef<"PromptVersion", 'Int'>
    readonly systemPrompt: FieldRef<"PromptVersion", 'String'>
    readonly contextTemplate: FieldRef<"PromptVersion", 'String'>
    readonly fewShotExamples: FieldRef<"PromptVersion", 'Json'>
    readonly tools: FieldRef<"PromptVersion", 'Json'>
    readonly model: FieldRef<"PromptVersion", 'String'>
    readonly temperature: FieldRef<"PromptVersion", 'Decimal'>
    readonly maxTokens: FieldRef<"PromptVersion", 'Int'>
    readonly isActive: FieldRef<"PromptVersion", 'Boolean'>
    readonly performanceScore: FieldRef<"PromptVersion", 'Decimal'>
    readonly createdById: FieldRef<"PromptVersion", 'Int'>
    readonly createdAt: FieldRef<"PromptVersion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PromptVersion findUnique
   */
  export type PromptVersionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * Filter, which PromptVersion to fetch.
     */
    where: PromptVersionWhereUniqueInput
  }

  /**
   * PromptVersion findUniqueOrThrow
   */
  export type PromptVersionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * Filter, which PromptVersion to fetch.
     */
    where: PromptVersionWhereUniqueInput
  }

  /**
   * PromptVersion findFirst
   */
  export type PromptVersionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * Filter, which PromptVersion to fetch.
     */
    where?: PromptVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptVersions to fetch.
     */
    orderBy?: PromptVersionOrderByWithRelationInput | PromptVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromptVersions.
     */
    cursor?: PromptVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromptVersions.
     */
    distinct?: PromptVersionScalarFieldEnum | PromptVersionScalarFieldEnum[]
  }

  /**
   * PromptVersion findFirstOrThrow
   */
  export type PromptVersionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * Filter, which PromptVersion to fetch.
     */
    where?: PromptVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptVersions to fetch.
     */
    orderBy?: PromptVersionOrderByWithRelationInput | PromptVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromptVersions.
     */
    cursor?: PromptVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptVersions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromptVersions.
     */
    distinct?: PromptVersionScalarFieldEnum | PromptVersionScalarFieldEnum[]
  }

  /**
   * PromptVersion findMany
   */
  export type PromptVersionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * Filter, which PromptVersions to fetch.
     */
    where?: PromptVersionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromptVersions to fetch.
     */
    orderBy?: PromptVersionOrderByWithRelationInput | PromptVersionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromptVersions.
     */
    cursor?: PromptVersionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromptVersions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromptVersions.
     */
    skip?: number
    distinct?: PromptVersionScalarFieldEnum | PromptVersionScalarFieldEnum[]
  }

  /**
   * PromptVersion create
   */
  export type PromptVersionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * The data needed to create a PromptVersion.
     */
    data: XOR<PromptVersionCreateInput, PromptVersionUncheckedCreateInput>
  }

  /**
   * PromptVersion createMany
   */
  export type PromptVersionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PromptVersions.
     */
    data: PromptVersionCreateManyInput | PromptVersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromptVersion createManyAndReturn
   */
  export type PromptVersionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PromptVersions.
     */
    data: PromptVersionCreateManyInput | PromptVersionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromptVersion update
   */
  export type PromptVersionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * The data needed to update a PromptVersion.
     */
    data: XOR<PromptVersionUpdateInput, PromptVersionUncheckedUpdateInput>
    /**
     * Choose, which PromptVersion to update.
     */
    where: PromptVersionWhereUniqueInput
  }

  /**
   * PromptVersion updateMany
   */
  export type PromptVersionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PromptVersions.
     */
    data: XOR<PromptVersionUpdateManyMutationInput, PromptVersionUncheckedUpdateManyInput>
    /**
     * Filter which PromptVersions to update
     */
    where?: PromptVersionWhereInput
  }

  /**
   * PromptVersion upsert
   */
  export type PromptVersionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * The filter to search for the PromptVersion to update in case it exists.
     */
    where: PromptVersionWhereUniqueInput
    /**
     * In case the PromptVersion found by the `where` argument doesn't exist, create a new PromptVersion with this data.
     */
    create: XOR<PromptVersionCreateInput, PromptVersionUncheckedCreateInput>
    /**
     * In case the PromptVersion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromptVersionUpdateInput, PromptVersionUncheckedUpdateInput>
  }

  /**
   * PromptVersion delete
   */
  export type PromptVersionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
    /**
     * Filter which PromptVersion to delete.
     */
    where: PromptVersionWhereUniqueInput
  }

  /**
   * PromptVersion deleteMany
   */
  export type PromptVersionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromptVersions to delete
     */
    where?: PromptVersionWhereInput
  }

  /**
   * PromptVersion without action
   */
  export type PromptVersionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromptVersion
     */
    select?: PromptVersionSelect<ExtArgs> | null
  }


  /**
   * Model IntegrationConfig
   */

  export type AggregateIntegrationConfig = {
    _count: IntegrationConfigCountAggregateOutputType | null
    _avg: IntegrationConfigAvgAggregateOutputType | null
    _sum: IntegrationConfigSumAggregateOutputType | null
    _min: IntegrationConfigMinAggregateOutputType | null
    _max: IntegrationConfigMaxAggregateOutputType | null
  }

  export type IntegrationConfigAvgAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type IntegrationConfigSumAggregateOutputType = {
    id: number | null
    organizationId: number | null
  }

  export type IntegrationConfigMinAggregateOutputType = {
    id: number | null
    organizationId: number | null
    integrationType: string | null
    credentialsEncrypted: string | null
    isActive: boolean | null
    lastSyncAt: Date | null
    createdAt: Date | null
  }

  export type IntegrationConfigMaxAggregateOutputType = {
    id: number | null
    organizationId: number | null
    integrationType: string | null
    credentialsEncrypted: string | null
    isActive: boolean | null
    lastSyncAt: Date | null
    createdAt: Date | null
  }

  export type IntegrationConfigCountAggregateOutputType = {
    id: number
    organizationId: number
    integrationType: number
    credentialsEncrypted: number
    config: number
    isActive: number
    lastSyncAt: number
    createdAt: number
    _all: number
  }


  export type IntegrationConfigAvgAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type IntegrationConfigSumAggregateInputType = {
    id?: true
    organizationId?: true
  }

  export type IntegrationConfigMinAggregateInputType = {
    id?: true
    organizationId?: true
    integrationType?: true
    credentialsEncrypted?: true
    isActive?: true
    lastSyncAt?: true
    createdAt?: true
  }

  export type IntegrationConfigMaxAggregateInputType = {
    id?: true
    organizationId?: true
    integrationType?: true
    credentialsEncrypted?: true
    isActive?: true
    lastSyncAt?: true
    createdAt?: true
  }

  export type IntegrationConfigCountAggregateInputType = {
    id?: true
    organizationId?: true
    integrationType?: true
    credentialsEncrypted?: true
    config?: true
    isActive?: true
    lastSyncAt?: true
    createdAt?: true
    _all?: true
  }

  export type IntegrationConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationConfig to aggregate.
     */
    where?: IntegrationConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationConfigs to fetch.
     */
    orderBy?: IntegrationConfigOrderByWithRelationInput | IntegrationConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IntegrationConfigs
    **/
    _count?: true | IntegrationConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IntegrationConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IntegrationConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationConfigMaxAggregateInputType
  }

  export type GetIntegrationConfigAggregateType<T extends IntegrationConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrationConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrationConfig[P]>
      : GetScalarType<T[P], AggregateIntegrationConfig[P]>
  }




  export type IntegrationConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationConfigWhereInput
    orderBy?: IntegrationConfigOrderByWithAggregationInput | IntegrationConfigOrderByWithAggregationInput[]
    by: IntegrationConfigScalarFieldEnum[] | IntegrationConfigScalarFieldEnum
    having?: IntegrationConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationConfigCountAggregateInputType | true
    _avg?: IntegrationConfigAvgAggregateInputType
    _sum?: IntegrationConfigSumAggregateInputType
    _min?: IntegrationConfigMinAggregateInputType
    _max?: IntegrationConfigMaxAggregateInputType
  }

  export type IntegrationConfigGroupByOutputType = {
    id: number
    organizationId: number
    integrationType: string
    credentialsEncrypted: string
    config: JsonValue | null
    isActive: boolean
    lastSyncAt: Date | null
    createdAt: Date
    _count: IntegrationConfigCountAggregateOutputType | null
    _avg: IntegrationConfigAvgAggregateOutputType | null
    _sum: IntegrationConfigSumAggregateOutputType | null
    _min: IntegrationConfigMinAggregateOutputType | null
    _max: IntegrationConfigMaxAggregateOutputType | null
  }

  type GetIntegrationConfigGroupByPayload<T extends IntegrationConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationConfigGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationConfigGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    integrationType?: boolean
    credentialsEncrypted?: boolean
    config?: boolean
    isActive?: boolean
    lastSyncAt?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    syncLogs?: boolean | IntegrationConfig$syncLogsArgs<ExtArgs>
    _count?: boolean | IntegrationConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationConfig"]>

  export type IntegrationConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    integrationType?: boolean
    credentialsEncrypted?: boolean
    config?: boolean
    isActive?: boolean
    lastSyncAt?: boolean
    createdAt?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationConfig"]>

  export type IntegrationConfigSelectScalar = {
    id?: boolean
    organizationId?: boolean
    integrationType?: boolean
    credentialsEncrypted?: boolean
    config?: boolean
    isActive?: boolean
    lastSyncAt?: boolean
    createdAt?: boolean
  }

  export type IntegrationConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    syncLogs?: boolean | IntegrationConfig$syncLogsArgs<ExtArgs>
    _count?: boolean | IntegrationConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IntegrationConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $IntegrationConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IntegrationConfig"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      syncLogs: Prisma.$IntegrationSyncLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizationId: number
      integrationType: string
      credentialsEncrypted: string
      config: Prisma.JsonValue | null
      isActive: boolean
      lastSyncAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["integrationConfig"]>
    composites: {}
  }

  type IntegrationConfigGetPayload<S extends boolean | null | undefined | IntegrationConfigDefaultArgs> = $Result.GetResult<Prisma.$IntegrationConfigPayload, S>

  type IntegrationConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IntegrationConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IntegrationConfigCountAggregateInputType | true
    }

  export interface IntegrationConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IntegrationConfig'], meta: { name: 'IntegrationConfig' } }
    /**
     * Find zero or one IntegrationConfig that matches the filter.
     * @param {IntegrationConfigFindUniqueArgs} args - Arguments to find a IntegrationConfig
     * @example
     * // Get one IntegrationConfig
     * const integrationConfig = await prisma.integrationConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationConfigFindUniqueArgs>(args: SelectSubset<T, IntegrationConfigFindUniqueArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IntegrationConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IntegrationConfigFindUniqueOrThrowArgs} args - Arguments to find a IntegrationConfig
     * @example
     * // Get one IntegrationConfig
     * const integrationConfig = await prisma.integrationConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IntegrationConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationConfigFindFirstArgs} args - Arguments to find a IntegrationConfig
     * @example
     * // Get one IntegrationConfig
     * const integrationConfig = await prisma.integrationConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationConfigFindFirstArgs>(args?: SelectSubset<T, IntegrationConfigFindFirstArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IntegrationConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationConfigFindFirstOrThrowArgs} args - Arguments to find a IntegrationConfig
     * @example
     * // Get one IntegrationConfig
     * const integrationConfig = await prisma.integrationConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IntegrationConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IntegrationConfigs
     * const integrationConfigs = await prisma.integrationConfig.findMany()
     * 
     * // Get first 10 IntegrationConfigs
     * const integrationConfigs = await prisma.integrationConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationConfigWithIdOnly = await prisma.integrationConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationConfigFindManyArgs>(args?: SelectSubset<T, IntegrationConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IntegrationConfig.
     * @param {IntegrationConfigCreateArgs} args - Arguments to create a IntegrationConfig.
     * @example
     * // Create one IntegrationConfig
     * const IntegrationConfig = await prisma.integrationConfig.create({
     *   data: {
     *     // ... data to create a IntegrationConfig
     *   }
     * })
     * 
     */
    create<T extends IntegrationConfigCreateArgs>(args: SelectSubset<T, IntegrationConfigCreateArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IntegrationConfigs.
     * @param {IntegrationConfigCreateManyArgs} args - Arguments to create many IntegrationConfigs.
     * @example
     * // Create many IntegrationConfigs
     * const integrationConfig = await prisma.integrationConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationConfigCreateManyArgs>(args?: SelectSubset<T, IntegrationConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IntegrationConfigs and returns the data saved in the database.
     * @param {IntegrationConfigCreateManyAndReturnArgs} args - Arguments to create many IntegrationConfigs.
     * @example
     * // Create many IntegrationConfigs
     * const integrationConfig = await prisma.integrationConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IntegrationConfigs and only return the `id`
     * const integrationConfigWithIdOnly = await prisma.integrationConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IntegrationConfig.
     * @param {IntegrationConfigDeleteArgs} args - Arguments to delete one IntegrationConfig.
     * @example
     * // Delete one IntegrationConfig
     * const IntegrationConfig = await prisma.integrationConfig.delete({
     *   where: {
     *     // ... filter to delete one IntegrationConfig
     *   }
     * })
     * 
     */
    delete<T extends IntegrationConfigDeleteArgs>(args: SelectSubset<T, IntegrationConfigDeleteArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IntegrationConfig.
     * @param {IntegrationConfigUpdateArgs} args - Arguments to update one IntegrationConfig.
     * @example
     * // Update one IntegrationConfig
     * const integrationConfig = await prisma.integrationConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationConfigUpdateArgs>(args: SelectSubset<T, IntegrationConfigUpdateArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IntegrationConfigs.
     * @param {IntegrationConfigDeleteManyArgs} args - Arguments to filter IntegrationConfigs to delete.
     * @example
     * // Delete a few IntegrationConfigs
     * const { count } = await prisma.integrationConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationConfigDeleteManyArgs>(args?: SelectSubset<T, IntegrationConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IntegrationConfigs
     * const integrationConfig = await prisma.integrationConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationConfigUpdateManyArgs>(args: SelectSubset<T, IntegrationConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IntegrationConfig.
     * @param {IntegrationConfigUpsertArgs} args - Arguments to update or create a IntegrationConfig.
     * @example
     * // Update or create a IntegrationConfig
     * const integrationConfig = await prisma.integrationConfig.upsert({
     *   create: {
     *     // ... data to create a IntegrationConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IntegrationConfig we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationConfigUpsertArgs>(args: SelectSubset<T, IntegrationConfigUpsertArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IntegrationConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationConfigCountArgs} args - Arguments to filter IntegrationConfigs to count.
     * @example
     * // Count the number of IntegrationConfigs
     * const count = await prisma.integrationConfig.count({
     *   where: {
     *     // ... the filter for the IntegrationConfigs we want to count
     *   }
     * })
    **/
    count<T extends IntegrationConfigCountArgs>(
      args?: Subset<T, IntegrationConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IntegrationConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationConfigAggregateArgs>(args: Subset<T, IntegrationConfigAggregateArgs>): Prisma.PrismaPromise<GetIntegrationConfigAggregateType<T>>

    /**
     * Group by IntegrationConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationConfigGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IntegrationConfig model
   */
  readonly fields: IntegrationConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IntegrationConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    syncLogs<T extends IntegrationConfig$syncLogsArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationConfig$syncLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IntegrationConfig model
   */ 
  interface IntegrationConfigFieldRefs {
    readonly id: FieldRef<"IntegrationConfig", 'Int'>
    readonly organizationId: FieldRef<"IntegrationConfig", 'Int'>
    readonly integrationType: FieldRef<"IntegrationConfig", 'String'>
    readonly credentialsEncrypted: FieldRef<"IntegrationConfig", 'String'>
    readonly config: FieldRef<"IntegrationConfig", 'Json'>
    readonly isActive: FieldRef<"IntegrationConfig", 'Boolean'>
    readonly lastSyncAt: FieldRef<"IntegrationConfig", 'DateTime'>
    readonly createdAt: FieldRef<"IntegrationConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IntegrationConfig findUnique
   */
  export type IntegrationConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationConfig to fetch.
     */
    where: IntegrationConfigWhereUniqueInput
  }

  /**
   * IntegrationConfig findUniqueOrThrow
   */
  export type IntegrationConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationConfig to fetch.
     */
    where: IntegrationConfigWhereUniqueInput
  }

  /**
   * IntegrationConfig findFirst
   */
  export type IntegrationConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationConfig to fetch.
     */
    where?: IntegrationConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationConfigs to fetch.
     */
    orderBy?: IntegrationConfigOrderByWithRelationInput | IntegrationConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationConfigs.
     */
    cursor?: IntegrationConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationConfigs.
     */
    distinct?: IntegrationConfigScalarFieldEnum | IntegrationConfigScalarFieldEnum[]
  }

  /**
   * IntegrationConfig findFirstOrThrow
   */
  export type IntegrationConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationConfig to fetch.
     */
    where?: IntegrationConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationConfigs to fetch.
     */
    orderBy?: IntegrationConfigOrderByWithRelationInput | IntegrationConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationConfigs.
     */
    cursor?: IntegrationConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationConfigs.
     */
    distinct?: IntegrationConfigScalarFieldEnum | IntegrationConfigScalarFieldEnum[]
  }

  /**
   * IntegrationConfig findMany
   */
  export type IntegrationConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationConfigs to fetch.
     */
    where?: IntegrationConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationConfigs to fetch.
     */
    orderBy?: IntegrationConfigOrderByWithRelationInput | IntegrationConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IntegrationConfigs.
     */
    cursor?: IntegrationConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationConfigs.
     */
    skip?: number
    distinct?: IntegrationConfigScalarFieldEnum | IntegrationConfigScalarFieldEnum[]
  }

  /**
   * IntegrationConfig create
   */
  export type IntegrationConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a IntegrationConfig.
     */
    data: XOR<IntegrationConfigCreateInput, IntegrationConfigUncheckedCreateInput>
  }

  /**
   * IntegrationConfig createMany
   */
  export type IntegrationConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IntegrationConfigs.
     */
    data: IntegrationConfigCreateManyInput | IntegrationConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IntegrationConfig createManyAndReturn
   */
  export type IntegrationConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IntegrationConfigs.
     */
    data: IntegrationConfigCreateManyInput | IntegrationConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntegrationConfig update
   */
  export type IntegrationConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a IntegrationConfig.
     */
    data: XOR<IntegrationConfigUpdateInput, IntegrationConfigUncheckedUpdateInput>
    /**
     * Choose, which IntegrationConfig to update.
     */
    where: IntegrationConfigWhereUniqueInput
  }

  /**
   * IntegrationConfig updateMany
   */
  export type IntegrationConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IntegrationConfigs.
     */
    data: XOR<IntegrationConfigUpdateManyMutationInput, IntegrationConfigUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationConfigs to update
     */
    where?: IntegrationConfigWhereInput
  }

  /**
   * IntegrationConfig upsert
   */
  export type IntegrationConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the IntegrationConfig to update in case it exists.
     */
    where: IntegrationConfigWhereUniqueInput
    /**
     * In case the IntegrationConfig found by the `where` argument doesn't exist, create a new IntegrationConfig with this data.
     */
    create: XOR<IntegrationConfigCreateInput, IntegrationConfigUncheckedCreateInput>
    /**
     * In case the IntegrationConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationConfigUpdateInput, IntegrationConfigUncheckedUpdateInput>
  }

  /**
   * IntegrationConfig delete
   */
  export type IntegrationConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
    /**
     * Filter which IntegrationConfig to delete.
     */
    where: IntegrationConfigWhereUniqueInput
  }

  /**
   * IntegrationConfig deleteMany
   */
  export type IntegrationConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationConfigs to delete
     */
    where?: IntegrationConfigWhereInput
  }

  /**
   * IntegrationConfig.syncLogs
   */
  export type IntegrationConfig$syncLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    where?: IntegrationSyncLogWhereInput
    orderBy?: IntegrationSyncLogOrderByWithRelationInput | IntegrationSyncLogOrderByWithRelationInput[]
    cursor?: IntegrationSyncLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationSyncLogScalarFieldEnum | IntegrationSyncLogScalarFieldEnum[]
  }

  /**
   * IntegrationConfig without action
   */
  export type IntegrationConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationConfig
     */
    select?: IntegrationConfigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationConfigInclude<ExtArgs> | null
  }


  /**
   * Model IntegrationSyncLog
   */

  export type AggregateIntegrationSyncLog = {
    _count: IntegrationSyncLogCountAggregateOutputType | null
    _avg: IntegrationSyncLogAvgAggregateOutputType | null
    _sum: IntegrationSyncLogSumAggregateOutputType | null
    _min: IntegrationSyncLogMinAggregateOutputType | null
    _max: IntegrationSyncLogMaxAggregateOutputType | null
  }

  export type IntegrationSyncLogAvgAggregateOutputType = {
    id: number | null
    integrationConfigId: number | null
    recordsProcessed: number | null
    recordsSuccess: number | null
    recordsFailed: number | null
    durationMs: number | null
  }

  export type IntegrationSyncLogSumAggregateOutputType = {
    id: bigint | null
    integrationConfigId: number | null
    recordsProcessed: number | null
    recordsSuccess: number | null
    recordsFailed: number | null
    durationMs: number | null
  }

  export type IntegrationSyncLogMinAggregateOutputType = {
    id: bigint | null
    integrationConfigId: number | null
    syncType: string | null
    recordsProcessed: number | null
    recordsSuccess: number | null
    recordsFailed: number | null
    durationMs: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type IntegrationSyncLogMaxAggregateOutputType = {
    id: bigint | null
    integrationConfigId: number | null
    syncType: string | null
    recordsProcessed: number | null
    recordsSuccess: number | null
    recordsFailed: number | null
    durationMs: number | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type IntegrationSyncLogCountAggregateOutputType = {
    id: number
    integrationConfigId: number
    syncType: number
    recordsProcessed: number
    recordsSuccess: number
    recordsFailed: number
    durationMs: number
    errorMessage: number
    createdAt: number
    _all: number
  }


  export type IntegrationSyncLogAvgAggregateInputType = {
    id?: true
    integrationConfigId?: true
    recordsProcessed?: true
    recordsSuccess?: true
    recordsFailed?: true
    durationMs?: true
  }

  export type IntegrationSyncLogSumAggregateInputType = {
    id?: true
    integrationConfigId?: true
    recordsProcessed?: true
    recordsSuccess?: true
    recordsFailed?: true
    durationMs?: true
  }

  export type IntegrationSyncLogMinAggregateInputType = {
    id?: true
    integrationConfigId?: true
    syncType?: true
    recordsProcessed?: true
    recordsSuccess?: true
    recordsFailed?: true
    durationMs?: true
    errorMessage?: true
    createdAt?: true
  }

  export type IntegrationSyncLogMaxAggregateInputType = {
    id?: true
    integrationConfigId?: true
    syncType?: true
    recordsProcessed?: true
    recordsSuccess?: true
    recordsFailed?: true
    durationMs?: true
    errorMessage?: true
    createdAt?: true
  }

  export type IntegrationSyncLogCountAggregateInputType = {
    id?: true
    integrationConfigId?: true
    syncType?: true
    recordsProcessed?: true
    recordsSuccess?: true
    recordsFailed?: true
    durationMs?: true
    errorMessage?: true
    createdAt?: true
    _all?: true
  }

  export type IntegrationSyncLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationSyncLog to aggregate.
     */
    where?: IntegrationSyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSyncLogs to fetch.
     */
    orderBy?: IntegrationSyncLogOrderByWithRelationInput | IntegrationSyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationSyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IntegrationSyncLogs
    **/
    _count?: true | IntegrationSyncLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IntegrationSyncLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IntegrationSyncLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationSyncLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationSyncLogMaxAggregateInputType
  }

  export type GetIntegrationSyncLogAggregateType<T extends IntegrationSyncLogAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegrationSyncLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegrationSyncLog[P]>
      : GetScalarType<T[P], AggregateIntegrationSyncLog[P]>
  }




  export type IntegrationSyncLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationSyncLogWhereInput
    orderBy?: IntegrationSyncLogOrderByWithAggregationInput | IntegrationSyncLogOrderByWithAggregationInput[]
    by: IntegrationSyncLogScalarFieldEnum[] | IntegrationSyncLogScalarFieldEnum
    having?: IntegrationSyncLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationSyncLogCountAggregateInputType | true
    _avg?: IntegrationSyncLogAvgAggregateInputType
    _sum?: IntegrationSyncLogSumAggregateInputType
    _min?: IntegrationSyncLogMinAggregateInputType
    _max?: IntegrationSyncLogMaxAggregateInputType
  }

  export type IntegrationSyncLogGroupByOutputType = {
    id: bigint
    integrationConfigId: number
    syncType: string | null
    recordsProcessed: number | null
    recordsSuccess: number | null
    recordsFailed: number | null
    durationMs: number | null
    errorMessage: string | null
    createdAt: Date
    _count: IntegrationSyncLogCountAggregateOutputType | null
    _avg: IntegrationSyncLogAvgAggregateOutputType | null
    _sum: IntegrationSyncLogSumAggregateOutputType | null
    _min: IntegrationSyncLogMinAggregateOutputType | null
    _max: IntegrationSyncLogMaxAggregateOutputType | null
  }

  type GetIntegrationSyncLogGroupByPayload<T extends IntegrationSyncLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationSyncLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationSyncLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationSyncLogGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationSyncLogGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationSyncLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    integrationConfigId?: boolean
    syncType?: boolean
    recordsProcessed?: boolean
    recordsSuccess?: boolean
    recordsFailed?: boolean
    durationMs?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    integrationConfig?: boolean | IntegrationConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationSyncLog"]>

  export type IntegrationSyncLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    integrationConfigId?: boolean
    syncType?: boolean
    recordsProcessed?: boolean
    recordsSuccess?: boolean
    recordsFailed?: boolean
    durationMs?: boolean
    errorMessage?: boolean
    createdAt?: boolean
    integrationConfig?: boolean | IntegrationConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integrationSyncLog"]>

  export type IntegrationSyncLogSelectScalar = {
    id?: boolean
    integrationConfigId?: boolean
    syncType?: boolean
    recordsProcessed?: boolean
    recordsSuccess?: boolean
    recordsFailed?: boolean
    durationMs?: boolean
    errorMessage?: boolean
    createdAt?: boolean
  }

  export type IntegrationSyncLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrationConfig?: boolean | IntegrationConfigDefaultArgs<ExtArgs>
  }
  export type IntegrationSyncLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integrationConfig?: boolean | IntegrationConfigDefaultArgs<ExtArgs>
  }

  export type $IntegrationSyncLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IntegrationSyncLog"
    objects: {
      integrationConfig: Prisma.$IntegrationConfigPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      integrationConfigId: number
      syncType: string | null
      recordsProcessed: number | null
      recordsSuccess: number | null
      recordsFailed: number | null
      durationMs: number | null
      errorMessage: string | null
      createdAt: Date
    }, ExtArgs["result"]["integrationSyncLog"]>
    composites: {}
  }

  type IntegrationSyncLogGetPayload<S extends boolean | null | undefined | IntegrationSyncLogDefaultArgs> = $Result.GetResult<Prisma.$IntegrationSyncLogPayload, S>

  type IntegrationSyncLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IntegrationSyncLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IntegrationSyncLogCountAggregateInputType | true
    }

  export interface IntegrationSyncLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IntegrationSyncLog'], meta: { name: 'IntegrationSyncLog' } }
    /**
     * Find zero or one IntegrationSyncLog that matches the filter.
     * @param {IntegrationSyncLogFindUniqueArgs} args - Arguments to find a IntegrationSyncLog
     * @example
     * // Get one IntegrationSyncLog
     * const integrationSyncLog = await prisma.integrationSyncLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationSyncLogFindUniqueArgs>(args: SelectSubset<T, IntegrationSyncLogFindUniqueArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IntegrationSyncLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IntegrationSyncLogFindUniqueOrThrowArgs} args - Arguments to find a IntegrationSyncLog
     * @example
     * // Get one IntegrationSyncLog
     * const integrationSyncLog = await prisma.integrationSyncLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationSyncLogFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationSyncLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IntegrationSyncLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSyncLogFindFirstArgs} args - Arguments to find a IntegrationSyncLog
     * @example
     * // Get one IntegrationSyncLog
     * const integrationSyncLog = await prisma.integrationSyncLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationSyncLogFindFirstArgs>(args?: SelectSubset<T, IntegrationSyncLogFindFirstArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IntegrationSyncLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSyncLogFindFirstOrThrowArgs} args - Arguments to find a IntegrationSyncLog
     * @example
     * // Get one IntegrationSyncLog
     * const integrationSyncLog = await prisma.integrationSyncLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationSyncLogFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationSyncLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IntegrationSyncLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSyncLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IntegrationSyncLogs
     * const integrationSyncLogs = await prisma.integrationSyncLog.findMany()
     * 
     * // Get first 10 IntegrationSyncLogs
     * const integrationSyncLogs = await prisma.integrationSyncLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationSyncLogWithIdOnly = await prisma.integrationSyncLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationSyncLogFindManyArgs>(args?: SelectSubset<T, IntegrationSyncLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IntegrationSyncLog.
     * @param {IntegrationSyncLogCreateArgs} args - Arguments to create a IntegrationSyncLog.
     * @example
     * // Create one IntegrationSyncLog
     * const IntegrationSyncLog = await prisma.integrationSyncLog.create({
     *   data: {
     *     // ... data to create a IntegrationSyncLog
     *   }
     * })
     * 
     */
    create<T extends IntegrationSyncLogCreateArgs>(args: SelectSubset<T, IntegrationSyncLogCreateArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IntegrationSyncLogs.
     * @param {IntegrationSyncLogCreateManyArgs} args - Arguments to create many IntegrationSyncLogs.
     * @example
     * // Create many IntegrationSyncLogs
     * const integrationSyncLog = await prisma.integrationSyncLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationSyncLogCreateManyArgs>(args?: SelectSubset<T, IntegrationSyncLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IntegrationSyncLogs and returns the data saved in the database.
     * @param {IntegrationSyncLogCreateManyAndReturnArgs} args - Arguments to create many IntegrationSyncLogs.
     * @example
     * // Create many IntegrationSyncLogs
     * const integrationSyncLog = await prisma.integrationSyncLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IntegrationSyncLogs and only return the `id`
     * const integrationSyncLogWithIdOnly = await prisma.integrationSyncLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationSyncLogCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationSyncLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IntegrationSyncLog.
     * @param {IntegrationSyncLogDeleteArgs} args - Arguments to delete one IntegrationSyncLog.
     * @example
     * // Delete one IntegrationSyncLog
     * const IntegrationSyncLog = await prisma.integrationSyncLog.delete({
     *   where: {
     *     // ... filter to delete one IntegrationSyncLog
     *   }
     * })
     * 
     */
    delete<T extends IntegrationSyncLogDeleteArgs>(args: SelectSubset<T, IntegrationSyncLogDeleteArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IntegrationSyncLog.
     * @param {IntegrationSyncLogUpdateArgs} args - Arguments to update one IntegrationSyncLog.
     * @example
     * // Update one IntegrationSyncLog
     * const integrationSyncLog = await prisma.integrationSyncLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationSyncLogUpdateArgs>(args: SelectSubset<T, IntegrationSyncLogUpdateArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IntegrationSyncLogs.
     * @param {IntegrationSyncLogDeleteManyArgs} args - Arguments to filter IntegrationSyncLogs to delete.
     * @example
     * // Delete a few IntegrationSyncLogs
     * const { count } = await prisma.integrationSyncLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationSyncLogDeleteManyArgs>(args?: SelectSubset<T, IntegrationSyncLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntegrationSyncLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSyncLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IntegrationSyncLogs
     * const integrationSyncLog = await prisma.integrationSyncLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationSyncLogUpdateManyArgs>(args: SelectSubset<T, IntegrationSyncLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IntegrationSyncLog.
     * @param {IntegrationSyncLogUpsertArgs} args - Arguments to update or create a IntegrationSyncLog.
     * @example
     * // Update or create a IntegrationSyncLog
     * const integrationSyncLog = await prisma.integrationSyncLog.upsert({
     *   create: {
     *     // ... data to create a IntegrationSyncLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IntegrationSyncLog we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationSyncLogUpsertArgs>(args: SelectSubset<T, IntegrationSyncLogUpsertArgs<ExtArgs>>): Prisma__IntegrationSyncLogClient<$Result.GetResult<Prisma.$IntegrationSyncLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IntegrationSyncLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSyncLogCountArgs} args - Arguments to filter IntegrationSyncLogs to count.
     * @example
     * // Count the number of IntegrationSyncLogs
     * const count = await prisma.integrationSyncLog.count({
     *   where: {
     *     // ... the filter for the IntegrationSyncLogs we want to count
     *   }
     * })
    **/
    count<T extends IntegrationSyncLogCountArgs>(
      args?: Subset<T, IntegrationSyncLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationSyncLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IntegrationSyncLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSyncLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationSyncLogAggregateArgs>(args: Subset<T, IntegrationSyncLogAggregateArgs>): Prisma.PrismaPromise<GetIntegrationSyncLogAggregateType<T>>

    /**
     * Group by IntegrationSyncLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationSyncLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationSyncLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationSyncLogGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationSyncLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationSyncLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationSyncLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IntegrationSyncLog model
   */
  readonly fields: IntegrationSyncLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IntegrationSyncLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationSyncLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    integrationConfig<T extends IntegrationConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationConfigDefaultArgs<ExtArgs>>): Prisma__IntegrationConfigClient<$Result.GetResult<Prisma.$IntegrationConfigPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IntegrationSyncLog model
   */ 
  interface IntegrationSyncLogFieldRefs {
    readonly id: FieldRef<"IntegrationSyncLog", 'BigInt'>
    readonly integrationConfigId: FieldRef<"IntegrationSyncLog", 'Int'>
    readonly syncType: FieldRef<"IntegrationSyncLog", 'String'>
    readonly recordsProcessed: FieldRef<"IntegrationSyncLog", 'Int'>
    readonly recordsSuccess: FieldRef<"IntegrationSyncLog", 'Int'>
    readonly recordsFailed: FieldRef<"IntegrationSyncLog", 'Int'>
    readonly durationMs: FieldRef<"IntegrationSyncLog", 'Int'>
    readonly errorMessage: FieldRef<"IntegrationSyncLog", 'String'>
    readonly createdAt: FieldRef<"IntegrationSyncLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IntegrationSyncLog findUnique
   */
  export type IntegrationSyncLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSyncLog to fetch.
     */
    where: IntegrationSyncLogWhereUniqueInput
  }

  /**
   * IntegrationSyncLog findUniqueOrThrow
   */
  export type IntegrationSyncLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSyncLog to fetch.
     */
    where: IntegrationSyncLogWhereUniqueInput
  }

  /**
   * IntegrationSyncLog findFirst
   */
  export type IntegrationSyncLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSyncLog to fetch.
     */
    where?: IntegrationSyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSyncLogs to fetch.
     */
    orderBy?: IntegrationSyncLogOrderByWithRelationInput | IntegrationSyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationSyncLogs.
     */
    cursor?: IntegrationSyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationSyncLogs.
     */
    distinct?: IntegrationSyncLogScalarFieldEnum | IntegrationSyncLogScalarFieldEnum[]
  }

  /**
   * IntegrationSyncLog findFirstOrThrow
   */
  export type IntegrationSyncLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSyncLog to fetch.
     */
    where?: IntegrationSyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSyncLogs to fetch.
     */
    orderBy?: IntegrationSyncLogOrderByWithRelationInput | IntegrationSyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntegrationSyncLogs.
     */
    cursor?: IntegrationSyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSyncLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntegrationSyncLogs.
     */
    distinct?: IntegrationSyncLogScalarFieldEnum | IntegrationSyncLogScalarFieldEnum[]
  }

  /**
   * IntegrationSyncLog findMany
   */
  export type IntegrationSyncLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * Filter, which IntegrationSyncLogs to fetch.
     */
    where?: IntegrationSyncLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntegrationSyncLogs to fetch.
     */
    orderBy?: IntegrationSyncLogOrderByWithRelationInput | IntegrationSyncLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IntegrationSyncLogs.
     */
    cursor?: IntegrationSyncLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntegrationSyncLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntegrationSyncLogs.
     */
    skip?: number
    distinct?: IntegrationSyncLogScalarFieldEnum | IntegrationSyncLogScalarFieldEnum[]
  }

  /**
   * IntegrationSyncLog create
   */
  export type IntegrationSyncLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * The data needed to create a IntegrationSyncLog.
     */
    data: XOR<IntegrationSyncLogCreateInput, IntegrationSyncLogUncheckedCreateInput>
  }

  /**
   * IntegrationSyncLog createMany
   */
  export type IntegrationSyncLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IntegrationSyncLogs.
     */
    data: IntegrationSyncLogCreateManyInput | IntegrationSyncLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IntegrationSyncLog createManyAndReturn
   */
  export type IntegrationSyncLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IntegrationSyncLogs.
     */
    data: IntegrationSyncLogCreateManyInput | IntegrationSyncLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntegrationSyncLog update
   */
  export type IntegrationSyncLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * The data needed to update a IntegrationSyncLog.
     */
    data: XOR<IntegrationSyncLogUpdateInput, IntegrationSyncLogUncheckedUpdateInput>
    /**
     * Choose, which IntegrationSyncLog to update.
     */
    where: IntegrationSyncLogWhereUniqueInput
  }

  /**
   * IntegrationSyncLog updateMany
   */
  export type IntegrationSyncLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IntegrationSyncLogs.
     */
    data: XOR<IntegrationSyncLogUpdateManyMutationInput, IntegrationSyncLogUncheckedUpdateManyInput>
    /**
     * Filter which IntegrationSyncLogs to update
     */
    where?: IntegrationSyncLogWhereInput
  }

  /**
   * IntegrationSyncLog upsert
   */
  export type IntegrationSyncLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * The filter to search for the IntegrationSyncLog to update in case it exists.
     */
    where: IntegrationSyncLogWhereUniqueInput
    /**
     * In case the IntegrationSyncLog found by the `where` argument doesn't exist, create a new IntegrationSyncLog with this data.
     */
    create: XOR<IntegrationSyncLogCreateInput, IntegrationSyncLogUncheckedCreateInput>
    /**
     * In case the IntegrationSyncLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationSyncLogUpdateInput, IntegrationSyncLogUncheckedUpdateInput>
  }

  /**
   * IntegrationSyncLog delete
   */
  export type IntegrationSyncLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
    /**
     * Filter which IntegrationSyncLog to delete.
     */
    where: IntegrationSyncLogWhereUniqueInput
  }

  /**
   * IntegrationSyncLog deleteMany
   */
  export type IntegrationSyncLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntegrationSyncLogs to delete
     */
    where?: IntegrationSyncLogWhereInput
  }

  /**
   * IntegrationSyncLog without action
   */
  export type IntegrationSyncLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationSyncLog
     */
    select?: IntegrationSyncLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationSyncLogInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: bigint | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: bigint | null
    userId: number | null
    type: string | null
    title: string | null
    message: string | null
    priority: string | null
    readAt: Date | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: bigint | null
    userId: number | null
    type: string | null
    title: string | null
    message: string | null
    priority: string | null
    readAt: Date | null
    actionUrl: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    channels: number
    priority: number
    readAt: number
    actionUrl: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    readAt?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    readAt?: true
    actionUrl?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    channels?: true
    priority?: true
    readAt?: true
    actionUrl?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: bigint
    userId: number
    type: string
    title: string
    message: string | null
    channels: string[]
    priority: string
    readAt: Date | null
    actionUrl: string | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    channels?: boolean
    priority?: boolean
    readAt?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    channels?: boolean
    priority?: boolean
    readAt?: boolean
    actionUrl?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    channels?: boolean
    priority?: boolean
    readAt?: boolean
    actionUrl?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      userId: number
      type: string
      title: string
      message: string | null
      channels: string[]
      priority: string
      readAt: Date | null
      actionUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'BigInt'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly channels: FieldRef<"Notification", 'String[]'>
    readonly priority: FieldRef<"Notification", 'String'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly actionUrl: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    plan: 'plan',
    industry: 'industry',
    employeeCount: 'employeeCount',
    annualRevenueEur: 'annualRevenueEur',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    role: 'role',
    department: 'department',
    hourlyRateEur: 'hourlyRateEur',
    mfaEnabled: 'mfaEnabled',
    mfaSecret: 'mfaSecret',
    emailVerified: 'emailVerified',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    refreshToken: 'refreshToken',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    organizationId: 'organizationId',
    neuraId: 'neuraId',
    title: 'title',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    chatId: 'chatId',
    role: 'role',
    content: 'content',
    model: 'model',
    tokensInput: 'tokensInput',
    tokensOutput: 'tokensOutput',
    tokensReasoning: 'tokensReasoning',
    costEur: 'costEur',
    latencyMs: 'latencyMs',
    functionCalls: 'functionCalls',
    createdAt: 'createdAt'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const ChatFeedbackScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    userId: 'userId',
    rating: 'rating',
    feedbackText: 'feedbackText',
    createdAt: 'createdAt'
  };

  export type ChatFeedbackScalarFieldEnum = (typeof ChatFeedbackScalarFieldEnum)[keyof typeof ChatFeedbackScalarFieldEnum]


  export const AgentDefinitionScalarFieldEnum: {
    id: 'id',
    neuraId: 'neuraId',
    name: 'name',
    description: 'description',
    category: 'category',
    difficulty: 'difficulty',
    estimatedTimeSavedHours: 'estimatedTimeSavedHours',
    estimatedRoiPercentage: 'estimatedRoiPercentage',
    tags: 'tags',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type AgentDefinitionScalarFieldEnum = (typeof AgentDefinitionScalarFieldEnum)[keyof typeof AgentDefinitionScalarFieldEnum]


  export const AgentConnectionScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    agentId: 'agentId',
    provider: 'provider',
    webhookUrl: 'webhookUrl',
    apiKeyEncrypted: 'apiKeyEncrypted',
    config: 'config',
    isActive: 'isActive',
    lastTestedAt: 'lastTestedAt',
    lastTestSuccess: 'lastTestSuccess',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgentConnectionScalarFieldEnum = (typeof AgentConnectionScalarFieldEnum)[keyof typeof AgentConnectionScalarFieldEnum]


  export const AgentExecutionScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    agentId: 'agentId',
    neuraId: 'neuraId',
    chatMessageId: 'chatMessageId',
    proposalId: 'proposalId',
    parameters: 'parameters',
    result: 'result',
    status: 'status',
    errorMessage: 'errorMessage',
    durationMs: 'durationMs',
    retryCount: 'retryCount',
    idempotencyKey: 'idempotencyKey',
    createdAt: 'createdAt',
    startedAt: 'startedAt',
    completedAt: 'completedAt'
  };

  export type AgentExecutionScalarFieldEnum = (typeof AgentExecutionScalarFieldEnum)[keyof typeof AgentExecutionScalarFieldEnum]


  export const ProposalScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    createdByUserId: 'createdByUserId',
    neuraId: 'neuraId',
    action: 'action',
    description: 'description',
    parameters: 'parameters',
    impactAnalysis: 'impactAnalysis',
    requiredApprovals: 'requiredApprovals',
    rollbackPlan: 'rollbackPlan',
    status: 'status',
    executedAt: 'executedAt',
    executionResult: 'executionResult',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deadlineAt: 'deadlineAt'
  };

  export type ProposalScalarFieldEnum = (typeof ProposalScalarFieldEnum)[keyof typeof ProposalScalarFieldEnum]


  export const ApprovalScalarFieldEnum: {
    id: 'id',
    proposalId: 'proposalId',
    userId: 'userId',
    roleRequired: 'roleRequired',
    approved: 'approved',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ApprovalScalarFieldEnum = (typeof ApprovalScalarFieldEnum)[keyof typeof ApprovalScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    timestamp: 'timestamp',
    organizationId: 'organizationId',
    userId: 'userId',
    neuraId: 'neuraId',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    beforeState: 'beforeState',
    afterState: 'afterState',
    proposalId: 'proposalId',
    approvedBy: 'approvedBy',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    correlationId: 'correlationId',
    hash: 'hash',
    previousHash: 'previousHash',
    metadata: 'metadata'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const CostTrackingScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    neuraId: 'neuraId',
    agentId: 'agentId',
    resourceType: 'resourceType',
    resourceName: 'resourceName',
    tokensInput: 'tokensInput',
    tokensOutput: 'tokensOutput',
    tokensReasoning: 'tokensReasoning',
    costEur: 'costEur',
    costUsd: 'costUsd',
    model: 'model',
    timestamp: 'timestamp'
  };

  export type CostTrackingScalarFieldEnum = (typeof CostTrackingScalarFieldEnum)[keyof typeof CostTrackingScalarFieldEnum]


  export const NeuraMetricDailyScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    neuraId: 'neuraId',
    date: 'date',
    conversationsCount: 'conversationsCount',
    messagesCount: 'messagesCount',
    agentExecutionsCount: 'agentExecutionsCount',
    timeSavedHours: 'timeSavedHours',
    valueGeneratedEur: 'valueGeneratedEur',
    costConsumedEur: 'costConsumedEur',
    roiPercentage: 'roiPercentage',
    avgResponseTimeMs: 'avgResponseTimeMs',
    errorCount: 'errorCount',
    userSatisfactionAvg: 'userSatisfactionAvg',
    createdAt: 'createdAt'
  };

  export type NeuraMetricDailyScalarFieldEnum = (typeof NeuraMetricDailyScalarFieldEnum)[keyof typeof NeuraMetricDailyScalarFieldEnum]


  export const UserConsentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    consentType: 'consentType',
    granted: 'granted',
    ipAddress: 'ipAddress',
    grantedAt: 'grantedAt',
    revokedAt: 'revokedAt'
  };

  export type UserConsentScalarFieldEnum = (typeof UserConsentScalarFieldEnum)[keyof typeof UserConsentScalarFieldEnum]


  export const PromptVersionScalarFieldEnum: {
    id: 'id',
    neuraId: 'neuraId',
    version: 'version',
    systemPrompt: 'systemPrompt',
    contextTemplate: 'contextTemplate',
    fewShotExamples: 'fewShotExamples',
    tools: 'tools',
    model: 'model',
    temperature: 'temperature',
    maxTokens: 'maxTokens',
    isActive: 'isActive',
    performanceScore: 'performanceScore',
    createdById: 'createdById',
    createdAt: 'createdAt'
  };

  export type PromptVersionScalarFieldEnum = (typeof PromptVersionScalarFieldEnum)[keyof typeof PromptVersionScalarFieldEnum]


  export const IntegrationConfigScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    integrationType: 'integrationType',
    credentialsEncrypted: 'credentialsEncrypted',
    config: 'config',
    isActive: 'isActive',
    lastSyncAt: 'lastSyncAt',
    createdAt: 'createdAt'
  };

  export type IntegrationConfigScalarFieldEnum = (typeof IntegrationConfigScalarFieldEnum)[keyof typeof IntegrationConfigScalarFieldEnum]


  export const IntegrationSyncLogScalarFieldEnum: {
    id: 'id',
    integrationConfigId: 'integrationConfigId',
    syncType: 'syncType',
    recordsProcessed: 'recordsProcessed',
    recordsSuccess: 'recordsSuccess',
    recordsFailed: 'recordsFailed',
    durationMs: 'durationMs',
    errorMessage: 'errorMessage',
    createdAt: 'createdAt'
  };

  export type IntegrationSyncLogScalarFieldEnum = (typeof IntegrationSyncLogScalarFieldEnum)[keyof typeof IntegrationSyncLogScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    channels: 'channels',
    priority: 'priority',
    readAt: 'readAt',
    actionUrl: 'actionUrl',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const OrganizationOrderByRelevanceFieldEnum: {
    name: 'name',
    slug: 'slug',
    plan: 'plan',
    industry: 'industry'
  };

  export type OrganizationOrderByRelevanceFieldEnum = (typeof OrganizationOrderByRelevanceFieldEnum)[keyof typeof OrganizationOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    email: 'email',
    passwordHash: 'passwordHash',
    name: 'name',
    role: 'role',
    department: 'department',
    mfaSecret: 'mfaSecret'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    refreshToken: 'refreshToken',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const ChatOrderByRelevanceFieldEnum: {
    neuraId: 'neuraId',
    title: 'title'
  };

  export type ChatOrderByRelevanceFieldEnum = (typeof ChatOrderByRelevanceFieldEnum)[keyof typeof ChatOrderByRelevanceFieldEnum]


  export const ChatMessageOrderByRelevanceFieldEnum: {
    role: 'role',
    content: 'content',
    model: 'model'
  };

  export type ChatMessageOrderByRelevanceFieldEnum = (typeof ChatMessageOrderByRelevanceFieldEnum)[keyof typeof ChatMessageOrderByRelevanceFieldEnum]


  export const ChatFeedbackOrderByRelevanceFieldEnum: {
    feedbackText: 'feedbackText'
  };

  export type ChatFeedbackOrderByRelevanceFieldEnum = (typeof ChatFeedbackOrderByRelevanceFieldEnum)[keyof typeof ChatFeedbackOrderByRelevanceFieldEnum]


  export const AgentDefinitionOrderByRelevanceFieldEnum: {
    id: 'id',
    neuraId: 'neuraId',
    name: 'name',
    description: 'description',
    category: 'category',
    difficulty: 'difficulty',
    tags: 'tags'
  };

  export type AgentDefinitionOrderByRelevanceFieldEnum = (typeof AgentDefinitionOrderByRelevanceFieldEnum)[keyof typeof AgentDefinitionOrderByRelevanceFieldEnum]


  export const AgentConnectionOrderByRelevanceFieldEnum: {
    agentId: 'agentId',
    provider: 'provider',
    webhookUrl: 'webhookUrl',
    apiKeyEncrypted: 'apiKeyEncrypted'
  };

  export type AgentConnectionOrderByRelevanceFieldEnum = (typeof AgentConnectionOrderByRelevanceFieldEnum)[keyof typeof AgentConnectionOrderByRelevanceFieldEnum]


  export const AgentExecutionOrderByRelevanceFieldEnum: {
    agentId: 'agentId',
    neuraId: 'neuraId',
    status: 'status',
    errorMessage: 'errorMessage',
    idempotencyKey: 'idempotencyKey'
  };

  export type AgentExecutionOrderByRelevanceFieldEnum = (typeof AgentExecutionOrderByRelevanceFieldEnum)[keyof typeof AgentExecutionOrderByRelevanceFieldEnum]


  export const ProposalOrderByRelevanceFieldEnum: {
    neuraId: 'neuraId',
    action: 'action',
    description: 'description',
    requiredApprovals: 'requiredApprovals',
    rollbackPlan: 'rollbackPlan',
    status: 'status'
  };

  export type ProposalOrderByRelevanceFieldEnum = (typeof ProposalOrderByRelevanceFieldEnum)[keyof typeof ProposalOrderByRelevanceFieldEnum]


  export const ApprovalOrderByRelevanceFieldEnum: {
    roleRequired: 'roleRequired',
    comment: 'comment'
  };

  export type ApprovalOrderByRelevanceFieldEnum = (typeof ApprovalOrderByRelevanceFieldEnum)[keyof typeof ApprovalOrderByRelevanceFieldEnum]


  export const AuditLogOrderByRelevanceFieldEnum: {
    neuraId: 'neuraId',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    correlationId: 'correlationId',
    hash: 'hash',
    previousHash: 'previousHash'
  };

  export type AuditLogOrderByRelevanceFieldEnum = (typeof AuditLogOrderByRelevanceFieldEnum)[keyof typeof AuditLogOrderByRelevanceFieldEnum]


  export const CostTrackingOrderByRelevanceFieldEnum: {
    neuraId: 'neuraId',
    agentId: 'agentId',
    resourceType: 'resourceType',
    resourceName: 'resourceName',
    model: 'model'
  };

  export type CostTrackingOrderByRelevanceFieldEnum = (typeof CostTrackingOrderByRelevanceFieldEnum)[keyof typeof CostTrackingOrderByRelevanceFieldEnum]


  export const NeuraMetricDailyOrderByRelevanceFieldEnum: {
    neuraId: 'neuraId'
  };

  export type NeuraMetricDailyOrderByRelevanceFieldEnum = (typeof NeuraMetricDailyOrderByRelevanceFieldEnum)[keyof typeof NeuraMetricDailyOrderByRelevanceFieldEnum]


  export const UserConsentOrderByRelevanceFieldEnum: {
    consentType: 'consentType',
    ipAddress: 'ipAddress'
  };

  export type UserConsentOrderByRelevanceFieldEnum = (typeof UserConsentOrderByRelevanceFieldEnum)[keyof typeof UserConsentOrderByRelevanceFieldEnum]


  export const PromptVersionOrderByRelevanceFieldEnum: {
    neuraId: 'neuraId',
    systemPrompt: 'systemPrompt',
    contextTemplate: 'contextTemplate',
    model: 'model'
  };

  export type PromptVersionOrderByRelevanceFieldEnum = (typeof PromptVersionOrderByRelevanceFieldEnum)[keyof typeof PromptVersionOrderByRelevanceFieldEnum]


  export const IntegrationConfigOrderByRelevanceFieldEnum: {
    integrationType: 'integrationType',
    credentialsEncrypted: 'credentialsEncrypted'
  };

  export type IntegrationConfigOrderByRelevanceFieldEnum = (typeof IntegrationConfigOrderByRelevanceFieldEnum)[keyof typeof IntegrationConfigOrderByRelevanceFieldEnum]


  export const IntegrationSyncLogOrderByRelevanceFieldEnum: {
    syncType: 'syncType',
    errorMessage: 'errorMessage'
  };

  export type IntegrationSyncLogOrderByRelevanceFieldEnum = (typeof IntegrationSyncLogOrderByRelevanceFieldEnum)[keyof typeof IntegrationSyncLogOrderByRelevanceFieldEnum]


  export const NotificationOrderByRelevanceFieldEnum: {
    type: 'type',
    title: 'title',
    message: 'message',
    channels: 'channels',
    priority: 'priority',
    actionUrl: 'actionUrl'
  };

  export type NotificationOrderByRelevanceFieldEnum = (typeof NotificationOrderByRelevanceFieldEnum)[keyof typeof NotificationOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: IntFilter<"Organization"> | number
    name?: StringFilter<"Organization"> | string
    slug?: StringFilter<"Organization"> | string
    plan?: StringFilter<"Organization"> | string
    industry?: StringNullableFilter<"Organization"> | string | null
    employeeCount?: IntNullableFilter<"Organization"> | number | null
    annualRevenueEur?: DecimalNullableFilter<"Organization"> | Decimal | DecimalJsLike | number | string | null
    settings?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    users?: UserListRelationFilter
    chats?: ChatListRelationFilter
    agentConnections?: AgentConnectionListRelationFilter
    agentExecutions?: AgentExecutionListRelationFilter
    proposals?: ProposalListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    costTracking?: CostTrackingListRelationFilter
    neuraMetrics?: NeuraMetricDailyListRelationFilter
    integrationConfigs?: IntegrationConfigListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    plan?: SortOrder
    industry?: SortOrderInput | SortOrder
    employeeCount?: SortOrderInput | SortOrder
    annualRevenueEur?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    chats?: ChatOrderByRelationAggregateInput
    agentConnections?: AgentConnectionOrderByRelationAggregateInput
    agentExecutions?: AgentExecutionOrderByRelationAggregateInput
    proposals?: ProposalOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    costTracking?: CostTrackingOrderByRelationAggregateInput
    neuraMetrics?: NeuraMetricDailyOrderByRelationAggregateInput
    integrationConfigs?: IntegrationConfigOrderByRelationAggregateInput
    _relevance?: OrganizationOrderByRelevanceInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    plan?: StringFilter<"Organization"> | string
    industry?: StringNullableFilter<"Organization"> | string | null
    employeeCount?: IntNullableFilter<"Organization"> | number | null
    annualRevenueEur?: DecimalNullableFilter<"Organization"> | Decimal | DecimalJsLike | number | string | null
    settings?: JsonFilter<"Organization">
    createdAt?: DateTimeFilter<"Organization"> | Date | string
    updatedAt?: DateTimeFilter<"Organization"> | Date | string
    users?: UserListRelationFilter
    chats?: ChatListRelationFilter
    agentConnections?: AgentConnectionListRelationFilter
    agentExecutions?: AgentExecutionListRelationFilter
    proposals?: ProposalListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    costTracking?: CostTrackingListRelationFilter
    neuraMetrics?: NeuraMetricDailyListRelationFilter
    integrationConfigs?: IntegrationConfigListRelationFilter
  }, "id" | "slug">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    plan?: SortOrder
    industry?: SortOrderInput | SortOrder
    employeeCount?: SortOrderInput | SortOrder
    annualRevenueEur?: SortOrderInput | SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Organization"> | number
    name?: StringWithAggregatesFilter<"Organization"> | string
    slug?: StringWithAggregatesFilter<"Organization"> | string
    plan?: StringWithAggregatesFilter<"Organization"> | string
    industry?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    employeeCount?: IntNullableWithAggregatesFilter<"Organization"> | number | null
    annualRevenueEur?: DecimalNullableWithAggregatesFilter<"Organization"> | Decimal | DecimalJsLike | number | string | null
    settings?: JsonWithAggregatesFilter<"Organization">
    createdAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Organization"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    organizationId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    department?: StringNullableFilter<"User"> | string | null
    hourlyRateEur?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    sessions?: SessionListRelationFilter
    chats?: ChatListRelationFilter
    chatFeedback?: ChatFeedbackListRelationFilter
    agentConnections?: AgentConnectionListRelationFilter
    agentExecutions?: AgentExecutionListRelationFilter
    proposalsCreated?: ProposalListRelationFilter
    approvals?: ApprovalListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
    consents?: UserConsentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    department?: SortOrderInput | SortOrder
    hourlyRateEur?: SortOrderInput | SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    sessions?: SessionOrderByRelationAggregateInput
    chats?: ChatOrderByRelationAggregateInput
    chatFeedback?: ChatFeedbackOrderByRelationAggregateInput
    agentConnections?: AgentConnectionOrderByRelationAggregateInput
    agentExecutions?: AgentExecutionOrderByRelationAggregateInput
    proposalsCreated?: ProposalOrderByRelationAggregateInput
    approvals?: ApprovalOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    consents?: UserConsentOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    organizationId_email?: UserOrganizationIdEmailCompoundUniqueInput
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    organizationId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    department?: StringNullableFilter<"User"> | string | null
    hourlyRateEur?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    sessions?: SessionListRelationFilter
    chats?: ChatListRelationFilter
    chatFeedback?: ChatFeedbackListRelationFilter
    agentConnections?: AgentConnectionListRelationFilter
    agentExecutions?: AgentExecutionListRelationFilter
    proposalsCreated?: ProposalListRelationFilter
    approvals?: ApprovalListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    notifications?: NotificationListRelationFilter
    consents?: UserConsentListRelationFilter
  }, "id" | "organizationId_email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    department?: SortOrderInput | SortOrder
    hourlyRateEur?: SortOrderInput | SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    organizationId?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    department?: StringNullableWithAggregatesFilter<"User"> | string | null
    hourlyRateEur?: DecimalNullableWithAggregatesFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    mfaSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: UuidFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    refreshToken?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    refreshToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: IntFilter<"Session"> | number
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "refreshToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Session"> | string
    userId?: IntWithAggregatesFilter<"Session"> | number
    refreshToken?: StringWithAggregatesFilter<"Session"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type ChatWhereInput = {
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    id?: BigIntFilter<"Chat"> | bigint | number
    userId?: IntFilter<"Chat"> | number
    organizationId?: IntFilter<"Chat"> | number
    neuraId?: StringFilter<"Chat"> | string
    title?: StringNullableFilter<"Chat"> | string | null
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    messages?: ChatMessageListRelationFilter
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    title?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    messages?: ChatMessageOrderByRelationAggregateInput
    _relevance?: ChatOrderByRelevanceInput
  }

  export type ChatWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ChatWhereInput | ChatWhereInput[]
    OR?: ChatWhereInput[]
    NOT?: ChatWhereInput | ChatWhereInput[]
    userId?: IntFilter<"Chat"> | number
    organizationId?: IntFilter<"Chat"> | number
    neuraId?: StringFilter<"Chat"> | string
    title?: StringNullableFilter<"Chat"> | string | null
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    messages?: ChatMessageListRelationFilter
  }, "id">

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    title?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _avg?: ChatAvgOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
    _sum?: ChatSumOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    OR?: ChatScalarWhereWithAggregatesInput[]
    NOT?: ChatScalarWhereWithAggregatesInput | ChatScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Chat"> | bigint | number
    userId?: IntWithAggregatesFilter<"Chat"> | number
    organizationId?: IntWithAggregatesFilter<"Chat"> | number
    neuraId?: StringWithAggregatesFilter<"Chat"> | string
    title?: StringNullableWithAggregatesFilter<"Chat"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Chat"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chat"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: BigIntFilter<"ChatMessage"> | bigint | number
    chatId?: BigIntFilter<"ChatMessage"> | bigint | number
    role?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    model?: StringNullableFilter<"ChatMessage"> | string | null
    tokensInput?: IntNullableFilter<"ChatMessage"> | number | null
    tokensOutput?: IntNullableFilter<"ChatMessage"> | number | null
    tokensReasoning?: IntNullableFilter<"ChatMessage"> | number | null
    costEur?: DecimalNullableFilter<"ChatMessage"> | Decimal | DecimalJsLike | number | string | null
    latencyMs?: IntNullableFilter<"ChatMessage"> | number | null
    functionCalls?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
    feedback?: ChatFeedbackListRelationFilter
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    chatId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    model?: SortOrderInput | SortOrder
    tokensInput?: SortOrderInput | SortOrder
    tokensOutput?: SortOrderInput | SortOrder
    tokensReasoning?: SortOrderInput | SortOrder
    costEur?: SortOrderInput | SortOrder
    latencyMs?: SortOrderInput | SortOrder
    functionCalls?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    chat?: ChatOrderByWithRelationInput
    feedback?: ChatFeedbackOrderByRelationAggregateInput
    _relevance?: ChatMessageOrderByRelevanceInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    chatId?: BigIntFilter<"ChatMessage"> | bigint | number
    role?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    model?: StringNullableFilter<"ChatMessage"> | string | null
    tokensInput?: IntNullableFilter<"ChatMessage"> | number | null
    tokensOutput?: IntNullableFilter<"ChatMessage"> | number | null
    tokensReasoning?: IntNullableFilter<"ChatMessage"> | number | null
    costEur?: DecimalNullableFilter<"ChatMessage"> | Decimal | DecimalJsLike | number | string | null
    latencyMs?: IntNullableFilter<"ChatMessage"> | number | null
    functionCalls?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
    feedback?: ChatFeedbackListRelationFilter
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    chatId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    model?: SortOrderInput | SortOrder
    tokensInput?: SortOrderInput | SortOrder
    tokensOutput?: SortOrderInput | SortOrder
    tokensReasoning?: SortOrderInput | SortOrder
    costEur?: SortOrderInput | SortOrder
    latencyMs?: SortOrderInput | SortOrder
    functionCalls?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _avg?: ChatMessageAvgOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
    _sum?: ChatMessageSumOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ChatMessage"> | bigint | number
    chatId?: BigIntWithAggregatesFilter<"ChatMessage"> | bigint | number
    role?: StringWithAggregatesFilter<"ChatMessage"> | string
    content?: StringWithAggregatesFilter<"ChatMessage"> | string
    model?: StringNullableWithAggregatesFilter<"ChatMessage"> | string | null
    tokensInput?: IntNullableWithAggregatesFilter<"ChatMessage"> | number | null
    tokensOutput?: IntNullableWithAggregatesFilter<"ChatMessage"> | number | null
    tokensReasoning?: IntNullableWithAggregatesFilter<"ChatMessage"> | number | null
    costEur?: DecimalNullableWithAggregatesFilter<"ChatMessage"> | Decimal | DecimalJsLike | number | string | null
    latencyMs?: IntNullableWithAggregatesFilter<"ChatMessage"> | number | null
    functionCalls?: JsonNullableWithAggregatesFilter<"ChatMessage">
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
  }

  export type ChatFeedbackWhereInput = {
    AND?: ChatFeedbackWhereInput | ChatFeedbackWhereInput[]
    OR?: ChatFeedbackWhereInput[]
    NOT?: ChatFeedbackWhereInput | ChatFeedbackWhereInput[]
    id?: IntFilter<"ChatFeedback"> | number
    messageId?: BigIntFilter<"ChatFeedback"> | bigint | number
    userId?: IntFilter<"ChatFeedback"> | number
    rating?: IntNullableFilter<"ChatFeedback"> | number | null
    feedbackText?: StringNullableFilter<"ChatFeedback"> | string | null
    createdAt?: DateTimeFilter<"ChatFeedback"> | Date | string
    message?: XOR<ChatMessageRelationFilter, ChatMessageWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChatFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    rating?: SortOrderInput | SortOrder
    feedbackText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    message?: ChatMessageOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: ChatFeedbackOrderByRelevanceInput
  }

  export type ChatFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatFeedbackWhereInput | ChatFeedbackWhereInput[]
    OR?: ChatFeedbackWhereInput[]
    NOT?: ChatFeedbackWhereInput | ChatFeedbackWhereInput[]
    messageId?: BigIntFilter<"ChatFeedback"> | bigint | number
    userId?: IntFilter<"ChatFeedback"> | number
    rating?: IntNullableFilter<"ChatFeedback"> | number | null
    feedbackText?: StringNullableFilter<"ChatFeedback"> | string | null
    createdAt?: DateTimeFilter<"ChatFeedback"> | Date | string
    message?: XOR<ChatMessageRelationFilter, ChatMessageWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ChatFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    rating?: SortOrderInput | SortOrder
    feedbackText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatFeedbackCountOrderByAggregateInput
    _avg?: ChatFeedbackAvgOrderByAggregateInput
    _max?: ChatFeedbackMaxOrderByAggregateInput
    _min?: ChatFeedbackMinOrderByAggregateInput
    _sum?: ChatFeedbackSumOrderByAggregateInput
  }

  export type ChatFeedbackScalarWhereWithAggregatesInput = {
    AND?: ChatFeedbackScalarWhereWithAggregatesInput | ChatFeedbackScalarWhereWithAggregatesInput[]
    OR?: ChatFeedbackScalarWhereWithAggregatesInput[]
    NOT?: ChatFeedbackScalarWhereWithAggregatesInput | ChatFeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatFeedback"> | number
    messageId?: BigIntWithAggregatesFilter<"ChatFeedback"> | bigint | number
    userId?: IntWithAggregatesFilter<"ChatFeedback"> | number
    rating?: IntNullableWithAggregatesFilter<"ChatFeedback"> | number | null
    feedbackText?: StringNullableWithAggregatesFilter<"ChatFeedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatFeedback"> | Date | string
  }

  export type AgentDefinitionWhereInput = {
    AND?: AgentDefinitionWhereInput | AgentDefinitionWhereInput[]
    OR?: AgentDefinitionWhereInput[]
    NOT?: AgentDefinitionWhereInput | AgentDefinitionWhereInput[]
    id?: StringFilter<"AgentDefinition"> | string
    neuraId?: StringFilter<"AgentDefinition"> | string
    name?: StringFilter<"AgentDefinition"> | string
    description?: StringNullableFilter<"AgentDefinition"> | string | null
    category?: StringNullableFilter<"AgentDefinition"> | string | null
    difficulty?: StringNullableFilter<"AgentDefinition"> | string | null
    estimatedTimeSavedHours?: DecimalNullableFilter<"AgentDefinition"> | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: DecimalNullableFilter<"AgentDefinition"> | Decimal | DecimalJsLike | number | string | null
    tags?: StringNullableListFilter<"AgentDefinition">
    metadata?: JsonNullableFilter<"AgentDefinition">
    createdAt?: DateTimeFilter<"AgentDefinition"> | Date | string
    connections?: AgentConnectionListRelationFilter
    executions?: AgentExecutionListRelationFilter
  }

  export type AgentDefinitionOrderByWithRelationInput = {
    id?: SortOrder
    neuraId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    estimatedTimeSavedHours?: SortOrderInput | SortOrder
    estimatedRoiPercentage?: SortOrderInput | SortOrder
    tags?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    connections?: AgentConnectionOrderByRelationAggregateInput
    executions?: AgentExecutionOrderByRelationAggregateInput
    _relevance?: AgentDefinitionOrderByRelevanceInput
  }

  export type AgentDefinitionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgentDefinitionWhereInput | AgentDefinitionWhereInput[]
    OR?: AgentDefinitionWhereInput[]
    NOT?: AgentDefinitionWhereInput | AgentDefinitionWhereInput[]
    neuraId?: StringFilter<"AgentDefinition"> | string
    name?: StringFilter<"AgentDefinition"> | string
    description?: StringNullableFilter<"AgentDefinition"> | string | null
    category?: StringNullableFilter<"AgentDefinition"> | string | null
    difficulty?: StringNullableFilter<"AgentDefinition"> | string | null
    estimatedTimeSavedHours?: DecimalNullableFilter<"AgentDefinition"> | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: DecimalNullableFilter<"AgentDefinition"> | Decimal | DecimalJsLike | number | string | null
    tags?: StringNullableListFilter<"AgentDefinition">
    metadata?: JsonNullableFilter<"AgentDefinition">
    createdAt?: DateTimeFilter<"AgentDefinition"> | Date | string
    connections?: AgentConnectionListRelationFilter
    executions?: AgentExecutionListRelationFilter
  }, "id">

  export type AgentDefinitionOrderByWithAggregationInput = {
    id?: SortOrder
    neuraId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    difficulty?: SortOrderInput | SortOrder
    estimatedTimeSavedHours?: SortOrderInput | SortOrder
    estimatedRoiPercentage?: SortOrderInput | SortOrder
    tags?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AgentDefinitionCountOrderByAggregateInput
    _avg?: AgentDefinitionAvgOrderByAggregateInput
    _max?: AgentDefinitionMaxOrderByAggregateInput
    _min?: AgentDefinitionMinOrderByAggregateInput
    _sum?: AgentDefinitionSumOrderByAggregateInput
  }

  export type AgentDefinitionScalarWhereWithAggregatesInput = {
    AND?: AgentDefinitionScalarWhereWithAggregatesInput | AgentDefinitionScalarWhereWithAggregatesInput[]
    OR?: AgentDefinitionScalarWhereWithAggregatesInput[]
    NOT?: AgentDefinitionScalarWhereWithAggregatesInput | AgentDefinitionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AgentDefinition"> | string
    neuraId?: StringWithAggregatesFilter<"AgentDefinition"> | string
    name?: StringWithAggregatesFilter<"AgentDefinition"> | string
    description?: StringNullableWithAggregatesFilter<"AgentDefinition"> | string | null
    category?: StringNullableWithAggregatesFilter<"AgentDefinition"> | string | null
    difficulty?: StringNullableWithAggregatesFilter<"AgentDefinition"> | string | null
    estimatedTimeSavedHours?: DecimalNullableWithAggregatesFilter<"AgentDefinition"> | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: DecimalNullableWithAggregatesFilter<"AgentDefinition"> | Decimal | DecimalJsLike | number | string | null
    tags?: StringNullableListFilter<"AgentDefinition">
    metadata?: JsonNullableWithAggregatesFilter<"AgentDefinition">
    createdAt?: DateTimeWithAggregatesFilter<"AgentDefinition"> | Date | string
  }

  export type AgentConnectionWhereInput = {
    AND?: AgentConnectionWhereInput | AgentConnectionWhereInput[]
    OR?: AgentConnectionWhereInput[]
    NOT?: AgentConnectionWhereInput | AgentConnectionWhereInput[]
    id?: IntFilter<"AgentConnection"> | number
    organizationId?: IntFilter<"AgentConnection"> | number
    userId?: IntFilter<"AgentConnection"> | number
    agentId?: StringFilter<"AgentConnection"> | string
    provider?: StringFilter<"AgentConnection"> | string
    webhookUrl?: StringNullableFilter<"AgentConnection"> | string | null
    apiKeyEncrypted?: StringNullableFilter<"AgentConnection"> | string | null
    config?: JsonNullableFilter<"AgentConnection">
    isActive?: BoolFilter<"AgentConnection"> | boolean
    lastTestedAt?: DateTimeNullableFilter<"AgentConnection"> | Date | string | null
    lastTestSuccess?: BoolNullableFilter<"AgentConnection"> | boolean | null
    createdAt?: DateTimeFilter<"AgentConnection"> | Date | string
    updatedAt?: DateTimeFilter<"AgentConnection"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    agentDefinition?: XOR<AgentDefinitionRelationFilter, AgentDefinitionWhereInput>
  }

  export type AgentConnectionOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    provider?: SortOrder
    webhookUrl?: SortOrderInput | SortOrder
    apiKeyEncrypted?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastTestedAt?: SortOrderInput | SortOrder
    lastTestSuccess?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    agentDefinition?: AgentDefinitionOrderByWithRelationInput
    _relevance?: AgentConnectionOrderByRelevanceInput
  }

  export type AgentConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    organizationId_agentId?: AgentConnectionOrganizationIdAgentIdCompoundUniqueInput
    AND?: AgentConnectionWhereInput | AgentConnectionWhereInput[]
    OR?: AgentConnectionWhereInput[]
    NOT?: AgentConnectionWhereInput | AgentConnectionWhereInput[]
    organizationId?: IntFilter<"AgentConnection"> | number
    userId?: IntFilter<"AgentConnection"> | number
    agentId?: StringFilter<"AgentConnection"> | string
    provider?: StringFilter<"AgentConnection"> | string
    webhookUrl?: StringNullableFilter<"AgentConnection"> | string | null
    apiKeyEncrypted?: StringNullableFilter<"AgentConnection"> | string | null
    config?: JsonNullableFilter<"AgentConnection">
    isActive?: BoolFilter<"AgentConnection"> | boolean
    lastTestedAt?: DateTimeNullableFilter<"AgentConnection"> | Date | string | null
    lastTestSuccess?: BoolNullableFilter<"AgentConnection"> | boolean | null
    createdAt?: DateTimeFilter<"AgentConnection"> | Date | string
    updatedAt?: DateTimeFilter<"AgentConnection"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    agentDefinition?: XOR<AgentDefinitionRelationFilter, AgentDefinitionWhereInput>
  }, "id" | "organizationId_agentId">

  export type AgentConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    provider?: SortOrder
    webhookUrl?: SortOrderInput | SortOrder
    apiKeyEncrypted?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastTestedAt?: SortOrderInput | SortOrder
    lastTestSuccess?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgentConnectionCountOrderByAggregateInput
    _avg?: AgentConnectionAvgOrderByAggregateInput
    _max?: AgentConnectionMaxOrderByAggregateInput
    _min?: AgentConnectionMinOrderByAggregateInput
    _sum?: AgentConnectionSumOrderByAggregateInput
  }

  export type AgentConnectionScalarWhereWithAggregatesInput = {
    AND?: AgentConnectionScalarWhereWithAggregatesInput | AgentConnectionScalarWhereWithAggregatesInput[]
    OR?: AgentConnectionScalarWhereWithAggregatesInput[]
    NOT?: AgentConnectionScalarWhereWithAggregatesInput | AgentConnectionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AgentConnection"> | number
    organizationId?: IntWithAggregatesFilter<"AgentConnection"> | number
    userId?: IntWithAggregatesFilter<"AgentConnection"> | number
    agentId?: StringWithAggregatesFilter<"AgentConnection"> | string
    provider?: StringWithAggregatesFilter<"AgentConnection"> | string
    webhookUrl?: StringNullableWithAggregatesFilter<"AgentConnection"> | string | null
    apiKeyEncrypted?: StringNullableWithAggregatesFilter<"AgentConnection"> | string | null
    config?: JsonNullableWithAggregatesFilter<"AgentConnection">
    isActive?: BoolWithAggregatesFilter<"AgentConnection"> | boolean
    lastTestedAt?: DateTimeNullableWithAggregatesFilter<"AgentConnection"> | Date | string | null
    lastTestSuccess?: BoolNullableWithAggregatesFilter<"AgentConnection"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"AgentConnection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AgentConnection"> | Date | string
  }

  export type AgentExecutionWhereInput = {
    AND?: AgentExecutionWhereInput | AgentExecutionWhereInput[]
    OR?: AgentExecutionWhereInput[]
    NOT?: AgentExecutionWhereInput | AgentExecutionWhereInput[]
    id?: BigIntFilter<"AgentExecution"> | bigint | number
    organizationId?: IntFilter<"AgentExecution"> | number
    userId?: IntFilter<"AgentExecution"> | number
    agentId?: StringFilter<"AgentExecution"> | string
    neuraId?: StringNullableFilter<"AgentExecution"> | string | null
    chatMessageId?: BigIntNullableFilter<"AgentExecution"> | bigint | number | null
    proposalId?: IntNullableFilter<"AgentExecution"> | number | null
    parameters?: JsonNullableFilter<"AgentExecution">
    result?: JsonNullableFilter<"AgentExecution">
    status?: StringFilter<"AgentExecution"> | string
    errorMessage?: StringNullableFilter<"AgentExecution"> | string | null
    durationMs?: IntNullableFilter<"AgentExecution"> | number | null
    retryCount?: IntFilter<"AgentExecution"> | number
    idempotencyKey?: UuidNullableFilter<"AgentExecution"> | string | null
    createdAt?: DateTimeFilter<"AgentExecution"> | Date | string
    startedAt?: DateTimeNullableFilter<"AgentExecution"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"AgentExecution"> | Date | string | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    agentDefinition?: XOR<AgentDefinitionRelationFilter, AgentDefinitionWhereInput>
  }

  export type AgentExecutionOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    neuraId?: SortOrderInput | SortOrder
    chatMessageId?: SortOrderInput | SortOrder
    proposalId?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    result?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    durationMs?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    idempotencyKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    agentDefinition?: AgentDefinitionOrderByWithRelationInput
    _relevance?: AgentExecutionOrderByRelevanceInput
  }

  export type AgentExecutionWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: AgentExecutionWhereInput | AgentExecutionWhereInput[]
    OR?: AgentExecutionWhereInput[]
    NOT?: AgentExecutionWhereInput | AgentExecutionWhereInput[]
    organizationId?: IntFilter<"AgentExecution"> | number
    userId?: IntFilter<"AgentExecution"> | number
    agentId?: StringFilter<"AgentExecution"> | string
    neuraId?: StringNullableFilter<"AgentExecution"> | string | null
    chatMessageId?: BigIntNullableFilter<"AgentExecution"> | bigint | number | null
    proposalId?: IntNullableFilter<"AgentExecution"> | number | null
    parameters?: JsonNullableFilter<"AgentExecution">
    result?: JsonNullableFilter<"AgentExecution">
    status?: StringFilter<"AgentExecution"> | string
    errorMessage?: StringNullableFilter<"AgentExecution"> | string | null
    durationMs?: IntNullableFilter<"AgentExecution"> | number | null
    retryCount?: IntFilter<"AgentExecution"> | number
    idempotencyKey?: UuidNullableFilter<"AgentExecution"> | string | null
    createdAt?: DateTimeFilter<"AgentExecution"> | Date | string
    startedAt?: DateTimeNullableFilter<"AgentExecution"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"AgentExecution"> | Date | string | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    agentDefinition?: XOR<AgentDefinitionRelationFilter, AgentDefinitionWhereInput>
  }, "id">

  export type AgentExecutionOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    neuraId?: SortOrderInput | SortOrder
    chatMessageId?: SortOrderInput | SortOrder
    proposalId?: SortOrderInput | SortOrder
    parameters?: SortOrderInput | SortOrder
    result?: SortOrderInput | SortOrder
    status?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    durationMs?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    idempotencyKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: AgentExecutionCountOrderByAggregateInput
    _avg?: AgentExecutionAvgOrderByAggregateInput
    _max?: AgentExecutionMaxOrderByAggregateInput
    _min?: AgentExecutionMinOrderByAggregateInput
    _sum?: AgentExecutionSumOrderByAggregateInput
  }

  export type AgentExecutionScalarWhereWithAggregatesInput = {
    AND?: AgentExecutionScalarWhereWithAggregatesInput | AgentExecutionScalarWhereWithAggregatesInput[]
    OR?: AgentExecutionScalarWhereWithAggregatesInput[]
    NOT?: AgentExecutionScalarWhereWithAggregatesInput | AgentExecutionScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"AgentExecution"> | bigint | number
    organizationId?: IntWithAggregatesFilter<"AgentExecution"> | number
    userId?: IntWithAggregatesFilter<"AgentExecution"> | number
    agentId?: StringWithAggregatesFilter<"AgentExecution"> | string
    neuraId?: StringNullableWithAggregatesFilter<"AgentExecution"> | string | null
    chatMessageId?: BigIntNullableWithAggregatesFilter<"AgentExecution"> | bigint | number | null
    proposalId?: IntNullableWithAggregatesFilter<"AgentExecution"> | number | null
    parameters?: JsonNullableWithAggregatesFilter<"AgentExecution">
    result?: JsonNullableWithAggregatesFilter<"AgentExecution">
    status?: StringWithAggregatesFilter<"AgentExecution"> | string
    errorMessage?: StringNullableWithAggregatesFilter<"AgentExecution"> | string | null
    durationMs?: IntNullableWithAggregatesFilter<"AgentExecution"> | number | null
    retryCount?: IntWithAggregatesFilter<"AgentExecution"> | number
    idempotencyKey?: UuidNullableWithAggregatesFilter<"AgentExecution"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AgentExecution"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"AgentExecution"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"AgentExecution"> | Date | string | null
  }

  export type ProposalWhereInput = {
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    id?: IntFilter<"Proposal"> | number
    organizationId?: IntFilter<"Proposal"> | number
    createdByUserId?: IntFilter<"Proposal"> | number
    neuraId?: StringFilter<"Proposal"> | string
    action?: StringFilter<"Proposal"> | string
    description?: StringFilter<"Proposal"> | string
    parameters?: JsonFilter<"Proposal">
    impactAnalysis?: JsonNullableFilter<"Proposal">
    requiredApprovals?: StringNullableListFilter<"Proposal">
    rollbackPlan?: StringNullableFilter<"Proposal"> | string | null
    status?: StringFilter<"Proposal"> | string
    executedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    executionResult?: JsonNullableFilter<"Proposal">
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    deadlineAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    approvals?: ApprovalListRelationFilter
  }

  export type ProposalOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdByUserId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    parameters?: SortOrder
    impactAnalysis?: SortOrderInput | SortOrder
    requiredApprovals?: SortOrder
    rollbackPlan?: SortOrderInput | SortOrder
    status?: SortOrder
    executedAt?: SortOrderInput | SortOrder
    executionResult?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deadlineAt?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    approvals?: ApprovalOrderByRelationAggregateInput
    _relevance?: ProposalOrderByRelevanceInput
  }

  export type ProposalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    organizationId?: IntFilter<"Proposal"> | number
    createdByUserId?: IntFilter<"Proposal"> | number
    neuraId?: StringFilter<"Proposal"> | string
    action?: StringFilter<"Proposal"> | string
    description?: StringFilter<"Proposal"> | string
    parameters?: JsonFilter<"Proposal">
    impactAnalysis?: JsonNullableFilter<"Proposal">
    requiredApprovals?: StringNullableListFilter<"Proposal">
    rollbackPlan?: StringNullableFilter<"Proposal"> | string | null
    status?: StringFilter<"Proposal"> | string
    executedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    executionResult?: JsonNullableFilter<"Proposal">
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    deadlineAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    approvals?: ApprovalListRelationFilter
  }, "id">

  export type ProposalOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdByUserId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    parameters?: SortOrder
    impactAnalysis?: SortOrderInput | SortOrder
    requiredApprovals?: SortOrder
    rollbackPlan?: SortOrderInput | SortOrder
    status?: SortOrder
    executedAt?: SortOrderInput | SortOrder
    executionResult?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deadlineAt?: SortOrderInput | SortOrder
    _count?: ProposalCountOrderByAggregateInput
    _avg?: ProposalAvgOrderByAggregateInput
    _max?: ProposalMaxOrderByAggregateInput
    _min?: ProposalMinOrderByAggregateInput
    _sum?: ProposalSumOrderByAggregateInput
  }

  export type ProposalScalarWhereWithAggregatesInput = {
    AND?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    OR?: ProposalScalarWhereWithAggregatesInput[]
    NOT?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Proposal"> | number
    organizationId?: IntWithAggregatesFilter<"Proposal"> | number
    createdByUserId?: IntWithAggregatesFilter<"Proposal"> | number
    neuraId?: StringWithAggregatesFilter<"Proposal"> | string
    action?: StringWithAggregatesFilter<"Proposal"> | string
    description?: StringWithAggregatesFilter<"Proposal"> | string
    parameters?: JsonWithAggregatesFilter<"Proposal">
    impactAnalysis?: JsonNullableWithAggregatesFilter<"Proposal">
    requiredApprovals?: StringNullableListFilter<"Proposal">
    rollbackPlan?: StringNullableWithAggregatesFilter<"Proposal"> | string | null
    status?: StringWithAggregatesFilter<"Proposal"> | string
    executedAt?: DateTimeNullableWithAggregatesFilter<"Proposal"> | Date | string | null
    executionResult?: JsonNullableWithAggregatesFilter<"Proposal">
    createdAt?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    deadlineAt?: DateTimeNullableWithAggregatesFilter<"Proposal"> | Date | string | null
  }

  export type ApprovalWhereInput = {
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    id?: IntFilter<"Approval"> | number
    proposalId?: IntFilter<"Approval"> | number
    userId?: IntFilter<"Approval"> | number
    roleRequired?: StringFilter<"Approval"> | string
    approved?: BoolNullableFilter<"Approval"> | boolean | null
    comment?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ApprovalOrderByWithRelationInput = {
    id?: SortOrder
    proposalId?: SortOrder
    userId?: SortOrder
    roleRequired?: SortOrder
    approved?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    proposal?: ProposalOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: ApprovalOrderByRelevanceInput
  }

  export type ApprovalWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    proposalId_userId?: ApprovalProposalIdUserIdCompoundUniqueInput
    AND?: ApprovalWhereInput | ApprovalWhereInput[]
    OR?: ApprovalWhereInput[]
    NOT?: ApprovalWhereInput | ApprovalWhereInput[]
    proposalId?: IntFilter<"Approval"> | number
    userId?: IntFilter<"Approval"> | number
    roleRequired?: StringFilter<"Approval"> | string
    approved?: BoolNullableFilter<"Approval"> | boolean | null
    comment?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "proposalId_userId">

  export type ApprovalOrderByWithAggregationInput = {
    id?: SortOrder
    proposalId?: SortOrder
    userId?: SortOrder
    roleRequired?: SortOrder
    approved?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApprovalCountOrderByAggregateInput
    _avg?: ApprovalAvgOrderByAggregateInput
    _max?: ApprovalMaxOrderByAggregateInput
    _min?: ApprovalMinOrderByAggregateInput
    _sum?: ApprovalSumOrderByAggregateInput
  }

  export type ApprovalScalarWhereWithAggregatesInput = {
    AND?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    OR?: ApprovalScalarWhereWithAggregatesInput[]
    NOT?: ApprovalScalarWhereWithAggregatesInput | ApprovalScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Approval"> | number
    proposalId?: IntWithAggregatesFilter<"Approval"> | number
    userId?: IntWithAggregatesFilter<"Approval"> | number
    roleRequired?: StringWithAggregatesFilter<"Approval"> | string
    approved?: BoolNullableWithAggregatesFilter<"Approval"> | boolean | null
    comment?: StringNullableWithAggregatesFilter<"Approval"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Approval"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: BigIntFilter<"AuditLog"> | bigint | number
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    organizationId?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    neuraId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    beforeState?: JsonNullableFilter<"AuditLog">
    afterState?: JsonNullableFilter<"AuditLog">
    proposalId?: IntNullableFilter<"AuditLog"> | number | null
    approvedBy?: IntNullableListFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    correlationId?: UuidFilter<"AuditLog"> | string
    hash?: StringFilter<"AuditLog"> | string
    previousHash?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonNullableFilter<"AuditLog">
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrderInput | SortOrder
    neuraId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    beforeState?: SortOrderInput | SortOrder
    afterState?: SortOrderInput | SortOrder
    proposalId?: SortOrderInput | SortOrder
    approvedBy?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    correlationId?: SortOrder
    hash?: SortOrder
    previousHash?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: AuditLogOrderByRelevanceInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    organizationId?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    neuraId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    beforeState?: JsonNullableFilter<"AuditLog">
    afterState?: JsonNullableFilter<"AuditLog">
    proposalId?: IntNullableFilter<"AuditLog"> | number | null
    approvedBy?: IntNullableListFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    correlationId?: UuidFilter<"AuditLog"> | string
    hash?: StringFilter<"AuditLog"> | string
    previousHash?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonNullableFilter<"AuditLog">
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    timestamp?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrderInput | SortOrder
    neuraId?: SortOrderInput | SortOrder
    action?: SortOrder
    entityType?: SortOrderInput | SortOrder
    entityId?: SortOrderInput | SortOrder
    beforeState?: SortOrderInput | SortOrder
    afterState?: SortOrderInput | SortOrder
    proposalId?: SortOrderInput | SortOrder
    approvedBy?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    correlationId?: SortOrder
    hash?: SortOrder
    previousHash?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"AuditLog"> | bigint | number
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
    organizationId?: IntWithAggregatesFilter<"AuditLog"> | number
    userId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    neuraId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entityType?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    beforeState?: JsonNullableWithAggregatesFilter<"AuditLog">
    afterState?: JsonNullableWithAggregatesFilter<"AuditLog">
    proposalId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    approvedBy?: IntNullableListFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    correlationId?: UuidWithAggregatesFilter<"AuditLog"> | string
    hash?: StringWithAggregatesFilter<"AuditLog"> | string
    previousHash?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"AuditLog">
  }

  export type CostTrackingWhereInput = {
    AND?: CostTrackingWhereInput | CostTrackingWhereInput[]
    OR?: CostTrackingWhereInput[]
    NOT?: CostTrackingWhereInput | CostTrackingWhereInput[]
    id?: BigIntFilter<"CostTracking"> | bigint | number
    organizationId?: IntFilter<"CostTracking"> | number
    userId?: IntNullableFilter<"CostTracking"> | number | null
    neuraId?: StringNullableFilter<"CostTracking"> | string | null
    agentId?: StringNullableFilter<"CostTracking"> | string | null
    resourceType?: StringFilter<"CostTracking"> | string
    resourceName?: StringNullableFilter<"CostTracking"> | string | null
    tokensInput?: IntNullableFilter<"CostTracking"> | number | null
    tokensOutput?: IntNullableFilter<"CostTracking"> | number | null
    tokensReasoning?: IntNullableFilter<"CostTracking"> | number | null
    costEur?: DecimalFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string
    costUsd?: DecimalNullableFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string | null
    model?: StringNullableFilter<"CostTracking"> | string | null
    timestamp?: DateTimeFilter<"CostTracking"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type CostTrackingOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrderInput | SortOrder
    neuraId?: SortOrderInput | SortOrder
    agentId?: SortOrderInput | SortOrder
    resourceType?: SortOrder
    resourceName?: SortOrderInput | SortOrder
    tokensInput?: SortOrderInput | SortOrder
    tokensOutput?: SortOrderInput | SortOrder
    tokensReasoning?: SortOrderInput | SortOrder
    costEur?: SortOrder
    costUsd?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    _relevance?: CostTrackingOrderByRelevanceInput
  }

  export type CostTrackingWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: CostTrackingWhereInput | CostTrackingWhereInput[]
    OR?: CostTrackingWhereInput[]
    NOT?: CostTrackingWhereInput | CostTrackingWhereInput[]
    organizationId?: IntFilter<"CostTracking"> | number
    userId?: IntNullableFilter<"CostTracking"> | number | null
    neuraId?: StringNullableFilter<"CostTracking"> | string | null
    agentId?: StringNullableFilter<"CostTracking"> | string | null
    resourceType?: StringFilter<"CostTracking"> | string
    resourceName?: StringNullableFilter<"CostTracking"> | string | null
    tokensInput?: IntNullableFilter<"CostTracking"> | number | null
    tokensOutput?: IntNullableFilter<"CostTracking"> | number | null
    tokensReasoning?: IntNullableFilter<"CostTracking"> | number | null
    costEur?: DecimalFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string
    costUsd?: DecimalNullableFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string | null
    model?: StringNullableFilter<"CostTracking"> | string | null
    timestamp?: DateTimeFilter<"CostTracking"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id">

  export type CostTrackingOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrderInput | SortOrder
    neuraId?: SortOrderInput | SortOrder
    agentId?: SortOrderInput | SortOrder
    resourceType?: SortOrder
    resourceName?: SortOrderInput | SortOrder
    tokensInput?: SortOrderInput | SortOrder
    tokensOutput?: SortOrderInput | SortOrder
    tokensReasoning?: SortOrderInput | SortOrder
    costEur?: SortOrder
    costUsd?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: CostTrackingCountOrderByAggregateInput
    _avg?: CostTrackingAvgOrderByAggregateInput
    _max?: CostTrackingMaxOrderByAggregateInput
    _min?: CostTrackingMinOrderByAggregateInput
    _sum?: CostTrackingSumOrderByAggregateInput
  }

  export type CostTrackingScalarWhereWithAggregatesInput = {
    AND?: CostTrackingScalarWhereWithAggregatesInput | CostTrackingScalarWhereWithAggregatesInput[]
    OR?: CostTrackingScalarWhereWithAggregatesInput[]
    NOT?: CostTrackingScalarWhereWithAggregatesInput | CostTrackingScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"CostTracking"> | bigint | number
    organizationId?: IntWithAggregatesFilter<"CostTracking"> | number
    userId?: IntNullableWithAggregatesFilter<"CostTracking"> | number | null
    neuraId?: StringNullableWithAggregatesFilter<"CostTracking"> | string | null
    agentId?: StringNullableWithAggregatesFilter<"CostTracking"> | string | null
    resourceType?: StringWithAggregatesFilter<"CostTracking"> | string
    resourceName?: StringNullableWithAggregatesFilter<"CostTracking"> | string | null
    tokensInput?: IntNullableWithAggregatesFilter<"CostTracking"> | number | null
    tokensOutput?: IntNullableWithAggregatesFilter<"CostTracking"> | number | null
    tokensReasoning?: IntNullableWithAggregatesFilter<"CostTracking"> | number | null
    costEur?: DecimalWithAggregatesFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string
    costUsd?: DecimalNullableWithAggregatesFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string | null
    model?: StringNullableWithAggregatesFilter<"CostTracking"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"CostTracking"> | Date | string
  }

  export type NeuraMetricDailyWhereInput = {
    AND?: NeuraMetricDailyWhereInput | NeuraMetricDailyWhereInput[]
    OR?: NeuraMetricDailyWhereInput[]
    NOT?: NeuraMetricDailyWhereInput | NeuraMetricDailyWhereInput[]
    id?: IntFilter<"NeuraMetricDaily"> | number
    organizationId?: IntFilter<"NeuraMetricDaily"> | number
    neuraId?: StringFilter<"NeuraMetricDaily"> | string
    date?: DateTimeFilter<"NeuraMetricDaily"> | Date | string
    conversationsCount?: IntFilter<"NeuraMetricDaily"> | number
    messagesCount?: IntFilter<"NeuraMetricDaily"> | number
    agentExecutionsCount?: IntFilter<"NeuraMetricDaily"> | number
    timeSavedHours?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    roiPercentage?: DecimalNullableFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: IntNullableFilter<"NeuraMetricDaily"> | number | null
    errorCount?: IntFilter<"NeuraMetricDaily"> | number
    userSatisfactionAvg?: DecimalNullableFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"NeuraMetricDaily"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type NeuraMetricDailyOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    date?: SortOrder
    conversationsCount?: SortOrder
    messagesCount?: SortOrder
    agentExecutionsCount?: SortOrder
    timeSavedHours?: SortOrder
    valueGeneratedEur?: SortOrder
    costConsumedEur?: SortOrder
    roiPercentage?: SortOrderInput | SortOrder
    avgResponseTimeMs?: SortOrderInput | SortOrder
    errorCount?: SortOrder
    userSatisfactionAvg?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    _relevance?: NeuraMetricDailyOrderByRelevanceInput
  }

  export type NeuraMetricDailyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    organizationId_neuraId_date?: NeuraMetricDailyOrganizationIdNeuraIdDateCompoundUniqueInput
    AND?: NeuraMetricDailyWhereInput | NeuraMetricDailyWhereInput[]
    OR?: NeuraMetricDailyWhereInput[]
    NOT?: NeuraMetricDailyWhereInput | NeuraMetricDailyWhereInput[]
    organizationId?: IntFilter<"NeuraMetricDaily"> | number
    neuraId?: StringFilter<"NeuraMetricDaily"> | string
    date?: DateTimeFilter<"NeuraMetricDaily"> | Date | string
    conversationsCount?: IntFilter<"NeuraMetricDaily"> | number
    messagesCount?: IntFilter<"NeuraMetricDaily"> | number
    agentExecutionsCount?: IntFilter<"NeuraMetricDaily"> | number
    timeSavedHours?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    roiPercentage?: DecimalNullableFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: IntNullableFilter<"NeuraMetricDaily"> | number | null
    errorCount?: IntFilter<"NeuraMetricDaily"> | number
    userSatisfactionAvg?: DecimalNullableFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"NeuraMetricDaily"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id" | "organizationId_neuraId_date">

  export type NeuraMetricDailyOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    date?: SortOrder
    conversationsCount?: SortOrder
    messagesCount?: SortOrder
    agentExecutionsCount?: SortOrder
    timeSavedHours?: SortOrder
    valueGeneratedEur?: SortOrder
    costConsumedEur?: SortOrder
    roiPercentage?: SortOrderInput | SortOrder
    avgResponseTimeMs?: SortOrderInput | SortOrder
    errorCount?: SortOrder
    userSatisfactionAvg?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NeuraMetricDailyCountOrderByAggregateInput
    _avg?: NeuraMetricDailyAvgOrderByAggregateInput
    _max?: NeuraMetricDailyMaxOrderByAggregateInput
    _min?: NeuraMetricDailyMinOrderByAggregateInput
    _sum?: NeuraMetricDailySumOrderByAggregateInput
  }

  export type NeuraMetricDailyScalarWhereWithAggregatesInput = {
    AND?: NeuraMetricDailyScalarWhereWithAggregatesInput | NeuraMetricDailyScalarWhereWithAggregatesInput[]
    OR?: NeuraMetricDailyScalarWhereWithAggregatesInput[]
    NOT?: NeuraMetricDailyScalarWhereWithAggregatesInput | NeuraMetricDailyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NeuraMetricDaily"> | number
    organizationId?: IntWithAggregatesFilter<"NeuraMetricDaily"> | number
    neuraId?: StringWithAggregatesFilter<"NeuraMetricDaily"> | string
    date?: DateTimeWithAggregatesFilter<"NeuraMetricDaily"> | Date | string
    conversationsCount?: IntWithAggregatesFilter<"NeuraMetricDaily"> | number
    messagesCount?: IntWithAggregatesFilter<"NeuraMetricDaily"> | number
    agentExecutionsCount?: IntWithAggregatesFilter<"NeuraMetricDaily"> | number
    timeSavedHours?: DecimalWithAggregatesFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalWithAggregatesFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalWithAggregatesFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    roiPercentage?: DecimalNullableWithAggregatesFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: IntNullableWithAggregatesFilter<"NeuraMetricDaily"> | number | null
    errorCount?: IntWithAggregatesFilter<"NeuraMetricDaily"> | number
    userSatisfactionAvg?: DecimalNullableWithAggregatesFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"NeuraMetricDaily"> | Date | string
  }

  export type UserConsentWhereInput = {
    AND?: UserConsentWhereInput | UserConsentWhereInput[]
    OR?: UserConsentWhereInput[]
    NOT?: UserConsentWhereInput | UserConsentWhereInput[]
    id?: IntFilter<"UserConsent"> | number
    userId?: IntFilter<"UserConsent"> | number
    consentType?: StringFilter<"UserConsent"> | string
    granted?: BoolFilter<"UserConsent"> | boolean
    ipAddress?: StringNullableFilter<"UserConsent"> | string | null
    grantedAt?: DateTimeFilter<"UserConsent"> | Date | string
    revokedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserConsentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserConsentOrderByRelevanceInput
  }

  export type UserConsentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserConsentWhereInput | UserConsentWhereInput[]
    OR?: UserConsentWhereInput[]
    NOT?: UserConsentWhereInput | UserConsentWhereInput[]
    userId?: IntFilter<"UserConsent"> | number
    consentType?: StringFilter<"UserConsent"> | string
    granted?: BoolFilter<"UserConsent"> | boolean
    ipAddress?: StringNullableFilter<"UserConsent"> | string | null
    grantedAt?: DateTimeFilter<"UserConsent"> | Date | string
    revokedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserConsentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    _count?: UserConsentCountOrderByAggregateInput
    _avg?: UserConsentAvgOrderByAggregateInput
    _max?: UserConsentMaxOrderByAggregateInput
    _min?: UserConsentMinOrderByAggregateInput
    _sum?: UserConsentSumOrderByAggregateInput
  }

  export type UserConsentScalarWhereWithAggregatesInput = {
    AND?: UserConsentScalarWhereWithAggregatesInput | UserConsentScalarWhereWithAggregatesInput[]
    OR?: UserConsentScalarWhereWithAggregatesInput[]
    NOT?: UserConsentScalarWhereWithAggregatesInput | UserConsentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserConsent"> | number
    userId?: IntWithAggregatesFilter<"UserConsent"> | number
    consentType?: StringWithAggregatesFilter<"UserConsent"> | string
    granted?: BoolWithAggregatesFilter<"UserConsent"> | boolean
    ipAddress?: StringNullableWithAggregatesFilter<"UserConsent"> | string | null
    grantedAt?: DateTimeWithAggregatesFilter<"UserConsent"> | Date | string
    revokedAt?: DateTimeNullableWithAggregatesFilter<"UserConsent"> | Date | string | null
  }

  export type PromptVersionWhereInput = {
    AND?: PromptVersionWhereInput | PromptVersionWhereInput[]
    OR?: PromptVersionWhereInput[]
    NOT?: PromptVersionWhereInput | PromptVersionWhereInput[]
    id?: IntFilter<"PromptVersion"> | number
    neuraId?: StringFilter<"PromptVersion"> | string
    version?: IntFilter<"PromptVersion"> | number
    systemPrompt?: StringFilter<"PromptVersion"> | string
    contextTemplate?: StringNullableFilter<"PromptVersion"> | string | null
    fewShotExamples?: JsonNullableFilter<"PromptVersion">
    tools?: JsonNullableFilter<"PromptVersion">
    model?: StringNullableFilter<"PromptVersion"> | string | null
    temperature?: DecimalNullableFilter<"PromptVersion"> | Decimal | DecimalJsLike | number | string | null
    maxTokens?: IntNullableFilter<"PromptVersion"> | number | null
    isActive?: BoolFilter<"PromptVersion"> | boolean
    performanceScore?: DecimalNullableFilter<"PromptVersion"> | Decimal | DecimalJsLike | number | string | null
    createdById?: IntNullableFilter<"PromptVersion"> | number | null
    createdAt?: DateTimeFilter<"PromptVersion"> | Date | string
  }

  export type PromptVersionOrderByWithRelationInput = {
    id?: SortOrder
    neuraId?: SortOrder
    version?: SortOrder
    systemPrompt?: SortOrder
    contextTemplate?: SortOrderInput | SortOrder
    fewShotExamples?: SortOrderInput | SortOrder
    tools?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    maxTokens?: SortOrderInput | SortOrder
    isActive?: SortOrder
    performanceScore?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _relevance?: PromptVersionOrderByRelevanceInput
  }

  export type PromptVersionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    neuraId_version?: PromptVersionNeuraIdVersionCompoundUniqueInput
    AND?: PromptVersionWhereInput | PromptVersionWhereInput[]
    OR?: PromptVersionWhereInput[]
    NOT?: PromptVersionWhereInput | PromptVersionWhereInput[]
    neuraId?: StringFilter<"PromptVersion"> | string
    version?: IntFilter<"PromptVersion"> | number
    systemPrompt?: StringFilter<"PromptVersion"> | string
    contextTemplate?: StringNullableFilter<"PromptVersion"> | string | null
    fewShotExamples?: JsonNullableFilter<"PromptVersion">
    tools?: JsonNullableFilter<"PromptVersion">
    model?: StringNullableFilter<"PromptVersion"> | string | null
    temperature?: DecimalNullableFilter<"PromptVersion"> | Decimal | DecimalJsLike | number | string | null
    maxTokens?: IntNullableFilter<"PromptVersion"> | number | null
    isActive?: BoolFilter<"PromptVersion"> | boolean
    performanceScore?: DecimalNullableFilter<"PromptVersion"> | Decimal | DecimalJsLike | number | string | null
    createdById?: IntNullableFilter<"PromptVersion"> | number | null
    createdAt?: DateTimeFilter<"PromptVersion"> | Date | string
  }, "id" | "neuraId_version">

  export type PromptVersionOrderByWithAggregationInput = {
    id?: SortOrder
    neuraId?: SortOrder
    version?: SortOrder
    systemPrompt?: SortOrder
    contextTemplate?: SortOrderInput | SortOrder
    fewShotExamples?: SortOrderInput | SortOrder
    tools?: SortOrderInput | SortOrder
    model?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    maxTokens?: SortOrderInput | SortOrder
    isActive?: SortOrder
    performanceScore?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PromptVersionCountOrderByAggregateInput
    _avg?: PromptVersionAvgOrderByAggregateInput
    _max?: PromptVersionMaxOrderByAggregateInput
    _min?: PromptVersionMinOrderByAggregateInput
    _sum?: PromptVersionSumOrderByAggregateInput
  }

  export type PromptVersionScalarWhereWithAggregatesInput = {
    AND?: PromptVersionScalarWhereWithAggregatesInput | PromptVersionScalarWhereWithAggregatesInput[]
    OR?: PromptVersionScalarWhereWithAggregatesInput[]
    NOT?: PromptVersionScalarWhereWithAggregatesInput | PromptVersionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PromptVersion"> | number
    neuraId?: StringWithAggregatesFilter<"PromptVersion"> | string
    version?: IntWithAggregatesFilter<"PromptVersion"> | number
    systemPrompt?: StringWithAggregatesFilter<"PromptVersion"> | string
    contextTemplate?: StringNullableWithAggregatesFilter<"PromptVersion"> | string | null
    fewShotExamples?: JsonNullableWithAggregatesFilter<"PromptVersion">
    tools?: JsonNullableWithAggregatesFilter<"PromptVersion">
    model?: StringNullableWithAggregatesFilter<"PromptVersion"> | string | null
    temperature?: DecimalNullableWithAggregatesFilter<"PromptVersion"> | Decimal | DecimalJsLike | number | string | null
    maxTokens?: IntNullableWithAggregatesFilter<"PromptVersion"> | number | null
    isActive?: BoolWithAggregatesFilter<"PromptVersion"> | boolean
    performanceScore?: DecimalNullableWithAggregatesFilter<"PromptVersion"> | Decimal | DecimalJsLike | number | string | null
    createdById?: IntNullableWithAggregatesFilter<"PromptVersion"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"PromptVersion"> | Date | string
  }

  export type IntegrationConfigWhereInput = {
    AND?: IntegrationConfigWhereInput | IntegrationConfigWhereInput[]
    OR?: IntegrationConfigWhereInput[]
    NOT?: IntegrationConfigWhereInput | IntegrationConfigWhereInput[]
    id?: IntFilter<"IntegrationConfig"> | number
    organizationId?: IntFilter<"IntegrationConfig"> | number
    integrationType?: StringFilter<"IntegrationConfig"> | string
    credentialsEncrypted?: StringFilter<"IntegrationConfig"> | string
    config?: JsonNullableFilter<"IntegrationConfig">
    isActive?: BoolFilter<"IntegrationConfig"> | boolean
    lastSyncAt?: DateTimeNullableFilter<"IntegrationConfig"> | Date | string | null
    createdAt?: DateTimeFilter<"IntegrationConfig"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    syncLogs?: IntegrationSyncLogListRelationFilter
  }

  export type IntegrationConfigOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    integrationType?: SortOrder
    credentialsEncrypted?: SortOrder
    config?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    syncLogs?: IntegrationSyncLogOrderByRelationAggregateInput
    _relevance?: IntegrationConfigOrderByRelevanceInput
  }

  export type IntegrationConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    organizationId_integrationType?: IntegrationConfigOrganizationIdIntegrationTypeCompoundUniqueInput
    AND?: IntegrationConfigWhereInput | IntegrationConfigWhereInput[]
    OR?: IntegrationConfigWhereInput[]
    NOT?: IntegrationConfigWhereInput | IntegrationConfigWhereInput[]
    organizationId?: IntFilter<"IntegrationConfig"> | number
    integrationType?: StringFilter<"IntegrationConfig"> | string
    credentialsEncrypted?: StringFilter<"IntegrationConfig"> | string
    config?: JsonNullableFilter<"IntegrationConfig">
    isActive?: BoolFilter<"IntegrationConfig"> | boolean
    lastSyncAt?: DateTimeNullableFilter<"IntegrationConfig"> | Date | string | null
    createdAt?: DateTimeFilter<"IntegrationConfig"> | Date | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    syncLogs?: IntegrationSyncLogListRelationFilter
  }, "id" | "organizationId_integrationType">

  export type IntegrationConfigOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    integrationType?: SortOrder
    credentialsEncrypted?: SortOrder
    config?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: IntegrationConfigCountOrderByAggregateInput
    _avg?: IntegrationConfigAvgOrderByAggregateInput
    _max?: IntegrationConfigMaxOrderByAggregateInput
    _min?: IntegrationConfigMinOrderByAggregateInput
    _sum?: IntegrationConfigSumOrderByAggregateInput
  }

  export type IntegrationConfigScalarWhereWithAggregatesInput = {
    AND?: IntegrationConfigScalarWhereWithAggregatesInput | IntegrationConfigScalarWhereWithAggregatesInput[]
    OR?: IntegrationConfigScalarWhereWithAggregatesInput[]
    NOT?: IntegrationConfigScalarWhereWithAggregatesInput | IntegrationConfigScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IntegrationConfig"> | number
    organizationId?: IntWithAggregatesFilter<"IntegrationConfig"> | number
    integrationType?: StringWithAggregatesFilter<"IntegrationConfig"> | string
    credentialsEncrypted?: StringWithAggregatesFilter<"IntegrationConfig"> | string
    config?: JsonNullableWithAggregatesFilter<"IntegrationConfig">
    isActive?: BoolWithAggregatesFilter<"IntegrationConfig"> | boolean
    lastSyncAt?: DateTimeNullableWithAggregatesFilter<"IntegrationConfig"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"IntegrationConfig"> | Date | string
  }

  export type IntegrationSyncLogWhereInput = {
    AND?: IntegrationSyncLogWhereInput | IntegrationSyncLogWhereInput[]
    OR?: IntegrationSyncLogWhereInput[]
    NOT?: IntegrationSyncLogWhereInput | IntegrationSyncLogWhereInput[]
    id?: BigIntFilter<"IntegrationSyncLog"> | bigint | number
    integrationConfigId?: IntFilter<"IntegrationSyncLog"> | number
    syncType?: StringNullableFilter<"IntegrationSyncLog"> | string | null
    recordsProcessed?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    recordsSuccess?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    recordsFailed?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    durationMs?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    errorMessage?: StringNullableFilter<"IntegrationSyncLog"> | string | null
    createdAt?: DateTimeFilter<"IntegrationSyncLog"> | Date | string
    integrationConfig?: XOR<IntegrationConfigRelationFilter, IntegrationConfigWhereInput>
  }

  export type IntegrationSyncLogOrderByWithRelationInput = {
    id?: SortOrder
    integrationConfigId?: SortOrder
    syncType?: SortOrderInput | SortOrder
    recordsProcessed?: SortOrderInput | SortOrder
    recordsSuccess?: SortOrderInput | SortOrder
    recordsFailed?: SortOrderInput | SortOrder
    durationMs?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    integrationConfig?: IntegrationConfigOrderByWithRelationInput
    _relevance?: IntegrationSyncLogOrderByRelevanceInput
  }

  export type IntegrationSyncLogWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: IntegrationSyncLogWhereInput | IntegrationSyncLogWhereInput[]
    OR?: IntegrationSyncLogWhereInput[]
    NOT?: IntegrationSyncLogWhereInput | IntegrationSyncLogWhereInput[]
    integrationConfigId?: IntFilter<"IntegrationSyncLog"> | number
    syncType?: StringNullableFilter<"IntegrationSyncLog"> | string | null
    recordsProcessed?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    recordsSuccess?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    recordsFailed?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    durationMs?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    errorMessage?: StringNullableFilter<"IntegrationSyncLog"> | string | null
    createdAt?: DateTimeFilter<"IntegrationSyncLog"> | Date | string
    integrationConfig?: XOR<IntegrationConfigRelationFilter, IntegrationConfigWhereInput>
  }, "id">

  export type IntegrationSyncLogOrderByWithAggregationInput = {
    id?: SortOrder
    integrationConfigId?: SortOrder
    syncType?: SortOrderInput | SortOrder
    recordsProcessed?: SortOrderInput | SortOrder
    recordsSuccess?: SortOrderInput | SortOrder
    recordsFailed?: SortOrderInput | SortOrder
    durationMs?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: IntegrationSyncLogCountOrderByAggregateInput
    _avg?: IntegrationSyncLogAvgOrderByAggregateInput
    _max?: IntegrationSyncLogMaxOrderByAggregateInput
    _min?: IntegrationSyncLogMinOrderByAggregateInput
    _sum?: IntegrationSyncLogSumOrderByAggregateInput
  }

  export type IntegrationSyncLogScalarWhereWithAggregatesInput = {
    AND?: IntegrationSyncLogScalarWhereWithAggregatesInput | IntegrationSyncLogScalarWhereWithAggregatesInput[]
    OR?: IntegrationSyncLogScalarWhereWithAggregatesInput[]
    NOT?: IntegrationSyncLogScalarWhereWithAggregatesInput | IntegrationSyncLogScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"IntegrationSyncLog"> | bigint | number
    integrationConfigId?: IntWithAggregatesFilter<"IntegrationSyncLog"> | number
    syncType?: StringNullableWithAggregatesFilter<"IntegrationSyncLog"> | string | null
    recordsProcessed?: IntNullableWithAggregatesFilter<"IntegrationSyncLog"> | number | null
    recordsSuccess?: IntNullableWithAggregatesFilter<"IntegrationSyncLog"> | number | null
    recordsFailed?: IntNullableWithAggregatesFilter<"IntegrationSyncLog"> | number | null
    durationMs?: IntNullableWithAggregatesFilter<"IntegrationSyncLog"> | number | null
    errorMessage?: StringNullableWithAggregatesFilter<"IntegrationSyncLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"IntegrationSyncLog"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: BigIntFilter<"Notification"> | bigint | number
    userId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    channels?: StringNullableListFilter<"Notification">
    priority?: StringFilter<"Notification"> | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrderInput | SortOrder
    channels?: SortOrder
    priority?: SortOrder
    readAt?: SortOrderInput | SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: NotificationOrderByRelevanceInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    channels?: StringNullableListFilter<"Notification">
    priority?: StringFilter<"Notification"> | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrderInput | SortOrder
    channels?: SortOrder
    priority?: SortOrder
    readAt?: SortOrderInput | SortOrder
    actionUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Notification"> | bigint | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    channels?: StringNullableListFilter<"Notification">
    priority?: StringWithAggregatesFilter<"Notification"> | string
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type OrganizationCreateInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    refreshToken: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: number
    refreshToken: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    refreshToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: number
    refreshToken: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    refreshToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatCreateInput = {
    id?: bigint | number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatsInput
    organization: OrganizationCreateNestedOneWithoutChatsInput
    messages?: ChatMessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    id?: bigint | number
    userId: number
    organizationId: number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutChatsNestedInput
    messages?: ChatMessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatCreateManyInput = {
    id?: bigint | number
    userId: number
    organizationId: number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    id?: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    chat: ChatCreateNestedOneWithoutMessagesInput
    feedback?: ChatFeedbackCreateNestedManyWithoutMessageInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: bigint | number
    chatId: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    feedback?: ChatFeedbackUncheckedCreateNestedManyWithoutMessageInput
  }

  export type ChatMessageUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
    feedback?: ChatFeedbackUpdateManyWithoutMessageNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    chatId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: ChatFeedbackUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type ChatMessageCreateManyInput = {
    id?: bigint | number
    chatId: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    chatId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackCreateInput = {
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
    message: ChatMessageCreateNestedOneWithoutFeedbackInput
    user: UserCreateNestedOneWithoutChatFeedbackInput
  }

  export type ChatFeedbackUncheckedCreateInput = {
    id?: number
    messageId: bigint | number
    userId: number
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
  }

  export type ChatFeedbackUpdateInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: ChatMessageUpdateOneRequiredWithoutFeedbackNestedInput
    user?: UserUpdateOneRequiredWithoutChatFeedbackNestedInput
  }

  export type ChatFeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackCreateManyInput = {
    id?: number
    messageId: bigint | number
    userId: number
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
  }

  export type ChatFeedbackUpdateManyMutationInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentDefinitionCreateInput = {
    id: string
    neuraId: string
    name: string
    description?: string | null
    category?: string | null
    difficulty?: string | null
    estimatedTimeSavedHours?: Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    connections?: AgentConnectionCreateNestedManyWithoutAgentDefinitionInput
    executions?: AgentExecutionCreateNestedManyWithoutAgentDefinitionInput
  }

  export type AgentDefinitionUncheckedCreateInput = {
    id: string
    neuraId: string
    name: string
    description?: string | null
    category?: string | null
    difficulty?: string | null
    estimatedTimeSavedHours?: Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    connections?: AgentConnectionUncheckedCreateNestedManyWithoutAgentDefinitionInput
    executions?: AgentExecutionUncheckedCreateNestedManyWithoutAgentDefinitionInput
  }

  export type AgentDefinitionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connections?: AgentConnectionUpdateManyWithoutAgentDefinitionNestedInput
    executions?: AgentExecutionUpdateManyWithoutAgentDefinitionNestedInput
  }

  export type AgentDefinitionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connections?: AgentConnectionUncheckedUpdateManyWithoutAgentDefinitionNestedInput
    executions?: AgentExecutionUncheckedUpdateManyWithoutAgentDefinitionNestedInput
  }

  export type AgentDefinitionCreateManyInput = {
    id: string
    neuraId: string
    name: string
    description?: string | null
    category?: string | null
    difficulty?: string | null
    estimatedTimeSavedHours?: Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AgentDefinitionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentDefinitionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionCreateInput = {
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutAgentConnectionsInput
    user: UserCreateNestedOneWithoutAgentConnectionsInput
    agentDefinition: AgentDefinitionCreateNestedOneWithoutConnectionsInput
  }

  export type AgentConnectionUncheckedCreateInput = {
    id?: number
    organizationId: number
    userId: number
    agentId: string
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentConnectionUpdateInput = {
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutAgentConnectionsNestedInput
    user?: UserUpdateOneRequiredWithoutAgentConnectionsNestedInput
    agentDefinition?: AgentDefinitionUpdateOneRequiredWithoutConnectionsNestedInput
  }

  export type AgentConnectionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionCreateManyInput = {
    id?: number
    organizationId: number
    userId: number
    agentId: string
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentConnectionUpdateManyMutationInput = {
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentExecutionCreateInput = {
    id?: bigint | number
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutAgentExecutionsInput
    user: UserCreateNestedOneWithoutAgentExecutionsInput
    agentDefinition: AgentDefinitionCreateNestedOneWithoutExecutionsInput
  }

  export type AgentExecutionUncheckedCreateInput = {
    id?: bigint | number
    organizationId: number
    userId: number
    agentId: string
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type AgentExecutionUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutAgentExecutionsNestedInput
    user?: UserUpdateOneRequiredWithoutAgentExecutionsNestedInput
    agentDefinition?: AgentDefinitionUpdateOneRequiredWithoutExecutionsNestedInput
  }

  export type AgentExecutionUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentExecutionCreateManyInput = {
    id?: bigint | number
    organizationId: number
    userId: number
    agentId: string
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type AgentExecutionUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentExecutionUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProposalCreateInput = {
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutProposalsInput
    createdBy: UserCreateNestedOneWithoutProposalsCreatedInput
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
  }

  export type ProposalUncheckedCreateInput = {
    id?: number
    organizationId: number
    createdByUserId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
  }

  export type ProposalUpdateInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutProposalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutProposalsCreatedNestedInput
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    createdByUserId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
  }

  export type ProposalCreateManyInput = {
    id?: number
    organizationId: number
    createdByUserId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
  }

  export type ProposalUpdateManyMutationInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProposalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    createdByUserId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalCreateInput = {
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
    proposal: ProposalCreateNestedOneWithoutApprovalsInput
    user: UserCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateInput = {
    id?: number
    proposalId: number
    userId: number
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalUpdateInput = {
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposal?: ProposalUpdateOneRequiredWithoutApprovalsNestedInput
    user?: UserUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    proposalId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalCreateManyInput = {
    id?: number
    proposalId: number
    userId: number
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalUpdateManyMutationInput = {
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    proposalId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: bigint | number
    timestamp?: Date | string
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutAuditLogsInput
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: bigint | number
    timestamp?: Date | string
    organizationId: number
    userId?: number | null
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutAuditLogsNestedInput
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogCreateManyInput = {
    id?: bigint | number
    timestamp?: Date | string
    organizationId: number
    userId?: number | null
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CostTrackingCreateInput = {
    id?: bigint | number
    userId?: number | null
    neuraId?: string | null
    agentId?: string | null
    resourceType: string
    resourceName?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur: Decimal | DecimalJsLike | number | string
    costUsd?: Decimal | DecimalJsLike | number | string | null
    model?: string | null
    timestamp?: Date | string
    organization: OrganizationCreateNestedOneWithoutCostTrackingInput
  }

  export type CostTrackingUncheckedCreateInput = {
    id?: bigint | number
    organizationId: number
    userId?: number | null
    neuraId?: string | null
    agentId?: string | null
    resourceType: string
    resourceName?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur: Decimal | DecimalJsLike | number | string
    costUsd?: Decimal | DecimalJsLike | number | string | null
    model?: string | null
    timestamp?: Date | string
  }

  export type CostTrackingUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    resourceType?: StringFieldUpdateOperationsInput | string
    resourceName?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutCostTrackingNestedInput
  }

  export type CostTrackingUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    resourceType?: StringFieldUpdateOperationsInput | string
    resourceName?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostTrackingCreateManyInput = {
    id?: bigint | number
    organizationId: number
    userId?: number | null
    neuraId?: string | null
    agentId?: string | null
    resourceType: string
    resourceName?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur: Decimal | DecimalJsLike | number | string
    costUsd?: Decimal | DecimalJsLike | number | string | null
    model?: string | null
    timestamp?: Date | string
  }

  export type CostTrackingUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    resourceType?: StringFieldUpdateOperationsInput | string
    resourceName?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostTrackingUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    resourceType?: StringFieldUpdateOperationsInput | string
    resourceName?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeuraMetricDailyCreateInput = {
    neuraId: string
    date: Date | string
    conversationsCount?: number
    messagesCount?: number
    agentExecutionsCount?: number
    timeSavedHours?: Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: Decimal | DecimalJsLike | number | string
    costConsumedEur?: Decimal | DecimalJsLike | number | string
    roiPercentage?: Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: number | null
    errorCount?: number
    userSatisfactionAvg?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutNeuraMetricsInput
  }

  export type NeuraMetricDailyUncheckedCreateInput = {
    id?: number
    organizationId: number
    neuraId: string
    date: Date | string
    conversationsCount?: number
    messagesCount?: number
    agentExecutionsCount?: number
    timeSavedHours?: Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: Decimal | DecimalJsLike | number | string
    costConsumedEur?: Decimal | DecimalJsLike | number | string
    roiPercentage?: Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: number | null
    errorCount?: number
    userSatisfactionAvg?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type NeuraMetricDailyUpdateInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationsCount?: IntFieldUpdateOperationsInput | number
    messagesCount?: IntFieldUpdateOperationsInput | number
    agentExecutionsCount?: IntFieldUpdateOperationsInput | number
    timeSavedHours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    roiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorCount?: IntFieldUpdateOperationsInput | number
    userSatisfactionAvg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutNeuraMetricsNestedInput
  }

  export type NeuraMetricDailyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationsCount?: IntFieldUpdateOperationsInput | number
    messagesCount?: IntFieldUpdateOperationsInput | number
    agentExecutionsCount?: IntFieldUpdateOperationsInput | number
    timeSavedHours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    roiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorCount?: IntFieldUpdateOperationsInput | number
    userSatisfactionAvg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeuraMetricDailyCreateManyInput = {
    id?: number
    organizationId: number
    neuraId: string
    date: Date | string
    conversationsCount?: number
    messagesCount?: number
    agentExecutionsCount?: number
    timeSavedHours?: Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: Decimal | DecimalJsLike | number | string
    costConsumedEur?: Decimal | DecimalJsLike | number | string
    roiPercentage?: Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: number | null
    errorCount?: number
    userSatisfactionAvg?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type NeuraMetricDailyUpdateManyMutationInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationsCount?: IntFieldUpdateOperationsInput | number
    messagesCount?: IntFieldUpdateOperationsInput | number
    agentExecutionsCount?: IntFieldUpdateOperationsInput | number
    timeSavedHours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    roiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorCount?: IntFieldUpdateOperationsInput | number
    userSatisfactionAvg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeuraMetricDailyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationsCount?: IntFieldUpdateOperationsInput | number
    messagesCount?: IntFieldUpdateOperationsInput | number
    agentExecutionsCount?: IntFieldUpdateOperationsInput | number
    timeSavedHours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    roiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorCount?: IntFieldUpdateOperationsInput | number
    userSatisfactionAvg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentCreateInput = {
    consentType: string
    granted: boolean
    ipAddress?: string | null
    grantedAt?: Date | string
    revokedAt?: Date | string | null
    user: UserCreateNestedOneWithoutConsentsInput
  }

  export type UserConsentUncheckedCreateInput = {
    id?: number
    userId: number
    consentType: string
    granted: boolean
    ipAddress?: string | null
    grantedAt?: Date | string
    revokedAt?: Date | string | null
  }

  export type UserConsentUpdateInput = {
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutConsentsNestedInput
  }

  export type UserConsentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserConsentCreateManyInput = {
    id?: number
    userId: number
    consentType: string
    granted: boolean
    ipAddress?: string | null
    grantedAt?: Date | string
    revokedAt?: Date | string | null
  }

  export type UserConsentUpdateManyMutationInput = {
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserConsentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PromptVersionCreateInput = {
    neuraId: string
    version: number
    systemPrompt: string
    contextTemplate?: string | null
    fewShotExamples?: NullableJsonNullValueInput | InputJsonValue
    tools?: NullableJsonNullValueInput | InputJsonValue
    model?: string | null
    temperature?: Decimal | DecimalJsLike | number | string | null
    maxTokens?: number | null
    isActive?: boolean
    performanceScore?: Decimal | DecimalJsLike | number | string | null
    createdById?: number | null
    createdAt?: Date | string
  }

  export type PromptVersionUncheckedCreateInput = {
    id?: number
    neuraId: string
    version: number
    systemPrompt: string
    contextTemplate?: string | null
    fewShotExamples?: NullableJsonNullValueInput | InputJsonValue
    tools?: NullableJsonNullValueInput | InputJsonValue
    model?: string | null
    temperature?: Decimal | DecimalJsLike | number | string | null
    maxTokens?: number | null
    isActive?: boolean
    performanceScore?: Decimal | DecimalJsLike | number | string | null
    createdById?: number | null
    createdAt?: Date | string
  }

  export type PromptVersionUpdateInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    systemPrompt?: StringFieldUpdateOperationsInput | string
    contextTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    fewShotExamples?: NullableJsonNullValueInput | InputJsonValue
    tools?: NullableJsonNullValueInput | InputJsonValue
    model?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    performanceScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptVersionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    systemPrompt?: StringFieldUpdateOperationsInput | string
    contextTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    fewShotExamples?: NullableJsonNullValueInput | InputJsonValue
    tools?: NullableJsonNullValueInput | InputJsonValue
    model?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    performanceScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptVersionCreateManyInput = {
    id?: number
    neuraId: string
    version: number
    systemPrompt: string
    contextTemplate?: string | null
    fewShotExamples?: NullableJsonNullValueInput | InputJsonValue
    tools?: NullableJsonNullValueInput | InputJsonValue
    model?: string | null
    temperature?: Decimal | DecimalJsLike | number | string | null
    maxTokens?: number | null
    isActive?: boolean
    performanceScore?: Decimal | DecimalJsLike | number | string | null
    createdById?: number | null
    createdAt?: Date | string
  }

  export type PromptVersionUpdateManyMutationInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    systemPrompt?: StringFieldUpdateOperationsInput | string
    contextTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    fewShotExamples?: NullableJsonNullValueInput | InputJsonValue
    tools?: NullableJsonNullValueInput | InputJsonValue
    model?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    performanceScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromptVersionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    systemPrompt?: StringFieldUpdateOperationsInput | string
    contextTemplate?: NullableStringFieldUpdateOperationsInput | string | null
    fewShotExamples?: NullableJsonNullValueInput | InputJsonValue
    tools?: NullableJsonNullValueInput | InputJsonValue
    model?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    maxTokens?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    performanceScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationConfigCreateInput = {
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutIntegrationConfigsInput
    syncLogs?: IntegrationSyncLogCreateNestedManyWithoutIntegrationConfigInput
  }

  export type IntegrationConfigUncheckedCreateInput = {
    id?: number
    organizationId: number
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    syncLogs?: IntegrationSyncLogUncheckedCreateNestedManyWithoutIntegrationConfigInput
  }

  export type IntegrationConfigUpdateInput = {
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationConfigsNestedInput
    syncLogs?: IntegrationSyncLogUpdateManyWithoutIntegrationConfigNestedInput
  }

  export type IntegrationConfigUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncLogs?: IntegrationSyncLogUncheckedUpdateManyWithoutIntegrationConfigNestedInput
  }

  export type IntegrationConfigCreateManyInput = {
    id?: number
    organizationId: number
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
  }

  export type IntegrationConfigUpdateManyMutationInput = {
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationConfigUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSyncLogCreateInput = {
    id?: bigint | number
    syncType?: string | null
    recordsProcessed?: number | null
    recordsSuccess?: number | null
    recordsFailed?: number | null
    durationMs?: number | null
    errorMessage?: string | null
    createdAt?: Date | string
    integrationConfig: IntegrationConfigCreateNestedOneWithoutSyncLogsInput
  }

  export type IntegrationSyncLogUncheckedCreateInput = {
    id?: bigint | number
    integrationConfigId: number
    syncType?: string | null
    recordsProcessed?: number | null
    recordsSuccess?: number | null
    recordsFailed?: number | null
    durationMs?: number | null
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type IntegrationSyncLogUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    syncType?: NullableStringFieldUpdateOperationsInput | string | null
    recordsProcessed?: NullableIntFieldUpdateOperationsInput | number | null
    recordsSuccess?: NullableIntFieldUpdateOperationsInput | number | null
    recordsFailed?: NullableIntFieldUpdateOperationsInput | number | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    integrationConfig?: IntegrationConfigUpdateOneRequiredWithoutSyncLogsNestedInput
  }

  export type IntegrationSyncLogUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationConfigId?: IntFieldUpdateOperationsInput | number
    syncType?: NullableStringFieldUpdateOperationsInput | string | null
    recordsProcessed?: NullableIntFieldUpdateOperationsInput | number | null
    recordsSuccess?: NullableIntFieldUpdateOperationsInput | number | null
    recordsFailed?: NullableIntFieldUpdateOperationsInput | number | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSyncLogCreateManyInput = {
    id?: bigint | number
    integrationConfigId: number
    syncType?: string | null
    recordsProcessed?: number | null
    recordsSuccess?: number | null
    recordsFailed?: number | null
    durationMs?: number | null
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type IntegrationSyncLogUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    syncType?: NullableStringFieldUpdateOperationsInput | string | null
    recordsProcessed?: NullableIntFieldUpdateOperationsInput | number | null
    recordsSuccess?: NullableIntFieldUpdateOperationsInput | number | null
    recordsFailed?: NullableIntFieldUpdateOperationsInput | number | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSyncLogUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationConfigId?: IntFieldUpdateOperationsInput | number
    syncType?: NullableStringFieldUpdateOperationsInput | string | null
    recordsProcessed?: NullableIntFieldUpdateOperationsInput | number | null
    recordsSuccess?: NullableIntFieldUpdateOperationsInput | number | null
    recordsFailed?: NullableIntFieldUpdateOperationsInput | number | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: bigint | number
    type: string
    title: string
    message?: string | null
    channels?: NotificationCreatechannelsInput | string[]
    priority?: string
    readAt?: Date | string | null
    actionUrl?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: bigint | number
    userId: number
    type: string
    title: string
    message?: string | null
    channels?: NotificationCreatechannelsInput | string[]
    priority?: string
    readAt?: Date | string | null
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: NotificationUpdatechannelsInput | string[]
    priority?: StringFieldUpdateOperationsInput | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: NotificationUpdatechannelsInput | string[]
    priority?: StringFieldUpdateOperationsInput | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: bigint | number
    userId: number
    type: string
    title: string
    message?: string | null
    channels?: NotificationCreatechannelsInput | string[]
    priority?: string
    readAt?: Date | string | null
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: NotificationUpdatechannelsInput | string[]
    priority?: StringFieldUpdateOperationsInput | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: NotificationUpdatechannelsInput | string[]
    priority?: StringFieldUpdateOperationsInput | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ChatListRelationFilter = {
    every?: ChatWhereInput
    some?: ChatWhereInput
    none?: ChatWhereInput
  }

  export type AgentConnectionListRelationFilter = {
    every?: AgentConnectionWhereInput
    some?: AgentConnectionWhereInput
    none?: AgentConnectionWhereInput
  }

  export type AgentExecutionListRelationFilter = {
    every?: AgentExecutionWhereInput
    some?: AgentExecutionWhereInput
    none?: AgentExecutionWhereInput
  }

  export type ProposalListRelationFilter = {
    every?: ProposalWhereInput
    some?: ProposalWhereInput
    none?: ProposalWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type CostTrackingListRelationFilter = {
    every?: CostTrackingWhereInput
    some?: CostTrackingWhereInput
    none?: CostTrackingWhereInput
  }

  export type NeuraMetricDailyListRelationFilter = {
    every?: NeuraMetricDailyWhereInput
    some?: NeuraMetricDailyWhereInput
    none?: NeuraMetricDailyWhereInput
  }

  export type IntegrationConfigListRelationFilter = {
    every?: IntegrationConfigWhereInput
    some?: IntegrationConfigWhereInput
    none?: IntegrationConfigWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgentConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgentExecutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProposalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CostTrackingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NeuraMetricDailyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationConfigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationOrderByRelevanceInput = {
    fields: OrganizationOrderByRelevanceFieldEnum | OrganizationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    plan?: SortOrder
    industry?: SortOrder
    employeeCount?: SortOrder
    annualRevenueEur?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    id?: SortOrder
    employeeCount?: SortOrder
    annualRevenueEur?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    plan?: SortOrder
    industry?: SortOrder
    employeeCount?: SortOrder
    annualRevenueEur?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    plan?: SortOrder
    industry?: SortOrder
    employeeCount?: SortOrder
    annualRevenueEur?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    id?: SortOrder
    employeeCount?: SortOrder
    annualRevenueEur?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ChatFeedbackListRelationFilter = {
    every?: ChatFeedbackWhereInput
    some?: ChatFeedbackWhereInput
    none?: ChatFeedbackWhereInput
  }

  export type ApprovalListRelationFilter = {
    every?: ApprovalWhereInput
    some?: ApprovalWhereInput
    none?: ApprovalWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type UserConsentListRelationFilter = {
    every?: UserConsentWhereInput
    some?: UserConsentWhereInput
    none?: UserConsentWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserConsentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserOrganizationIdEmailCompoundUniqueInput = {
    organizationId: number
    email: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    department?: SortOrder
    hourlyRateEur?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    hourlyRateEur?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    department?: SortOrder
    hourlyRateEur?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    name?: SortOrder
    role?: SortOrder
    department?: SortOrder
    hourlyRateEur?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
    emailVerified?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    hourlyRateEur?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatOrderByRelevanceInput = {
    fields: ChatOrderByRelevanceFieldEnum | ChatOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChatSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ChatRelationFilter = {
    is?: ChatWhereInput
    isNot?: ChatWhereInput
  }

  export type ChatMessageOrderByRelevanceInput = {
    fields: ChatMessageOrderByRelevanceFieldEnum | ChatMessageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    model?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    latencyMs?: SortOrder
    functionCalls?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    latencyMs?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    model?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    latencyMs?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    model?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    latencyMs?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
    chatId?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    latencyMs?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ChatMessageRelationFilter = {
    is?: ChatMessageWhereInput
    isNot?: ChatMessageWhereInput
  }

  export type ChatFeedbackOrderByRelevanceInput = {
    fields: ChatFeedbackOrderByRelevanceFieldEnum | ChatFeedbackOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChatFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    feedbackText?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatFeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type ChatFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    feedbackText?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
    feedbackText?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatFeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    userId?: SortOrder
    rating?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AgentDefinitionOrderByRelevanceInput = {
    fields: AgentDefinitionOrderByRelevanceFieldEnum | AgentDefinitionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AgentDefinitionCountOrderByAggregateInput = {
    id?: SortOrder
    neuraId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    estimatedTimeSavedHours?: SortOrder
    estimatedRoiPercentage?: SortOrder
    tags?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AgentDefinitionAvgOrderByAggregateInput = {
    estimatedTimeSavedHours?: SortOrder
    estimatedRoiPercentage?: SortOrder
  }

  export type AgentDefinitionMaxOrderByAggregateInput = {
    id?: SortOrder
    neuraId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    estimatedTimeSavedHours?: SortOrder
    estimatedRoiPercentage?: SortOrder
    createdAt?: SortOrder
  }

  export type AgentDefinitionMinOrderByAggregateInput = {
    id?: SortOrder
    neuraId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    difficulty?: SortOrder
    estimatedTimeSavedHours?: SortOrder
    estimatedRoiPercentage?: SortOrder
    createdAt?: SortOrder
  }

  export type AgentDefinitionSumOrderByAggregateInput = {
    estimatedTimeSavedHours?: SortOrder
    estimatedRoiPercentage?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type AgentDefinitionRelationFilter = {
    is?: AgentDefinitionWhereInput
    isNot?: AgentDefinitionWhereInput
  }

  export type AgentConnectionOrderByRelevanceInput = {
    fields: AgentConnectionOrderByRelevanceFieldEnum | AgentConnectionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AgentConnectionOrganizationIdAgentIdCompoundUniqueInput = {
    organizationId: number
    agentId: string
  }

  export type AgentConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    provider?: SortOrder
    webhookUrl?: SortOrder
    apiKeyEncrypted?: SortOrder
    config?: SortOrder
    isActive?: SortOrder
    lastTestedAt?: SortOrder
    lastTestSuccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentConnectionAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
  }

  export type AgentConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    provider?: SortOrder
    webhookUrl?: SortOrder
    apiKeyEncrypted?: SortOrder
    isActive?: SortOrder
    lastTestedAt?: SortOrder
    lastTestSuccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    provider?: SortOrder
    webhookUrl?: SortOrder
    apiKeyEncrypted?: SortOrder
    isActive?: SortOrder
    lastTestedAt?: SortOrder
    lastTestSuccess?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgentConnectionSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type UuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type AgentExecutionOrderByRelevanceInput = {
    fields: AgentExecutionOrderByRelevanceFieldEnum | AgentExecutionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AgentExecutionCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    neuraId?: SortOrder
    chatMessageId?: SortOrder
    proposalId?: SortOrder
    parameters?: SortOrder
    result?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    durationMs?: SortOrder
    retryCount?: SortOrder
    idempotencyKey?: SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type AgentExecutionAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    chatMessageId?: SortOrder
    proposalId?: SortOrder
    durationMs?: SortOrder
    retryCount?: SortOrder
  }

  export type AgentExecutionMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    neuraId?: SortOrder
    chatMessageId?: SortOrder
    proposalId?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    durationMs?: SortOrder
    retryCount?: SortOrder
    idempotencyKey?: SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type AgentExecutionMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    neuraId?: SortOrder
    chatMessageId?: SortOrder
    proposalId?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    durationMs?: SortOrder
    retryCount?: SortOrder
    idempotencyKey?: SortOrder
    createdAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type AgentExecutionSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    chatMessageId?: SortOrder
    proposalId?: SortOrder
    durationMs?: SortOrder
    retryCount?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type UuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ProposalOrderByRelevanceInput = {
    fields: ProposalOrderByRelevanceFieldEnum | ProposalOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProposalCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdByUserId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    parameters?: SortOrder
    impactAnalysis?: SortOrder
    requiredApprovals?: SortOrder
    rollbackPlan?: SortOrder
    status?: SortOrder
    executedAt?: SortOrder
    executionResult?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deadlineAt?: SortOrder
  }

  export type ProposalAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdByUserId?: SortOrder
  }

  export type ProposalMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdByUserId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    rollbackPlan?: SortOrder
    status?: SortOrder
    executedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deadlineAt?: SortOrder
  }

  export type ProposalMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdByUserId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    description?: SortOrder
    rollbackPlan?: SortOrder
    status?: SortOrder
    executedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deadlineAt?: SortOrder
  }

  export type ProposalSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    createdByUserId?: SortOrder
  }

  export type ProposalRelationFilter = {
    is?: ProposalWhereInput
    isNot?: ProposalWhereInput
  }

  export type ApprovalOrderByRelevanceInput = {
    fields: ApprovalOrderByRelevanceFieldEnum | ApprovalOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ApprovalProposalIdUserIdCompoundUniqueInput = {
    proposalId: number
    userId: number
  }

  export type ApprovalCountOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    userId?: SortOrder
    roleRequired?: SortOrder
    approved?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovalAvgOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    userId?: SortOrder
  }

  export type ApprovalMaxOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    userId?: SortOrder
    roleRequired?: SortOrder
    approved?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovalMinOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    userId?: SortOrder
    roleRequired?: SortOrder
    approved?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovalSumOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AuditLogOrderByRelevanceInput = {
    fields: AuditLogOrderByRelevanceFieldEnum | AuditLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    beforeState?: SortOrder
    afterState?: SortOrder
    proposalId?: SortOrder
    approvedBy?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    correlationId?: SortOrder
    hash?: SortOrder
    previousHash?: SortOrder
    metadata?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    proposalId?: SortOrder
    approvedBy?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    proposalId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    correlationId?: SortOrder
    hash?: SortOrder
    previousHash?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    timestamp?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    neuraId?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    proposalId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    correlationId?: SortOrder
    hash?: SortOrder
    previousHash?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    proposalId?: SortOrder
    approvedBy?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type CostTrackingOrderByRelevanceInput = {
    fields: CostTrackingOrderByRelevanceFieldEnum | CostTrackingOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CostTrackingCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    neuraId?: SortOrder
    agentId?: SortOrder
    resourceType?: SortOrder
    resourceName?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    costUsd?: SortOrder
    model?: SortOrder
    timestamp?: SortOrder
  }

  export type CostTrackingAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    costUsd?: SortOrder
  }

  export type CostTrackingMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    neuraId?: SortOrder
    agentId?: SortOrder
    resourceType?: SortOrder
    resourceName?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    costUsd?: SortOrder
    model?: SortOrder
    timestamp?: SortOrder
  }

  export type CostTrackingMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    neuraId?: SortOrder
    agentId?: SortOrder
    resourceType?: SortOrder
    resourceName?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    costUsd?: SortOrder
    model?: SortOrder
    timestamp?: SortOrder
  }

  export type CostTrackingSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    tokensInput?: SortOrder
    tokensOutput?: SortOrder
    tokensReasoning?: SortOrder
    costEur?: SortOrder
    costUsd?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NeuraMetricDailyOrderByRelevanceInput = {
    fields: NeuraMetricDailyOrderByRelevanceFieldEnum | NeuraMetricDailyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NeuraMetricDailyOrganizationIdNeuraIdDateCompoundUniqueInput = {
    organizationId: number
    neuraId: string
    date: Date | string
  }

  export type NeuraMetricDailyCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    date?: SortOrder
    conversationsCount?: SortOrder
    messagesCount?: SortOrder
    agentExecutionsCount?: SortOrder
    timeSavedHours?: SortOrder
    valueGeneratedEur?: SortOrder
    costConsumedEur?: SortOrder
    roiPercentage?: SortOrder
    avgResponseTimeMs?: SortOrder
    errorCount?: SortOrder
    userSatisfactionAvg?: SortOrder
    createdAt?: SortOrder
  }

  export type NeuraMetricDailyAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    conversationsCount?: SortOrder
    messagesCount?: SortOrder
    agentExecutionsCount?: SortOrder
    timeSavedHours?: SortOrder
    valueGeneratedEur?: SortOrder
    costConsumedEur?: SortOrder
    roiPercentage?: SortOrder
    avgResponseTimeMs?: SortOrder
    errorCount?: SortOrder
    userSatisfactionAvg?: SortOrder
  }

  export type NeuraMetricDailyMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    date?: SortOrder
    conversationsCount?: SortOrder
    messagesCount?: SortOrder
    agentExecutionsCount?: SortOrder
    timeSavedHours?: SortOrder
    valueGeneratedEur?: SortOrder
    costConsumedEur?: SortOrder
    roiPercentage?: SortOrder
    avgResponseTimeMs?: SortOrder
    errorCount?: SortOrder
    userSatisfactionAvg?: SortOrder
    createdAt?: SortOrder
  }

  export type NeuraMetricDailyMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    neuraId?: SortOrder
    date?: SortOrder
    conversationsCount?: SortOrder
    messagesCount?: SortOrder
    agentExecutionsCount?: SortOrder
    timeSavedHours?: SortOrder
    valueGeneratedEur?: SortOrder
    costConsumedEur?: SortOrder
    roiPercentage?: SortOrder
    avgResponseTimeMs?: SortOrder
    errorCount?: SortOrder
    userSatisfactionAvg?: SortOrder
    createdAt?: SortOrder
  }

  export type NeuraMetricDailySumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    conversationsCount?: SortOrder
    messagesCount?: SortOrder
    agentExecutionsCount?: SortOrder
    timeSavedHours?: SortOrder
    valueGeneratedEur?: SortOrder
    costConsumedEur?: SortOrder
    roiPercentage?: SortOrder
    avgResponseTimeMs?: SortOrder
    errorCount?: SortOrder
    userSatisfactionAvg?: SortOrder
  }

  export type UserConsentOrderByRelevanceInput = {
    fields: UserConsentOrderByRelevanceFieldEnum | UserConsentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserConsentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type UserConsentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserConsentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type UserConsentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrder
  }

  export type UserConsentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PromptVersionOrderByRelevanceInput = {
    fields: PromptVersionOrderByRelevanceFieldEnum | PromptVersionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PromptVersionNeuraIdVersionCompoundUniqueInput = {
    neuraId: string
    version: number
  }

  export type PromptVersionCountOrderByAggregateInput = {
    id?: SortOrder
    neuraId?: SortOrder
    version?: SortOrder
    systemPrompt?: SortOrder
    contextTemplate?: SortOrder
    fewShotExamples?: SortOrder
    tools?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isActive?: SortOrder
    performanceScore?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type PromptVersionAvgOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    performanceScore?: SortOrder
    createdById?: SortOrder
  }

  export type PromptVersionMaxOrderByAggregateInput = {
    id?: SortOrder
    neuraId?: SortOrder
    version?: SortOrder
    systemPrompt?: SortOrder
    contextTemplate?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isActive?: SortOrder
    performanceScore?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type PromptVersionMinOrderByAggregateInput = {
    id?: SortOrder
    neuraId?: SortOrder
    version?: SortOrder
    systemPrompt?: SortOrder
    contextTemplate?: SortOrder
    model?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    isActive?: SortOrder
    performanceScore?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type PromptVersionSumOrderByAggregateInput = {
    id?: SortOrder
    version?: SortOrder
    temperature?: SortOrder
    maxTokens?: SortOrder
    performanceScore?: SortOrder
    createdById?: SortOrder
  }

  export type IntegrationSyncLogListRelationFilter = {
    every?: IntegrationSyncLogWhereInput
    some?: IntegrationSyncLogWhereInput
    none?: IntegrationSyncLogWhereInput
  }

  export type IntegrationSyncLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationConfigOrderByRelevanceInput = {
    fields: IntegrationConfigOrderByRelevanceFieldEnum | IntegrationConfigOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type IntegrationConfigOrganizationIdIntegrationTypeCompoundUniqueInput = {
    organizationId: number
    integrationType: string
  }

  export type IntegrationConfigCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    integrationType?: SortOrder
    credentialsEncrypted?: SortOrder
    config?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrder
    createdAt?: SortOrder
  }

  export type IntegrationConfigAvgOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type IntegrationConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    integrationType?: SortOrder
    credentialsEncrypted?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrder
    createdAt?: SortOrder
  }

  export type IntegrationConfigMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    integrationType?: SortOrder
    credentialsEncrypted?: SortOrder
    isActive?: SortOrder
    lastSyncAt?: SortOrder
    createdAt?: SortOrder
  }

  export type IntegrationConfigSumOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
  }

  export type IntegrationConfigRelationFilter = {
    is?: IntegrationConfigWhereInput
    isNot?: IntegrationConfigWhereInput
  }

  export type IntegrationSyncLogOrderByRelevanceInput = {
    fields: IntegrationSyncLogOrderByRelevanceFieldEnum | IntegrationSyncLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type IntegrationSyncLogCountOrderByAggregateInput = {
    id?: SortOrder
    integrationConfigId?: SortOrder
    syncType?: SortOrder
    recordsProcessed?: SortOrder
    recordsSuccess?: SortOrder
    recordsFailed?: SortOrder
    durationMs?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type IntegrationSyncLogAvgOrderByAggregateInput = {
    id?: SortOrder
    integrationConfigId?: SortOrder
    recordsProcessed?: SortOrder
    recordsSuccess?: SortOrder
    recordsFailed?: SortOrder
    durationMs?: SortOrder
  }

  export type IntegrationSyncLogMaxOrderByAggregateInput = {
    id?: SortOrder
    integrationConfigId?: SortOrder
    syncType?: SortOrder
    recordsProcessed?: SortOrder
    recordsSuccess?: SortOrder
    recordsFailed?: SortOrder
    durationMs?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type IntegrationSyncLogMinOrderByAggregateInput = {
    id?: SortOrder
    integrationConfigId?: SortOrder
    syncType?: SortOrder
    recordsProcessed?: SortOrder
    recordsSuccess?: SortOrder
    recordsFailed?: SortOrder
    durationMs?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type IntegrationSyncLogSumOrderByAggregateInput = {
    id?: SortOrder
    integrationConfigId?: SortOrder
    recordsProcessed?: SortOrder
    recordsSuccess?: SortOrder
    recordsFailed?: SortOrder
    durationMs?: SortOrder
  }

  export type NotificationOrderByRelevanceInput = {
    fields: NotificationOrderByRelevanceFieldEnum | NotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    channels?: SortOrder
    priority?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    readAt?: SortOrder
    actionUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ChatCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ChatCreateWithoutOrganizationInput, ChatUncheckedCreateWithoutOrganizationInput> | ChatCreateWithoutOrganizationInput[] | ChatUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutOrganizationInput | ChatCreateOrConnectWithoutOrganizationInput[]
    createMany?: ChatCreateManyOrganizationInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type AgentConnectionCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AgentConnectionCreateWithoutOrganizationInput, AgentConnectionUncheckedCreateWithoutOrganizationInput> | AgentConnectionCreateWithoutOrganizationInput[] | AgentConnectionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutOrganizationInput | AgentConnectionCreateOrConnectWithoutOrganizationInput[]
    createMany?: AgentConnectionCreateManyOrganizationInputEnvelope
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
  }

  export type AgentExecutionCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AgentExecutionCreateWithoutOrganizationInput, AgentExecutionUncheckedCreateWithoutOrganizationInput> | AgentExecutionCreateWithoutOrganizationInput[] | AgentExecutionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutOrganizationInput | AgentExecutionCreateOrConnectWithoutOrganizationInput[]
    createMany?: AgentExecutionCreateManyOrganizationInputEnvelope
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
  }

  export type ProposalCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProposalCreateWithoutOrganizationInput, ProposalUncheckedCreateWithoutOrganizationInput> | ProposalCreateWithoutOrganizationInput[] | ProposalUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutOrganizationInput | ProposalCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProposalCreateManyOrganizationInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type CostTrackingCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CostTrackingCreateWithoutOrganizationInput, CostTrackingUncheckedCreateWithoutOrganizationInput> | CostTrackingCreateWithoutOrganizationInput[] | CostTrackingUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CostTrackingCreateOrConnectWithoutOrganizationInput | CostTrackingCreateOrConnectWithoutOrganizationInput[]
    createMany?: CostTrackingCreateManyOrganizationInputEnvelope
    connect?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
  }

  export type NeuraMetricDailyCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<NeuraMetricDailyCreateWithoutOrganizationInput, NeuraMetricDailyUncheckedCreateWithoutOrganizationInput> | NeuraMetricDailyCreateWithoutOrganizationInput[] | NeuraMetricDailyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: NeuraMetricDailyCreateOrConnectWithoutOrganizationInput | NeuraMetricDailyCreateOrConnectWithoutOrganizationInput[]
    createMany?: NeuraMetricDailyCreateManyOrganizationInputEnvelope
    connect?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
  }

  export type IntegrationConfigCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<IntegrationConfigCreateWithoutOrganizationInput, IntegrationConfigUncheckedCreateWithoutOrganizationInput> | IntegrationConfigCreateWithoutOrganizationInput[] | IntegrationConfigUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationConfigCreateOrConnectWithoutOrganizationInput | IntegrationConfigCreateOrConnectWithoutOrganizationInput[]
    createMany?: IntegrationConfigCreateManyOrganizationInputEnvelope
    connect?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ChatUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ChatCreateWithoutOrganizationInput, ChatUncheckedCreateWithoutOrganizationInput> | ChatCreateWithoutOrganizationInput[] | ChatUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutOrganizationInput | ChatCreateOrConnectWithoutOrganizationInput[]
    createMany?: ChatCreateManyOrganizationInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AgentConnectionCreateWithoutOrganizationInput, AgentConnectionUncheckedCreateWithoutOrganizationInput> | AgentConnectionCreateWithoutOrganizationInput[] | AgentConnectionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutOrganizationInput | AgentConnectionCreateOrConnectWithoutOrganizationInput[]
    createMany?: AgentConnectionCreateManyOrganizationInputEnvelope
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
  }

  export type AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AgentExecutionCreateWithoutOrganizationInput, AgentExecutionUncheckedCreateWithoutOrganizationInput> | AgentExecutionCreateWithoutOrganizationInput[] | AgentExecutionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutOrganizationInput | AgentExecutionCreateOrConnectWithoutOrganizationInput[]
    createMany?: AgentExecutionCreateManyOrganizationInputEnvelope
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
  }

  export type ProposalUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProposalCreateWithoutOrganizationInput, ProposalUncheckedCreateWithoutOrganizationInput> | ProposalCreateWithoutOrganizationInput[] | ProposalUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutOrganizationInput | ProposalCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProposalCreateManyOrganizationInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<CostTrackingCreateWithoutOrganizationInput, CostTrackingUncheckedCreateWithoutOrganizationInput> | CostTrackingCreateWithoutOrganizationInput[] | CostTrackingUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CostTrackingCreateOrConnectWithoutOrganizationInput | CostTrackingCreateOrConnectWithoutOrganizationInput[]
    createMany?: CostTrackingCreateManyOrganizationInputEnvelope
    connect?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
  }

  export type NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<NeuraMetricDailyCreateWithoutOrganizationInput, NeuraMetricDailyUncheckedCreateWithoutOrganizationInput> | NeuraMetricDailyCreateWithoutOrganizationInput[] | NeuraMetricDailyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: NeuraMetricDailyCreateOrConnectWithoutOrganizationInput | NeuraMetricDailyCreateOrConnectWithoutOrganizationInput[]
    createMany?: NeuraMetricDailyCreateManyOrganizationInputEnvelope
    connect?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
  }

  export type IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<IntegrationConfigCreateWithoutOrganizationInput, IntegrationConfigUncheckedCreateWithoutOrganizationInput> | IntegrationConfigCreateWithoutOrganizationInput[] | IntegrationConfigUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationConfigCreateOrConnectWithoutOrganizationInput | IntegrationConfigCreateOrConnectWithoutOrganizationInput[]
    createMany?: IntegrationConfigCreateManyOrganizationInputEnvelope
    connect?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChatUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ChatCreateWithoutOrganizationInput, ChatUncheckedCreateWithoutOrganizationInput> | ChatCreateWithoutOrganizationInput[] | ChatUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutOrganizationInput | ChatCreateOrConnectWithoutOrganizationInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutOrganizationInput | ChatUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ChatCreateManyOrganizationInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutOrganizationInput | ChatUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutOrganizationInput | ChatUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type AgentConnectionUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AgentConnectionCreateWithoutOrganizationInput, AgentConnectionUncheckedCreateWithoutOrganizationInput> | AgentConnectionCreateWithoutOrganizationInput[] | AgentConnectionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutOrganizationInput | AgentConnectionCreateOrConnectWithoutOrganizationInput[]
    upsert?: AgentConnectionUpsertWithWhereUniqueWithoutOrganizationInput | AgentConnectionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AgentConnectionCreateManyOrganizationInputEnvelope
    set?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    disconnect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    delete?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    update?: AgentConnectionUpdateWithWhereUniqueWithoutOrganizationInput | AgentConnectionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AgentConnectionUpdateManyWithWhereWithoutOrganizationInput | AgentConnectionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
  }

  export type AgentExecutionUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AgentExecutionCreateWithoutOrganizationInput, AgentExecutionUncheckedCreateWithoutOrganizationInput> | AgentExecutionCreateWithoutOrganizationInput[] | AgentExecutionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutOrganizationInput | AgentExecutionCreateOrConnectWithoutOrganizationInput[]
    upsert?: AgentExecutionUpsertWithWhereUniqueWithoutOrganizationInput | AgentExecutionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AgentExecutionCreateManyOrganizationInputEnvelope
    set?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    disconnect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    delete?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    update?: AgentExecutionUpdateWithWhereUniqueWithoutOrganizationInput | AgentExecutionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AgentExecutionUpdateManyWithWhereWithoutOrganizationInput | AgentExecutionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
  }

  export type ProposalUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProposalCreateWithoutOrganizationInput, ProposalUncheckedCreateWithoutOrganizationInput> | ProposalCreateWithoutOrganizationInput[] | ProposalUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutOrganizationInput | ProposalCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutOrganizationInput | ProposalUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProposalCreateManyOrganizationInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutOrganizationInput | ProposalUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutOrganizationInput | ProposalUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutOrganizationInput | AuditLogUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutOrganizationInput | AuditLogUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutOrganizationInput | AuditLogUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type CostTrackingUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CostTrackingCreateWithoutOrganizationInput, CostTrackingUncheckedCreateWithoutOrganizationInput> | CostTrackingCreateWithoutOrganizationInput[] | CostTrackingUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CostTrackingCreateOrConnectWithoutOrganizationInput | CostTrackingCreateOrConnectWithoutOrganizationInput[]
    upsert?: CostTrackingUpsertWithWhereUniqueWithoutOrganizationInput | CostTrackingUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CostTrackingCreateManyOrganizationInputEnvelope
    set?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    disconnect?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    delete?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    connect?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    update?: CostTrackingUpdateWithWhereUniqueWithoutOrganizationInput | CostTrackingUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CostTrackingUpdateManyWithWhereWithoutOrganizationInput | CostTrackingUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CostTrackingScalarWhereInput | CostTrackingScalarWhereInput[]
  }

  export type NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<NeuraMetricDailyCreateWithoutOrganizationInput, NeuraMetricDailyUncheckedCreateWithoutOrganizationInput> | NeuraMetricDailyCreateWithoutOrganizationInput[] | NeuraMetricDailyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: NeuraMetricDailyCreateOrConnectWithoutOrganizationInput | NeuraMetricDailyCreateOrConnectWithoutOrganizationInput[]
    upsert?: NeuraMetricDailyUpsertWithWhereUniqueWithoutOrganizationInput | NeuraMetricDailyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: NeuraMetricDailyCreateManyOrganizationInputEnvelope
    set?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    disconnect?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    delete?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    connect?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    update?: NeuraMetricDailyUpdateWithWhereUniqueWithoutOrganizationInput | NeuraMetricDailyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: NeuraMetricDailyUpdateManyWithWhereWithoutOrganizationInput | NeuraMetricDailyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: NeuraMetricDailyScalarWhereInput | NeuraMetricDailyScalarWhereInput[]
  }

  export type IntegrationConfigUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<IntegrationConfigCreateWithoutOrganizationInput, IntegrationConfigUncheckedCreateWithoutOrganizationInput> | IntegrationConfigCreateWithoutOrganizationInput[] | IntegrationConfigUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationConfigCreateOrConnectWithoutOrganizationInput | IntegrationConfigCreateOrConnectWithoutOrganizationInput[]
    upsert?: IntegrationConfigUpsertWithWhereUniqueWithoutOrganizationInput | IntegrationConfigUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: IntegrationConfigCreateManyOrganizationInputEnvelope
    set?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    disconnect?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    delete?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    connect?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    update?: IntegrationConfigUpdateWithWhereUniqueWithoutOrganizationInput | IntegrationConfigUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: IntegrationConfigUpdateManyWithWhereWithoutOrganizationInput | IntegrationConfigUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: IntegrationConfigScalarWhereInput | IntegrationConfigScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChatUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ChatCreateWithoutOrganizationInput, ChatUncheckedCreateWithoutOrganizationInput> | ChatCreateWithoutOrganizationInput[] | ChatUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutOrganizationInput | ChatCreateOrConnectWithoutOrganizationInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutOrganizationInput | ChatUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ChatCreateManyOrganizationInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutOrganizationInput | ChatUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutOrganizationInput | ChatUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AgentConnectionCreateWithoutOrganizationInput, AgentConnectionUncheckedCreateWithoutOrganizationInput> | AgentConnectionCreateWithoutOrganizationInput[] | AgentConnectionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutOrganizationInput | AgentConnectionCreateOrConnectWithoutOrganizationInput[]
    upsert?: AgentConnectionUpsertWithWhereUniqueWithoutOrganizationInput | AgentConnectionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AgentConnectionCreateManyOrganizationInputEnvelope
    set?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    disconnect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    delete?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    update?: AgentConnectionUpdateWithWhereUniqueWithoutOrganizationInput | AgentConnectionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AgentConnectionUpdateManyWithWhereWithoutOrganizationInput | AgentConnectionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
  }

  export type AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AgentExecutionCreateWithoutOrganizationInput, AgentExecutionUncheckedCreateWithoutOrganizationInput> | AgentExecutionCreateWithoutOrganizationInput[] | AgentExecutionUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutOrganizationInput | AgentExecutionCreateOrConnectWithoutOrganizationInput[]
    upsert?: AgentExecutionUpsertWithWhereUniqueWithoutOrganizationInput | AgentExecutionUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AgentExecutionCreateManyOrganizationInputEnvelope
    set?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    disconnect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    delete?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    update?: AgentExecutionUpdateWithWhereUniqueWithoutOrganizationInput | AgentExecutionUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AgentExecutionUpdateManyWithWhereWithoutOrganizationInput | AgentExecutionUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
  }

  export type ProposalUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProposalCreateWithoutOrganizationInput, ProposalUncheckedCreateWithoutOrganizationInput> | ProposalCreateWithoutOrganizationInput[] | ProposalUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutOrganizationInput | ProposalCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutOrganizationInput | ProposalUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProposalCreateManyOrganizationInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutOrganizationInput | ProposalUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutOrganizationInput | ProposalUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput> | AuditLogCreateWithoutOrganizationInput[] | AuditLogUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutOrganizationInput | AuditLogCreateOrConnectWithoutOrganizationInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutOrganizationInput | AuditLogUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: AuditLogCreateManyOrganizationInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutOrganizationInput | AuditLogUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutOrganizationInput | AuditLogUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<CostTrackingCreateWithoutOrganizationInput, CostTrackingUncheckedCreateWithoutOrganizationInput> | CostTrackingCreateWithoutOrganizationInput[] | CostTrackingUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: CostTrackingCreateOrConnectWithoutOrganizationInput | CostTrackingCreateOrConnectWithoutOrganizationInput[]
    upsert?: CostTrackingUpsertWithWhereUniqueWithoutOrganizationInput | CostTrackingUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: CostTrackingCreateManyOrganizationInputEnvelope
    set?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    disconnect?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    delete?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    connect?: CostTrackingWhereUniqueInput | CostTrackingWhereUniqueInput[]
    update?: CostTrackingUpdateWithWhereUniqueWithoutOrganizationInput | CostTrackingUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: CostTrackingUpdateManyWithWhereWithoutOrganizationInput | CostTrackingUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: CostTrackingScalarWhereInput | CostTrackingScalarWhereInput[]
  }

  export type NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<NeuraMetricDailyCreateWithoutOrganizationInput, NeuraMetricDailyUncheckedCreateWithoutOrganizationInput> | NeuraMetricDailyCreateWithoutOrganizationInput[] | NeuraMetricDailyUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: NeuraMetricDailyCreateOrConnectWithoutOrganizationInput | NeuraMetricDailyCreateOrConnectWithoutOrganizationInput[]
    upsert?: NeuraMetricDailyUpsertWithWhereUniqueWithoutOrganizationInput | NeuraMetricDailyUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: NeuraMetricDailyCreateManyOrganizationInputEnvelope
    set?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    disconnect?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    delete?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    connect?: NeuraMetricDailyWhereUniqueInput | NeuraMetricDailyWhereUniqueInput[]
    update?: NeuraMetricDailyUpdateWithWhereUniqueWithoutOrganizationInput | NeuraMetricDailyUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: NeuraMetricDailyUpdateManyWithWhereWithoutOrganizationInput | NeuraMetricDailyUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: NeuraMetricDailyScalarWhereInput | NeuraMetricDailyScalarWhereInput[]
  }

  export type IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<IntegrationConfigCreateWithoutOrganizationInput, IntegrationConfigUncheckedCreateWithoutOrganizationInput> | IntegrationConfigCreateWithoutOrganizationInput[] | IntegrationConfigUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationConfigCreateOrConnectWithoutOrganizationInput | IntegrationConfigCreateOrConnectWithoutOrganizationInput[]
    upsert?: IntegrationConfigUpsertWithWhereUniqueWithoutOrganizationInput | IntegrationConfigUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: IntegrationConfigCreateManyOrganizationInputEnvelope
    set?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    disconnect?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    delete?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    connect?: IntegrationConfigWhereUniqueInput | IntegrationConfigWhereUniqueInput[]
    update?: IntegrationConfigUpdateWithWhereUniqueWithoutOrganizationInput | IntegrationConfigUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: IntegrationConfigUpdateManyWithWhereWithoutOrganizationInput | IntegrationConfigUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: IntegrationConfigScalarWhereInput | IntegrationConfigScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ChatCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type ChatFeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatFeedbackCreateWithoutUserInput, ChatFeedbackUncheckedCreateWithoutUserInput> | ChatFeedbackCreateWithoutUserInput[] | ChatFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutUserInput | ChatFeedbackCreateOrConnectWithoutUserInput[]
    createMany?: ChatFeedbackCreateManyUserInputEnvelope
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
  }

  export type AgentConnectionCreateNestedManyWithoutUserInput = {
    create?: XOR<AgentConnectionCreateWithoutUserInput, AgentConnectionUncheckedCreateWithoutUserInput> | AgentConnectionCreateWithoutUserInput[] | AgentConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutUserInput | AgentConnectionCreateOrConnectWithoutUserInput[]
    createMany?: AgentConnectionCreateManyUserInputEnvelope
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
  }

  export type AgentExecutionCreateNestedManyWithoutUserInput = {
    create?: XOR<AgentExecutionCreateWithoutUserInput, AgentExecutionUncheckedCreateWithoutUserInput> | AgentExecutionCreateWithoutUserInput[] | AgentExecutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutUserInput | AgentExecutionCreateOrConnectWithoutUserInput[]
    createMany?: AgentExecutionCreateManyUserInputEnvelope
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
  }

  export type ProposalCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProposalCreateWithoutCreatedByInput, ProposalUncheckedCreateWithoutCreatedByInput> | ProposalCreateWithoutCreatedByInput[] | ProposalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutCreatedByInput | ProposalCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProposalCreateManyCreatedByInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type ApprovalCreateNestedManyWithoutUserInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserConsentCreateNestedManyWithoutUserInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type ChatUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
  }

  export type ChatFeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatFeedbackCreateWithoutUserInput, ChatFeedbackUncheckedCreateWithoutUserInput> | ChatFeedbackCreateWithoutUserInput[] | ChatFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutUserInput | ChatFeedbackCreateOrConnectWithoutUserInput[]
    createMany?: ChatFeedbackCreateManyUserInputEnvelope
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
  }

  export type AgentConnectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AgentConnectionCreateWithoutUserInput, AgentConnectionUncheckedCreateWithoutUserInput> | AgentConnectionCreateWithoutUserInput[] | AgentConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutUserInput | AgentConnectionCreateOrConnectWithoutUserInput[]
    createMany?: AgentConnectionCreateManyUserInputEnvelope
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
  }

  export type AgentExecutionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AgentExecutionCreateWithoutUserInput, AgentExecutionUncheckedCreateWithoutUserInput> | AgentExecutionCreateWithoutUserInput[] | AgentExecutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutUserInput | AgentExecutionCreateOrConnectWithoutUserInput[]
    createMany?: AgentExecutionCreateManyUserInputEnvelope
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
  }

  export type ProposalUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProposalCreateWithoutCreatedByInput, ProposalUncheckedCreateWithoutCreatedByInput> | ProposalCreateWithoutCreatedByInput[] | ProposalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutCreatedByInput | ProposalCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProposalCreateManyCreatedByInputEnvelope
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserConsentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type OrganizationUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ChatUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUserInput | ChatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUserInput | ChatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUserInput | ChatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type ChatFeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatFeedbackCreateWithoutUserInput, ChatFeedbackUncheckedCreateWithoutUserInput> | ChatFeedbackCreateWithoutUserInput[] | ChatFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutUserInput | ChatFeedbackCreateOrConnectWithoutUserInput[]
    upsert?: ChatFeedbackUpsertWithWhereUniqueWithoutUserInput | ChatFeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatFeedbackCreateManyUserInputEnvelope
    set?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    disconnect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    delete?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    update?: ChatFeedbackUpdateWithWhereUniqueWithoutUserInput | ChatFeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatFeedbackUpdateManyWithWhereWithoutUserInput | ChatFeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatFeedbackScalarWhereInput | ChatFeedbackScalarWhereInput[]
  }

  export type AgentConnectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<AgentConnectionCreateWithoutUserInput, AgentConnectionUncheckedCreateWithoutUserInput> | AgentConnectionCreateWithoutUserInput[] | AgentConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutUserInput | AgentConnectionCreateOrConnectWithoutUserInput[]
    upsert?: AgentConnectionUpsertWithWhereUniqueWithoutUserInput | AgentConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AgentConnectionCreateManyUserInputEnvelope
    set?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    disconnect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    delete?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    update?: AgentConnectionUpdateWithWhereUniqueWithoutUserInput | AgentConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AgentConnectionUpdateManyWithWhereWithoutUserInput | AgentConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
  }

  export type AgentExecutionUpdateManyWithoutUserNestedInput = {
    create?: XOR<AgentExecutionCreateWithoutUserInput, AgentExecutionUncheckedCreateWithoutUserInput> | AgentExecutionCreateWithoutUserInput[] | AgentExecutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutUserInput | AgentExecutionCreateOrConnectWithoutUserInput[]
    upsert?: AgentExecutionUpsertWithWhereUniqueWithoutUserInput | AgentExecutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AgentExecutionCreateManyUserInputEnvelope
    set?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    disconnect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    delete?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    update?: AgentExecutionUpdateWithWhereUniqueWithoutUserInput | AgentExecutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AgentExecutionUpdateManyWithWhereWithoutUserInput | AgentExecutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
  }

  export type ProposalUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProposalCreateWithoutCreatedByInput, ProposalUncheckedCreateWithoutCreatedByInput> | ProposalCreateWithoutCreatedByInput[] | ProposalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutCreatedByInput | ProposalCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutCreatedByInput | ProposalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProposalCreateManyCreatedByInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutCreatedByInput | ProposalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutCreatedByInput | ProposalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type ApprovalUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutUserInput | ApprovalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutUserInput | ApprovalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutUserInput | ApprovalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserConsentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    upsert?: UserConsentUpsertWithWhereUniqueWithoutUserInput | UserConsentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    set?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    disconnect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    delete?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    update?: UserConsentUpdateWithWhereUniqueWithoutUserInput | UserConsentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserConsentUpdateManyWithWhereWithoutUserInput | UserConsentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type ChatUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput> | ChatCreateWithoutUserInput[] | ChatUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatCreateOrConnectWithoutUserInput | ChatCreateOrConnectWithoutUserInput[]
    upsert?: ChatUpsertWithWhereUniqueWithoutUserInput | ChatUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatCreateManyUserInputEnvelope
    set?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    disconnect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    delete?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    connect?: ChatWhereUniqueInput | ChatWhereUniqueInput[]
    update?: ChatUpdateWithWhereUniqueWithoutUserInput | ChatUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatUpdateManyWithWhereWithoutUserInput | ChatUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatScalarWhereInput | ChatScalarWhereInput[]
  }

  export type ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatFeedbackCreateWithoutUserInput, ChatFeedbackUncheckedCreateWithoutUserInput> | ChatFeedbackCreateWithoutUserInput[] | ChatFeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutUserInput | ChatFeedbackCreateOrConnectWithoutUserInput[]
    upsert?: ChatFeedbackUpsertWithWhereUniqueWithoutUserInput | ChatFeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatFeedbackCreateManyUserInputEnvelope
    set?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    disconnect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    delete?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    update?: ChatFeedbackUpdateWithWhereUniqueWithoutUserInput | ChatFeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatFeedbackUpdateManyWithWhereWithoutUserInput | ChatFeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatFeedbackScalarWhereInput | ChatFeedbackScalarWhereInput[]
  }

  export type AgentConnectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AgentConnectionCreateWithoutUserInput, AgentConnectionUncheckedCreateWithoutUserInput> | AgentConnectionCreateWithoutUserInput[] | AgentConnectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutUserInput | AgentConnectionCreateOrConnectWithoutUserInput[]
    upsert?: AgentConnectionUpsertWithWhereUniqueWithoutUserInput | AgentConnectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AgentConnectionCreateManyUserInputEnvelope
    set?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    disconnect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    delete?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    update?: AgentConnectionUpdateWithWhereUniqueWithoutUserInput | AgentConnectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AgentConnectionUpdateManyWithWhereWithoutUserInput | AgentConnectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
  }

  export type AgentExecutionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AgentExecutionCreateWithoutUserInput, AgentExecutionUncheckedCreateWithoutUserInput> | AgentExecutionCreateWithoutUserInput[] | AgentExecutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutUserInput | AgentExecutionCreateOrConnectWithoutUserInput[]
    upsert?: AgentExecutionUpsertWithWhereUniqueWithoutUserInput | AgentExecutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AgentExecutionCreateManyUserInputEnvelope
    set?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    disconnect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    delete?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    update?: AgentExecutionUpdateWithWhereUniqueWithoutUserInput | AgentExecutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AgentExecutionUpdateManyWithWhereWithoutUserInput | AgentExecutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
  }

  export type ProposalUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProposalCreateWithoutCreatedByInput, ProposalUncheckedCreateWithoutCreatedByInput> | ProposalCreateWithoutCreatedByInput[] | ProposalUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProposalCreateOrConnectWithoutCreatedByInput | ProposalCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProposalUpsertWithWhereUniqueWithoutCreatedByInput | ProposalUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProposalCreateManyCreatedByInputEnvelope
    set?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    disconnect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    delete?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    connect?: ProposalWhereUniqueInput | ProposalWhereUniqueInput[]
    update?: ProposalUpdateWithWhereUniqueWithoutCreatedByInput | ProposalUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProposalUpdateManyWithWhereWithoutCreatedByInput | ProposalUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput> | ApprovalCreateWithoutUserInput[] | ApprovalUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutUserInput | ApprovalCreateOrConnectWithoutUserInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutUserInput | ApprovalUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApprovalCreateManyUserInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutUserInput | ApprovalUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutUserInput | ApprovalUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserConsentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    upsert?: UserConsentUpsertWithWhereUniqueWithoutUserInput | UserConsentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    set?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    disconnect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    delete?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    update?: UserConsentUpdateWithWhereUniqueWithoutUserInput | UserConsentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserConsentUpdateManyWithWhereWithoutUserInput | UserConsentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutChatsInput = {
    create?: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatsInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutChatsInput = {
    create?: XOR<OrganizationCreateWithoutChatsInput, OrganizationUncheckedCreateWithoutChatsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutChatsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type ChatMessageCreateNestedManyWithoutChatInput = {
    create?: XOR<ChatMessageCreateWithoutChatInput, ChatMessageUncheckedCreateWithoutChatInput> | ChatMessageCreateWithoutChatInput[] | ChatMessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatInput | ChatMessageCreateOrConnectWithoutChatInput[]
    createMany?: ChatMessageCreateManyChatInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<ChatMessageCreateWithoutChatInput, ChatMessageUncheckedCreateWithoutChatInput> | ChatMessageCreateWithoutChatInput[] | ChatMessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatInput | ChatMessageCreateOrConnectWithoutChatInput[]
    createMany?: ChatMessageCreateManyChatInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutChatsNestedInput = {
    create?: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatsInput
    upsert?: UserUpsertWithoutChatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatsInput, UserUpdateWithoutChatsInput>, UserUncheckedUpdateWithoutChatsInput>
  }

  export type OrganizationUpdateOneRequiredWithoutChatsNestedInput = {
    create?: XOR<OrganizationCreateWithoutChatsInput, OrganizationUncheckedCreateWithoutChatsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutChatsInput
    upsert?: OrganizationUpsertWithoutChatsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutChatsInput, OrganizationUpdateWithoutChatsInput>, OrganizationUncheckedUpdateWithoutChatsInput>
  }

  export type ChatMessageUpdateManyWithoutChatNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChatInput, ChatMessageUncheckedCreateWithoutChatInput> | ChatMessageCreateWithoutChatInput[] | ChatMessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatInput | ChatMessageCreateOrConnectWithoutChatInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChatInput | ChatMessageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: ChatMessageCreateManyChatInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChatInput | ChatMessageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChatInput | ChatMessageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<ChatMessageCreateWithoutChatInput, ChatMessageUncheckedCreateWithoutChatInput> | ChatMessageCreateWithoutChatInput[] | ChatMessageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutChatInput | ChatMessageCreateOrConnectWithoutChatInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutChatInput | ChatMessageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: ChatMessageCreateManyChatInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutChatInput | ChatMessageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutChatInput | ChatMessageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    connect?: ChatWhereUniqueInput
  }

  export type ChatFeedbackCreateNestedManyWithoutMessageInput = {
    create?: XOR<ChatFeedbackCreateWithoutMessageInput, ChatFeedbackUncheckedCreateWithoutMessageInput> | ChatFeedbackCreateWithoutMessageInput[] | ChatFeedbackUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutMessageInput | ChatFeedbackCreateOrConnectWithoutMessageInput[]
    createMany?: ChatFeedbackCreateManyMessageInputEnvelope
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
  }

  export type ChatFeedbackUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<ChatFeedbackCreateWithoutMessageInput, ChatFeedbackUncheckedCreateWithoutMessageInput> | ChatFeedbackCreateWithoutMessageInput[] | ChatFeedbackUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutMessageInput | ChatFeedbackCreateOrConnectWithoutMessageInput[]
    createMany?: ChatFeedbackCreateManyMessageInputEnvelope
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
  }

  export type ChatUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    upsert?: ChatUpsertWithoutMessagesInput
    connect?: ChatWhereUniqueInput
    update?: XOR<XOR<ChatUpdateToOneWithWhereWithoutMessagesInput, ChatUpdateWithoutMessagesInput>, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatFeedbackUpdateManyWithoutMessageNestedInput = {
    create?: XOR<ChatFeedbackCreateWithoutMessageInput, ChatFeedbackUncheckedCreateWithoutMessageInput> | ChatFeedbackCreateWithoutMessageInput[] | ChatFeedbackUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutMessageInput | ChatFeedbackCreateOrConnectWithoutMessageInput[]
    upsert?: ChatFeedbackUpsertWithWhereUniqueWithoutMessageInput | ChatFeedbackUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: ChatFeedbackCreateManyMessageInputEnvelope
    set?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    disconnect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    delete?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    update?: ChatFeedbackUpdateWithWhereUniqueWithoutMessageInput | ChatFeedbackUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: ChatFeedbackUpdateManyWithWhereWithoutMessageInput | ChatFeedbackUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: ChatFeedbackScalarWhereInput | ChatFeedbackScalarWhereInput[]
  }

  export type ChatFeedbackUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<ChatFeedbackCreateWithoutMessageInput, ChatFeedbackUncheckedCreateWithoutMessageInput> | ChatFeedbackCreateWithoutMessageInput[] | ChatFeedbackUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: ChatFeedbackCreateOrConnectWithoutMessageInput | ChatFeedbackCreateOrConnectWithoutMessageInput[]
    upsert?: ChatFeedbackUpsertWithWhereUniqueWithoutMessageInput | ChatFeedbackUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: ChatFeedbackCreateManyMessageInputEnvelope
    set?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    disconnect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    delete?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    connect?: ChatFeedbackWhereUniqueInput | ChatFeedbackWhereUniqueInput[]
    update?: ChatFeedbackUpdateWithWhereUniqueWithoutMessageInput | ChatFeedbackUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: ChatFeedbackUpdateManyWithWhereWithoutMessageInput | ChatFeedbackUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: ChatFeedbackScalarWhereInput | ChatFeedbackScalarWhereInput[]
  }

  export type ChatMessageCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<ChatMessageCreateWithoutFeedbackInput, ChatMessageUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: ChatMessageCreateOrConnectWithoutFeedbackInput
    connect?: ChatMessageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatFeedbackInput = {
    create?: XOR<UserCreateWithoutChatFeedbackInput, UserUncheckedCreateWithoutChatFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type ChatMessageUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<ChatMessageCreateWithoutFeedbackInput, ChatMessageUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: ChatMessageCreateOrConnectWithoutFeedbackInput
    upsert?: ChatMessageUpsertWithoutFeedbackInput
    connect?: ChatMessageWhereUniqueInput
    update?: XOR<XOR<ChatMessageUpdateToOneWithWhereWithoutFeedbackInput, ChatMessageUpdateWithoutFeedbackInput>, ChatMessageUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateOneRequiredWithoutChatFeedbackNestedInput = {
    create?: XOR<UserCreateWithoutChatFeedbackInput, UserUncheckedCreateWithoutChatFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatFeedbackInput
    upsert?: UserUpsertWithoutChatFeedbackInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatFeedbackInput, UserUpdateWithoutChatFeedbackInput>, UserUncheckedUpdateWithoutChatFeedbackInput>
  }

  export type AgentDefinitionCreatetagsInput = {
    set: string[]
  }

  export type AgentConnectionCreateNestedManyWithoutAgentDefinitionInput = {
    create?: XOR<AgentConnectionCreateWithoutAgentDefinitionInput, AgentConnectionUncheckedCreateWithoutAgentDefinitionInput> | AgentConnectionCreateWithoutAgentDefinitionInput[] | AgentConnectionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutAgentDefinitionInput | AgentConnectionCreateOrConnectWithoutAgentDefinitionInput[]
    createMany?: AgentConnectionCreateManyAgentDefinitionInputEnvelope
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
  }

  export type AgentExecutionCreateNestedManyWithoutAgentDefinitionInput = {
    create?: XOR<AgentExecutionCreateWithoutAgentDefinitionInput, AgentExecutionUncheckedCreateWithoutAgentDefinitionInput> | AgentExecutionCreateWithoutAgentDefinitionInput[] | AgentExecutionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutAgentDefinitionInput | AgentExecutionCreateOrConnectWithoutAgentDefinitionInput[]
    createMany?: AgentExecutionCreateManyAgentDefinitionInputEnvelope
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
  }

  export type AgentConnectionUncheckedCreateNestedManyWithoutAgentDefinitionInput = {
    create?: XOR<AgentConnectionCreateWithoutAgentDefinitionInput, AgentConnectionUncheckedCreateWithoutAgentDefinitionInput> | AgentConnectionCreateWithoutAgentDefinitionInput[] | AgentConnectionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutAgentDefinitionInput | AgentConnectionCreateOrConnectWithoutAgentDefinitionInput[]
    createMany?: AgentConnectionCreateManyAgentDefinitionInputEnvelope
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
  }

  export type AgentExecutionUncheckedCreateNestedManyWithoutAgentDefinitionInput = {
    create?: XOR<AgentExecutionCreateWithoutAgentDefinitionInput, AgentExecutionUncheckedCreateWithoutAgentDefinitionInput> | AgentExecutionCreateWithoutAgentDefinitionInput[] | AgentExecutionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutAgentDefinitionInput | AgentExecutionCreateOrConnectWithoutAgentDefinitionInput[]
    createMany?: AgentExecutionCreateManyAgentDefinitionInputEnvelope
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
  }

  export type AgentDefinitionUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AgentConnectionUpdateManyWithoutAgentDefinitionNestedInput = {
    create?: XOR<AgentConnectionCreateWithoutAgentDefinitionInput, AgentConnectionUncheckedCreateWithoutAgentDefinitionInput> | AgentConnectionCreateWithoutAgentDefinitionInput[] | AgentConnectionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutAgentDefinitionInput | AgentConnectionCreateOrConnectWithoutAgentDefinitionInput[]
    upsert?: AgentConnectionUpsertWithWhereUniqueWithoutAgentDefinitionInput | AgentConnectionUpsertWithWhereUniqueWithoutAgentDefinitionInput[]
    createMany?: AgentConnectionCreateManyAgentDefinitionInputEnvelope
    set?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    disconnect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    delete?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    update?: AgentConnectionUpdateWithWhereUniqueWithoutAgentDefinitionInput | AgentConnectionUpdateWithWhereUniqueWithoutAgentDefinitionInput[]
    updateMany?: AgentConnectionUpdateManyWithWhereWithoutAgentDefinitionInput | AgentConnectionUpdateManyWithWhereWithoutAgentDefinitionInput[]
    deleteMany?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
  }

  export type AgentExecutionUpdateManyWithoutAgentDefinitionNestedInput = {
    create?: XOR<AgentExecutionCreateWithoutAgentDefinitionInput, AgentExecutionUncheckedCreateWithoutAgentDefinitionInput> | AgentExecutionCreateWithoutAgentDefinitionInput[] | AgentExecutionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutAgentDefinitionInput | AgentExecutionCreateOrConnectWithoutAgentDefinitionInput[]
    upsert?: AgentExecutionUpsertWithWhereUniqueWithoutAgentDefinitionInput | AgentExecutionUpsertWithWhereUniqueWithoutAgentDefinitionInput[]
    createMany?: AgentExecutionCreateManyAgentDefinitionInputEnvelope
    set?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    disconnect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    delete?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    update?: AgentExecutionUpdateWithWhereUniqueWithoutAgentDefinitionInput | AgentExecutionUpdateWithWhereUniqueWithoutAgentDefinitionInput[]
    updateMany?: AgentExecutionUpdateManyWithWhereWithoutAgentDefinitionInput | AgentExecutionUpdateManyWithWhereWithoutAgentDefinitionInput[]
    deleteMany?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
  }

  export type AgentConnectionUncheckedUpdateManyWithoutAgentDefinitionNestedInput = {
    create?: XOR<AgentConnectionCreateWithoutAgentDefinitionInput, AgentConnectionUncheckedCreateWithoutAgentDefinitionInput> | AgentConnectionCreateWithoutAgentDefinitionInput[] | AgentConnectionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentConnectionCreateOrConnectWithoutAgentDefinitionInput | AgentConnectionCreateOrConnectWithoutAgentDefinitionInput[]
    upsert?: AgentConnectionUpsertWithWhereUniqueWithoutAgentDefinitionInput | AgentConnectionUpsertWithWhereUniqueWithoutAgentDefinitionInput[]
    createMany?: AgentConnectionCreateManyAgentDefinitionInputEnvelope
    set?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    disconnect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    delete?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    connect?: AgentConnectionWhereUniqueInput | AgentConnectionWhereUniqueInput[]
    update?: AgentConnectionUpdateWithWhereUniqueWithoutAgentDefinitionInput | AgentConnectionUpdateWithWhereUniqueWithoutAgentDefinitionInput[]
    updateMany?: AgentConnectionUpdateManyWithWhereWithoutAgentDefinitionInput | AgentConnectionUpdateManyWithWhereWithoutAgentDefinitionInput[]
    deleteMany?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
  }

  export type AgentExecutionUncheckedUpdateManyWithoutAgentDefinitionNestedInput = {
    create?: XOR<AgentExecutionCreateWithoutAgentDefinitionInput, AgentExecutionUncheckedCreateWithoutAgentDefinitionInput> | AgentExecutionCreateWithoutAgentDefinitionInput[] | AgentExecutionUncheckedCreateWithoutAgentDefinitionInput[]
    connectOrCreate?: AgentExecutionCreateOrConnectWithoutAgentDefinitionInput | AgentExecutionCreateOrConnectWithoutAgentDefinitionInput[]
    upsert?: AgentExecutionUpsertWithWhereUniqueWithoutAgentDefinitionInput | AgentExecutionUpsertWithWhereUniqueWithoutAgentDefinitionInput[]
    createMany?: AgentExecutionCreateManyAgentDefinitionInputEnvelope
    set?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    disconnect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    delete?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    connect?: AgentExecutionWhereUniqueInput | AgentExecutionWhereUniqueInput[]
    update?: AgentExecutionUpdateWithWhereUniqueWithoutAgentDefinitionInput | AgentExecutionUpdateWithWhereUniqueWithoutAgentDefinitionInput[]
    updateMany?: AgentExecutionUpdateManyWithWhereWithoutAgentDefinitionInput | AgentExecutionUpdateManyWithWhereWithoutAgentDefinitionInput[]
    deleteMany?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutAgentConnectionsInput = {
    create?: XOR<OrganizationCreateWithoutAgentConnectionsInput, OrganizationUncheckedCreateWithoutAgentConnectionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAgentConnectionsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAgentConnectionsInput = {
    create?: XOR<UserCreateWithoutAgentConnectionsInput, UserUncheckedCreateWithoutAgentConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgentConnectionsInput
    connect?: UserWhereUniqueInput
  }

  export type AgentDefinitionCreateNestedOneWithoutConnectionsInput = {
    create?: XOR<AgentDefinitionCreateWithoutConnectionsInput, AgentDefinitionUncheckedCreateWithoutConnectionsInput>
    connectOrCreate?: AgentDefinitionCreateOrConnectWithoutConnectionsInput
    connect?: AgentDefinitionWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type OrganizationUpdateOneRequiredWithoutAgentConnectionsNestedInput = {
    create?: XOR<OrganizationCreateWithoutAgentConnectionsInput, OrganizationUncheckedCreateWithoutAgentConnectionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAgentConnectionsInput
    upsert?: OrganizationUpsertWithoutAgentConnectionsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutAgentConnectionsInput, OrganizationUpdateWithoutAgentConnectionsInput>, OrganizationUncheckedUpdateWithoutAgentConnectionsInput>
  }

  export type UserUpdateOneRequiredWithoutAgentConnectionsNestedInput = {
    create?: XOR<UserCreateWithoutAgentConnectionsInput, UserUncheckedCreateWithoutAgentConnectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgentConnectionsInput
    upsert?: UserUpsertWithoutAgentConnectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAgentConnectionsInput, UserUpdateWithoutAgentConnectionsInput>, UserUncheckedUpdateWithoutAgentConnectionsInput>
  }

  export type AgentDefinitionUpdateOneRequiredWithoutConnectionsNestedInput = {
    create?: XOR<AgentDefinitionCreateWithoutConnectionsInput, AgentDefinitionUncheckedCreateWithoutConnectionsInput>
    connectOrCreate?: AgentDefinitionCreateOrConnectWithoutConnectionsInput
    upsert?: AgentDefinitionUpsertWithoutConnectionsInput
    connect?: AgentDefinitionWhereUniqueInput
    update?: XOR<XOR<AgentDefinitionUpdateToOneWithWhereWithoutConnectionsInput, AgentDefinitionUpdateWithoutConnectionsInput>, AgentDefinitionUncheckedUpdateWithoutConnectionsInput>
  }

  export type OrganizationCreateNestedOneWithoutAgentExecutionsInput = {
    create?: XOR<OrganizationCreateWithoutAgentExecutionsInput, OrganizationUncheckedCreateWithoutAgentExecutionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAgentExecutionsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAgentExecutionsInput = {
    create?: XOR<UserCreateWithoutAgentExecutionsInput, UserUncheckedCreateWithoutAgentExecutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgentExecutionsInput
    connect?: UserWhereUniqueInput
  }

  export type AgentDefinitionCreateNestedOneWithoutExecutionsInput = {
    create?: XOR<AgentDefinitionCreateWithoutExecutionsInput, AgentDefinitionUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: AgentDefinitionCreateOrConnectWithoutExecutionsInput
    connect?: AgentDefinitionWhereUniqueInput
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type OrganizationUpdateOneRequiredWithoutAgentExecutionsNestedInput = {
    create?: XOR<OrganizationCreateWithoutAgentExecutionsInput, OrganizationUncheckedCreateWithoutAgentExecutionsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAgentExecutionsInput
    upsert?: OrganizationUpsertWithoutAgentExecutionsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutAgentExecutionsInput, OrganizationUpdateWithoutAgentExecutionsInput>, OrganizationUncheckedUpdateWithoutAgentExecutionsInput>
  }

  export type UserUpdateOneRequiredWithoutAgentExecutionsNestedInput = {
    create?: XOR<UserCreateWithoutAgentExecutionsInput, UserUncheckedCreateWithoutAgentExecutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgentExecutionsInput
    upsert?: UserUpsertWithoutAgentExecutionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAgentExecutionsInput, UserUpdateWithoutAgentExecutionsInput>, UserUncheckedUpdateWithoutAgentExecutionsInput>
  }

  export type AgentDefinitionUpdateOneRequiredWithoutExecutionsNestedInput = {
    create?: XOR<AgentDefinitionCreateWithoutExecutionsInput, AgentDefinitionUncheckedCreateWithoutExecutionsInput>
    connectOrCreate?: AgentDefinitionCreateOrConnectWithoutExecutionsInput
    upsert?: AgentDefinitionUpsertWithoutExecutionsInput
    connect?: AgentDefinitionWhereUniqueInput
    update?: XOR<XOR<AgentDefinitionUpdateToOneWithWhereWithoutExecutionsInput, AgentDefinitionUpdateWithoutExecutionsInput>, AgentDefinitionUncheckedUpdateWithoutExecutionsInput>
  }

  export type ProposalCreaterequiredApprovalsInput = {
    set: string[]
  }

  export type OrganizationCreateNestedOneWithoutProposalsInput = {
    create?: XOR<OrganizationCreateWithoutProposalsInput, OrganizationUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProposalsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProposalsCreatedInput = {
    create?: XOR<UserCreateWithoutProposalsCreatedInput, UserUncheckedCreateWithoutProposalsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProposalsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type ApprovalCreateNestedManyWithoutProposalInput = {
    create?: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput> | ApprovalCreateWithoutProposalInput[] | ApprovalUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProposalInput | ApprovalCreateOrConnectWithoutProposalInput[]
    createMany?: ApprovalCreateManyProposalInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type ApprovalUncheckedCreateNestedManyWithoutProposalInput = {
    create?: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput> | ApprovalCreateWithoutProposalInput[] | ApprovalUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProposalInput | ApprovalCreateOrConnectWithoutProposalInput[]
    createMany?: ApprovalCreateManyProposalInputEnvelope
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
  }

  export type ProposalUpdaterequiredApprovalsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type OrganizationUpdateOneRequiredWithoutProposalsNestedInput = {
    create?: XOR<OrganizationCreateWithoutProposalsInput, OrganizationUncheckedCreateWithoutProposalsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProposalsInput
    upsert?: OrganizationUpsertWithoutProposalsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutProposalsInput, OrganizationUpdateWithoutProposalsInput>, OrganizationUncheckedUpdateWithoutProposalsInput>
  }

  export type UserUpdateOneRequiredWithoutProposalsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutProposalsCreatedInput, UserUncheckedCreateWithoutProposalsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutProposalsCreatedInput
    upsert?: UserUpsertWithoutProposalsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProposalsCreatedInput, UserUpdateWithoutProposalsCreatedInput>, UserUncheckedUpdateWithoutProposalsCreatedInput>
  }

  export type ApprovalUpdateManyWithoutProposalNestedInput = {
    create?: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput> | ApprovalCreateWithoutProposalInput[] | ApprovalUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProposalInput | ApprovalCreateOrConnectWithoutProposalInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutProposalInput | ApprovalUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: ApprovalCreateManyProposalInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutProposalInput | ApprovalUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutProposalInput | ApprovalUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type ApprovalUncheckedUpdateManyWithoutProposalNestedInput = {
    create?: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput> | ApprovalCreateWithoutProposalInput[] | ApprovalUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: ApprovalCreateOrConnectWithoutProposalInput | ApprovalCreateOrConnectWithoutProposalInput[]
    upsert?: ApprovalUpsertWithWhereUniqueWithoutProposalInput | ApprovalUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: ApprovalCreateManyProposalInputEnvelope
    set?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    disconnect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    delete?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    connect?: ApprovalWhereUniqueInput | ApprovalWhereUniqueInput[]
    update?: ApprovalUpdateWithWhereUniqueWithoutProposalInput | ApprovalUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: ApprovalUpdateManyWithWhereWithoutProposalInput | ApprovalUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
  }

  export type ProposalCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutApprovalsInput
    connect?: ProposalWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsInput
    connect?: UserWhereUniqueInput
  }

  export type ProposalUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutApprovalsInput
    upsert?: ProposalUpsertWithoutApprovalsInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<XOR<ProposalUpdateToOneWithWhereWithoutApprovalsInput, ProposalUpdateWithoutApprovalsInput>, ProposalUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalsInput
    upsert?: UserUpsertWithoutApprovalsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovalsInput, UserUpdateWithoutApprovalsInput>, UserUncheckedUpdateWithoutApprovalsInput>
  }

  export type AuditLogCreateapprovedByInput = {
    set: number[]
  }

  export type OrganizationCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<OrganizationCreateWithoutAuditLogsInput, OrganizationUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAuditLogsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type AuditLogUpdateapprovedByInput = {
    set?: number[]
    push?: number | number[]
  }

  export type OrganizationUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<OrganizationCreateWithoutAuditLogsInput, OrganizationUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutAuditLogsInput
    upsert?: OrganizationUpsertWithoutAuditLogsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutAuditLogsInput, OrganizationUpdateWithoutAuditLogsInput>, OrganizationUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type OrganizationCreateNestedOneWithoutCostTrackingInput = {
    create?: XOR<OrganizationCreateWithoutCostTrackingInput, OrganizationUncheckedCreateWithoutCostTrackingInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCostTrackingInput
    connect?: OrganizationWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type OrganizationUpdateOneRequiredWithoutCostTrackingNestedInput = {
    create?: XOR<OrganizationCreateWithoutCostTrackingInput, OrganizationUncheckedCreateWithoutCostTrackingInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutCostTrackingInput
    upsert?: OrganizationUpsertWithoutCostTrackingInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutCostTrackingInput, OrganizationUpdateWithoutCostTrackingInput>, OrganizationUncheckedUpdateWithoutCostTrackingInput>
  }

  export type OrganizationCreateNestedOneWithoutNeuraMetricsInput = {
    create?: XOR<OrganizationCreateWithoutNeuraMetricsInput, OrganizationUncheckedCreateWithoutNeuraMetricsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutNeuraMetricsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutNeuraMetricsNestedInput = {
    create?: XOR<OrganizationCreateWithoutNeuraMetricsInput, OrganizationUncheckedCreateWithoutNeuraMetricsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutNeuraMetricsInput
    upsert?: OrganizationUpsertWithoutNeuraMetricsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutNeuraMetricsInput, OrganizationUpdateWithoutNeuraMetricsInput>, OrganizationUncheckedUpdateWithoutNeuraMetricsInput>
  }

  export type UserCreateNestedOneWithoutConsentsInput = {
    create?: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutConsentsNestedInput = {
    create?: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsentsInput
    upsert?: UserUpsertWithoutConsentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConsentsInput, UserUpdateWithoutConsentsInput>, UserUncheckedUpdateWithoutConsentsInput>
  }

  export type OrganizationCreateNestedOneWithoutIntegrationConfigsInput = {
    create?: XOR<OrganizationCreateWithoutIntegrationConfigsInput, OrganizationUncheckedCreateWithoutIntegrationConfigsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutIntegrationConfigsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type IntegrationSyncLogCreateNestedManyWithoutIntegrationConfigInput = {
    create?: XOR<IntegrationSyncLogCreateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput> | IntegrationSyncLogCreateWithoutIntegrationConfigInput[] | IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput[]
    connectOrCreate?: IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput | IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput[]
    createMany?: IntegrationSyncLogCreateManyIntegrationConfigInputEnvelope
    connect?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
  }

  export type IntegrationSyncLogUncheckedCreateNestedManyWithoutIntegrationConfigInput = {
    create?: XOR<IntegrationSyncLogCreateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput> | IntegrationSyncLogCreateWithoutIntegrationConfigInput[] | IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput[]
    connectOrCreate?: IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput | IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput[]
    createMany?: IntegrationSyncLogCreateManyIntegrationConfigInputEnvelope
    connect?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutIntegrationConfigsNestedInput = {
    create?: XOR<OrganizationCreateWithoutIntegrationConfigsInput, OrganizationUncheckedCreateWithoutIntegrationConfigsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutIntegrationConfigsInput
    upsert?: OrganizationUpsertWithoutIntegrationConfigsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutIntegrationConfigsInput, OrganizationUpdateWithoutIntegrationConfigsInput>, OrganizationUncheckedUpdateWithoutIntegrationConfigsInput>
  }

  export type IntegrationSyncLogUpdateManyWithoutIntegrationConfigNestedInput = {
    create?: XOR<IntegrationSyncLogCreateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput> | IntegrationSyncLogCreateWithoutIntegrationConfigInput[] | IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput[]
    connectOrCreate?: IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput | IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput[]
    upsert?: IntegrationSyncLogUpsertWithWhereUniqueWithoutIntegrationConfigInput | IntegrationSyncLogUpsertWithWhereUniqueWithoutIntegrationConfigInput[]
    createMany?: IntegrationSyncLogCreateManyIntegrationConfigInputEnvelope
    set?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    disconnect?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    delete?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    connect?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    update?: IntegrationSyncLogUpdateWithWhereUniqueWithoutIntegrationConfigInput | IntegrationSyncLogUpdateWithWhereUniqueWithoutIntegrationConfigInput[]
    updateMany?: IntegrationSyncLogUpdateManyWithWhereWithoutIntegrationConfigInput | IntegrationSyncLogUpdateManyWithWhereWithoutIntegrationConfigInput[]
    deleteMany?: IntegrationSyncLogScalarWhereInput | IntegrationSyncLogScalarWhereInput[]
  }

  export type IntegrationSyncLogUncheckedUpdateManyWithoutIntegrationConfigNestedInput = {
    create?: XOR<IntegrationSyncLogCreateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput> | IntegrationSyncLogCreateWithoutIntegrationConfigInput[] | IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput[]
    connectOrCreate?: IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput | IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput[]
    upsert?: IntegrationSyncLogUpsertWithWhereUniqueWithoutIntegrationConfigInput | IntegrationSyncLogUpsertWithWhereUniqueWithoutIntegrationConfigInput[]
    createMany?: IntegrationSyncLogCreateManyIntegrationConfigInputEnvelope
    set?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    disconnect?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    delete?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    connect?: IntegrationSyncLogWhereUniqueInput | IntegrationSyncLogWhereUniqueInput[]
    update?: IntegrationSyncLogUpdateWithWhereUniqueWithoutIntegrationConfigInput | IntegrationSyncLogUpdateWithWhereUniqueWithoutIntegrationConfigInput[]
    updateMany?: IntegrationSyncLogUpdateManyWithWhereWithoutIntegrationConfigInput | IntegrationSyncLogUpdateManyWithWhereWithoutIntegrationConfigInput[]
    deleteMany?: IntegrationSyncLogScalarWhereInput | IntegrationSyncLogScalarWhereInput[]
  }

  export type IntegrationConfigCreateNestedOneWithoutSyncLogsInput = {
    create?: XOR<IntegrationConfigCreateWithoutSyncLogsInput, IntegrationConfigUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: IntegrationConfigCreateOrConnectWithoutSyncLogsInput
    connect?: IntegrationConfigWhereUniqueInput
  }

  export type IntegrationConfigUpdateOneRequiredWithoutSyncLogsNestedInput = {
    create?: XOR<IntegrationConfigCreateWithoutSyncLogsInput, IntegrationConfigUncheckedCreateWithoutSyncLogsInput>
    connectOrCreate?: IntegrationConfigCreateOrConnectWithoutSyncLogsInput
    upsert?: IntegrationConfigUpsertWithoutSyncLogsInput
    connect?: IntegrationConfigWhereUniqueInput
    update?: XOR<XOR<IntegrationConfigUpdateToOneWithWhereWithoutSyncLogsInput, IntegrationConfigUpdateWithoutSyncLogsInput>, IntegrationConfigUncheckedUpdateWithoutSyncLogsInput>
  }

  export type NotificationCreatechannelsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationUpdatechannelsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedUuidNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedUuidNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedUuidNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type UserCreateWithoutOrganizationInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutOrganizationInput = {
    id?: bigint | number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatsInput
    messages?: ChatMessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutOrganizationInput = {
    id?: bigint | number
    userId: number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutOrganizationInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutOrganizationInput, ChatUncheckedCreateWithoutOrganizationInput>
  }

  export type ChatCreateManyOrganizationInputEnvelope = {
    data: ChatCreateManyOrganizationInput | ChatCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type AgentConnectionCreateWithoutOrganizationInput = {
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAgentConnectionsInput
    agentDefinition: AgentDefinitionCreateNestedOneWithoutConnectionsInput
  }

  export type AgentConnectionUncheckedCreateWithoutOrganizationInput = {
    id?: number
    userId: number
    agentId: string
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentConnectionCreateOrConnectWithoutOrganizationInput = {
    where: AgentConnectionWhereUniqueInput
    create: XOR<AgentConnectionCreateWithoutOrganizationInput, AgentConnectionUncheckedCreateWithoutOrganizationInput>
  }

  export type AgentConnectionCreateManyOrganizationInputEnvelope = {
    data: AgentConnectionCreateManyOrganizationInput | AgentConnectionCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type AgentExecutionCreateWithoutOrganizationInput = {
    id?: bigint | number
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    user: UserCreateNestedOneWithoutAgentExecutionsInput
    agentDefinition: AgentDefinitionCreateNestedOneWithoutExecutionsInput
  }

  export type AgentExecutionUncheckedCreateWithoutOrganizationInput = {
    id?: bigint | number
    userId: number
    agentId: string
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type AgentExecutionCreateOrConnectWithoutOrganizationInput = {
    where: AgentExecutionWhereUniqueInput
    create: XOR<AgentExecutionCreateWithoutOrganizationInput, AgentExecutionUncheckedCreateWithoutOrganizationInput>
  }

  export type AgentExecutionCreateManyOrganizationInputEnvelope = {
    data: AgentExecutionCreateManyOrganizationInput | AgentExecutionCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ProposalCreateWithoutOrganizationInput = {
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
    createdBy: UserCreateNestedOneWithoutProposalsCreatedInput
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
  }

  export type ProposalUncheckedCreateWithoutOrganizationInput = {
    id?: number
    createdByUserId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
  }

  export type ProposalCreateOrConnectWithoutOrganizationInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutOrganizationInput, ProposalUncheckedCreateWithoutOrganizationInput>
  }

  export type ProposalCreateManyOrganizationInputEnvelope = {
    data: ProposalCreateManyOrganizationInput | ProposalCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutOrganizationInput = {
    id?: bigint | number
    timestamp?: Date | string
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutOrganizationInput = {
    id?: bigint | number
    timestamp?: Date | string
    userId?: number | null
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogCreateOrConnectWithoutOrganizationInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput>
  }

  export type AuditLogCreateManyOrganizationInputEnvelope = {
    data: AuditLogCreateManyOrganizationInput | AuditLogCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type CostTrackingCreateWithoutOrganizationInput = {
    id?: bigint | number
    userId?: number | null
    neuraId?: string | null
    agentId?: string | null
    resourceType: string
    resourceName?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur: Decimal | DecimalJsLike | number | string
    costUsd?: Decimal | DecimalJsLike | number | string | null
    model?: string | null
    timestamp?: Date | string
  }

  export type CostTrackingUncheckedCreateWithoutOrganizationInput = {
    id?: bigint | number
    userId?: number | null
    neuraId?: string | null
    agentId?: string | null
    resourceType: string
    resourceName?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur: Decimal | DecimalJsLike | number | string
    costUsd?: Decimal | DecimalJsLike | number | string | null
    model?: string | null
    timestamp?: Date | string
  }

  export type CostTrackingCreateOrConnectWithoutOrganizationInput = {
    where: CostTrackingWhereUniqueInput
    create: XOR<CostTrackingCreateWithoutOrganizationInput, CostTrackingUncheckedCreateWithoutOrganizationInput>
  }

  export type CostTrackingCreateManyOrganizationInputEnvelope = {
    data: CostTrackingCreateManyOrganizationInput | CostTrackingCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type NeuraMetricDailyCreateWithoutOrganizationInput = {
    neuraId: string
    date: Date | string
    conversationsCount?: number
    messagesCount?: number
    agentExecutionsCount?: number
    timeSavedHours?: Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: Decimal | DecimalJsLike | number | string
    costConsumedEur?: Decimal | DecimalJsLike | number | string
    roiPercentage?: Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: number | null
    errorCount?: number
    userSatisfactionAvg?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type NeuraMetricDailyUncheckedCreateWithoutOrganizationInput = {
    id?: number
    neuraId: string
    date: Date | string
    conversationsCount?: number
    messagesCount?: number
    agentExecutionsCount?: number
    timeSavedHours?: Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: Decimal | DecimalJsLike | number | string
    costConsumedEur?: Decimal | DecimalJsLike | number | string
    roiPercentage?: Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: number | null
    errorCount?: number
    userSatisfactionAvg?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type NeuraMetricDailyCreateOrConnectWithoutOrganizationInput = {
    where: NeuraMetricDailyWhereUniqueInput
    create: XOR<NeuraMetricDailyCreateWithoutOrganizationInput, NeuraMetricDailyUncheckedCreateWithoutOrganizationInput>
  }

  export type NeuraMetricDailyCreateManyOrganizationInputEnvelope = {
    data: NeuraMetricDailyCreateManyOrganizationInput | NeuraMetricDailyCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationConfigCreateWithoutOrganizationInput = {
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    syncLogs?: IntegrationSyncLogCreateNestedManyWithoutIntegrationConfigInput
  }

  export type IntegrationConfigUncheckedCreateWithoutOrganizationInput = {
    id?: number
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    syncLogs?: IntegrationSyncLogUncheckedCreateNestedManyWithoutIntegrationConfigInput
  }

  export type IntegrationConfigCreateOrConnectWithoutOrganizationInput = {
    where: IntegrationConfigWhereUniqueInput
    create: XOR<IntegrationConfigCreateWithoutOrganizationInput, IntegrationConfigUncheckedCreateWithoutOrganizationInput>
  }

  export type IntegrationConfigCreateManyOrganizationInputEnvelope = {
    data: IntegrationConfigCreateManyOrganizationInput | IntegrationConfigCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    organizationId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    department?: StringNullableFilter<"User"> | string | null
    hourlyRateEur?: DecimalNullableFilter<"User"> | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type ChatUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutOrganizationInput, ChatUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ChatCreateWithoutOrganizationInput, ChatUncheckedCreateWithoutOrganizationInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutOrganizationInput, ChatUncheckedUpdateWithoutOrganizationInput>
  }

  export type ChatUpdateManyWithWhereWithoutOrganizationInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ChatScalarWhereInput = {
    AND?: ChatScalarWhereInput | ChatScalarWhereInput[]
    OR?: ChatScalarWhereInput[]
    NOT?: ChatScalarWhereInput | ChatScalarWhereInput[]
    id?: BigIntFilter<"Chat"> | bigint | number
    userId?: IntFilter<"Chat"> | number
    organizationId?: IntFilter<"Chat"> | number
    neuraId?: StringFilter<"Chat"> | string
    title?: StringNullableFilter<"Chat"> | string | null
    createdAt?: DateTimeFilter<"Chat"> | Date | string
    updatedAt?: DateTimeFilter<"Chat"> | Date | string
  }

  export type AgentConnectionUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: AgentConnectionWhereUniqueInput
    update: XOR<AgentConnectionUpdateWithoutOrganizationInput, AgentConnectionUncheckedUpdateWithoutOrganizationInput>
    create: XOR<AgentConnectionCreateWithoutOrganizationInput, AgentConnectionUncheckedCreateWithoutOrganizationInput>
  }

  export type AgentConnectionUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: AgentConnectionWhereUniqueInput
    data: XOR<AgentConnectionUpdateWithoutOrganizationInput, AgentConnectionUncheckedUpdateWithoutOrganizationInput>
  }

  export type AgentConnectionUpdateManyWithWhereWithoutOrganizationInput = {
    where: AgentConnectionScalarWhereInput
    data: XOR<AgentConnectionUpdateManyMutationInput, AgentConnectionUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type AgentConnectionScalarWhereInput = {
    AND?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
    OR?: AgentConnectionScalarWhereInput[]
    NOT?: AgentConnectionScalarWhereInput | AgentConnectionScalarWhereInput[]
    id?: IntFilter<"AgentConnection"> | number
    organizationId?: IntFilter<"AgentConnection"> | number
    userId?: IntFilter<"AgentConnection"> | number
    agentId?: StringFilter<"AgentConnection"> | string
    provider?: StringFilter<"AgentConnection"> | string
    webhookUrl?: StringNullableFilter<"AgentConnection"> | string | null
    apiKeyEncrypted?: StringNullableFilter<"AgentConnection"> | string | null
    config?: JsonNullableFilter<"AgentConnection">
    isActive?: BoolFilter<"AgentConnection"> | boolean
    lastTestedAt?: DateTimeNullableFilter<"AgentConnection"> | Date | string | null
    lastTestSuccess?: BoolNullableFilter<"AgentConnection"> | boolean | null
    createdAt?: DateTimeFilter<"AgentConnection"> | Date | string
    updatedAt?: DateTimeFilter<"AgentConnection"> | Date | string
  }

  export type AgentExecutionUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: AgentExecutionWhereUniqueInput
    update: XOR<AgentExecutionUpdateWithoutOrganizationInput, AgentExecutionUncheckedUpdateWithoutOrganizationInput>
    create: XOR<AgentExecutionCreateWithoutOrganizationInput, AgentExecutionUncheckedCreateWithoutOrganizationInput>
  }

  export type AgentExecutionUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: AgentExecutionWhereUniqueInput
    data: XOR<AgentExecutionUpdateWithoutOrganizationInput, AgentExecutionUncheckedUpdateWithoutOrganizationInput>
  }

  export type AgentExecutionUpdateManyWithWhereWithoutOrganizationInput = {
    where: AgentExecutionScalarWhereInput
    data: XOR<AgentExecutionUpdateManyMutationInput, AgentExecutionUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type AgentExecutionScalarWhereInput = {
    AND?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
    OR?: AgentExecutionScalarWhereInput[]
    NOT?: AgentExecutionScalarWhereInput | AgentExecutionScalarWhereInput[]
    id?: BigIntFilter<"AgentExecution"> | bigint | number
    organizationId?: IntFilter<"AgentExecution"> | number
    userId?: IntFilter<"AgentExecution"> | number
    agentId?: StringFilter<"AgentExecution"> | string
    neuraId?: StringNullableFilter<"AgentExecution"> | string | null
    chatMessageId?: BigIntNullableFilter<"AgentExecution"> | bigint | number | null
    proposalId?: IntNullableFilter<"AgentExecution"> | number | null
    parameters?: JsonNullableFilter<"AgentExecution">
    result?: JsonNullableFilter<"AgentExecution">
    status?: StringFilter<"AgentExecution"> | string
    errorMessage?: StringNullableFilter<"AgentExecution"> | string | null
    durationMs?: IntNullableFilter<"AgentExecution"> | number | null
    retryCount?: IntFilter<"AgentExecution"> | number
    idempotencyKey?: UuidNullableFilter<"AgentExecution"> | string | null
    createdAt?: DateTimeFilter<"AgentExecution"> | Date | string
    startedAt?: DateTimeNullableFilter<"AgentExecution"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"AgentExecution"> | Date | string | null
  }

  export type ProposalUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ProposalWhereUniqueInput
    update: XOR<ProposalUpdateWithoutOrganizationInput, ProposalUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ProposalCreateWithoutOrganizationInput, ProposalUncheckedCreateWithoutOrganizationInput>
  }

  export type ProposalUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ProposalWhereUniqueInput
    data: XOR<ProposalUpdateWithoutOrganizationInput, ProposalUncheckedUpdateWithoutOrganizationInput>
  }

  export type ProposalUpdateManyWithWhereWithoutOrganizationInput = {
    where: ProposalScalarWhereInput
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ProposalScalarWhereInput = {
    AND?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
    OR?: ProposalScalarWhereInput[]
    NOT?: ProposalScalarWhereInput | ProposalScalarWhereInput[]
    id?: IntFilter<"Proposal"> | number
    organizationId?: IntFilter<"Proposal"> | number
    createdByUserId?: IntFilter<"Proposal"> | number
    neuraId?: StringFilter<"Proposal"> | string
    action?: StringFilter<"Proposal"> | string
    description?: StringFilter<"Proposal"> | string
    parameters?: JsonFilter<"Proposal">
    impactAnalysis?: JsonNullableFilter<"Proposal">
    requiredApprovals?: StringNullableListFilter<"Proposal">
    rollbackPlan?: StringNullableFilter<"Proposal"> | string | null
    status?: StringFilter<"Proposal"> | string
    executedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    executionResult?: JsonNullableFilter<"Proposal">
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    updatedAt?: DateTimeFilter<"Proposal"> | Date | string
    deadlineAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
  }

  export type AuditLogUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutOrganizationInput, AuditLogUncheckedUpdateWithoutOrganizationInput>
    create: XOR<AuditLogCreateWithoutOrganizationInput, AuditLogUncheckedCreateWithoutOrganizationInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutOrganizationInput, AuditLogUncheckedUpdateWithoutOrganizationInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutOrganizationInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: BigIntFilter<"AuditLog"> | bigint | number
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    organizationId?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    neuraId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    entityType?: StringNullableFilter<"AuditLog"> | string | null
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    beforeState?: JsonNullableFilter<"AuditLog">
    afterState?: JsonNullableFilter<"AuditLog">
    proposalId?: IntNullableFilter<"AuditLog"> | number | null
    approvedBy?: IntNullableListFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    correlationId?: UuidFilter<"AuditLog"> | string
    hash?: StringFilter<"AuditLog"> | string
    previousHash?: StringNullableFilter<"AuditLog"> | string | null
    metadata?: JsonNullableFilter<"AuditLog">
  }

  export type CostTrackingUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: CostTrackingWhereUniqueInput
    update: XOR<CostTrackingUpdateWithoutOrganizationInput, CostTrackingUncheckedUpdateWithoutOrganizationInput>
    create: XOR<CostTrackingCreateWithoutOrganizationInput, CostTrackingUncheckedCreateWithoutOrganizationInput>
  }

  export type CostTrackingUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: CostTrackingWhereUniqueInput
    data: XOR<CostTrackingUpdateWithoutOrganizationInput, CostTrackingUncheckedUpdateWithoutOrganizationInput>
  }

  export type CostTrackingUpdateManyWithWhereWithoutOrganizationInput = {
    where: CostTrackingScalarWhereInput
    data: XOR<CostTrackingUpdateManyMutationInput, CostTrackingUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type CostTrackingScalarWhereInput = {
    AND?: CostTrackingScalarWhereInput | CostTrackingScalarWhereInput[]
    OR?: CostTrackingScalarWhereInput[]
    NOT?: CostTrackingScalarWhereInput | CostTrackingScalarWhereInput[]
    id?: BigIntFilter<"CostTracking"> | bigint | number
    organizationId?: IntFilter<"CostTracking"> | number
    userId?: IntNullableFilter<"CostTracking"> | number | null
    neuraId?: StringNullableFilter<"CostTracking"> | string | null
    agentId?: StringNullableFilter<"CostTracking"> | string | null
    resourceType?: StringFilter<"CostTracking"> | string
    resourceName?: StringNullableFilter<"CostTracking"> | string | null
    tokensInput?: IntNullableFilter<"CostTracking"> | number | null
    tokensOutput?: IntNullableFilter<"CostTracking"> | number | null
    tokensReasoning?: IntNullableFilter<"CostTracking"> | number | null
    costEur?: DecimalFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string
    costUsd?: DecimalNullableFilter<"CostTracking"> | Decimal | DecimalJsLike | number | string | null
    model?: StringNullableFilter<"CostTracking"> | string | null
    timestamp?: DateTimeFilter<"CostTracking"> | Date | string
  }

  export type NeuraMetricDailyUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: NeuraMetricDailyWhereUniqueInput
    update: XOR<NeuraMetricDailyUpdateWithoutOrganizationInput, NeuraMetricDailyUncheckedUpdateWithoutOrganizationInput>
    create: XOR<NeuraMetricDailyCreateWithoutOrganizationInput, NeuraMetricDailyUncheckedCreateWithoutOrganizationInput>
  }

  export type NeuraMetricDailyUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: NeuraMetricDailyWhereUniqueInput
    data: XOR<NeuraMetricDailyUpdateWithoutOrganizationInput, NeuraMetricDailyUncheckedUpdateWithoutOrganizationInput>
  }

  export type NeuraMetricDailyUpdateManyWithWhereWithoutOrganizationInput = {
    where: NeuraMetricDailyScalarWhereInput
    data: XOR<NeuraMetricDailyUpdateManyMutationInput, NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type NeuraMetricDailyScalarWhereInput = {
    AND?: NeuraMetricDailyScalarWhereInput | NeuraMetricDailyScalarWhereInput[]
    OR?: NeuraMetricDailyScalarWhereInput[]
    NOT?: NeuraMetricDailyScalarWhereInput | NeuraMetricDailyScalarWhereInput[]
    id?: IntFilter<"NeuraMetricDaily"> | number
    organizationId?: IntFilter<"NeuraMetricDaily"> | number
    neuraId?: StringFilter<"NeuraMetricDaily"> | string
    date?: DateTimeFilter<"NeuraMetricDaily"> | Date | string
    conversationsCount?: IntFilter<"NeuraMetricDaily"> | number
    messagesCount?: IntFilter<"NeuraMetricDaily"> | number
    agentExecutionsCount?: IntFilter<"NeuraMetricDaily"> | number
    timeSavedHours?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string
    roiPercentage?: DecimalNullableFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: IntNullableFilter<"NeuraMetricDaily"> | number | null
    errorCount?: IntFilter<"NeuraMetricDaily"> | number
    userSatisfactionAvg?: DecimalNullableFilter<"NeuraMetricDaily"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"NeuraMetricDaily"> | Date | string
  }

  export type IntegrationConfigUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: IntegrationConfigWhereUniqueInput
    update: XOR<IntegrationConfigUpdateWithoutOrganizationInput, IntegrationConfigUncheckedUpdateWithoutOrganizationInput>
    create: XOR<IntegrationConfigCreateWithoutOrganizationInput, IntegrationConfigUncheckedCreateWithoutOrganizationInput>
  }

  export type IntegrationConfigUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: IntegrationConfigWhereUniqueInput
    data: XOR<IntegrationConfigUpdateWithoutOrganizationInput, IntegrationConfigUncheckedUpdateWithoutOrganizationInput>
  }

  export type IntegrationConfigUpdateManyWithWhereWithoutOrganizationInput = {
    where: IntegrationConfigScalarWhereInput
    data: XOR<IntegrationConfigUpdateManyMutationInput, IntegrationConfigUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type IntegrationConfigScalarWhereInput = {
    AND?: IntegrationConfigScalarWhereInput | IntegrationConfigScalarWhereInput[]
    OR?: IntegrationConfigScalarWhereInput[]
    NOT?: IntegrationConfigScalarWhereInput | IntegrationConfigScalarWhereInput[]
    id?: IntFilter<"IntegrationConfig"> | number
    organizationId?: IntFilter<"IntegrationConfig"> | number
    integrationType?: StringFilter<"IntegrationConfig"> | string
    credentialsEncrypted?: StringFilter<"IntegrationConfig"> | string
    config?: JsonNullableFilter<"IntegrationConfig">
    isActive?: BoolFilter<"IntegrationConfig"> | boolean
    lastSyncAt?: DateTimeNullableFilter<"IntegrationConfig"> | Date | string | null
    createdAt?: DateTimeFilter<"IntegrationConfig"> | Date | string
  }

  export type OrganizationCreateWithoutUsersInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    refreshToken: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    refreshToken: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatCreateWithoutUserInput = {
    id?: bigint | number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutChatsInput
    messages?: ChatMessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    organizationId: number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChatMessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutUserInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatCreateManyUserInputEnvelope = {
    data: ChatCreateManyUserInput | ChatCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatFeedbackCreateWithoutUserInput = {
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
    message: ChatMessageCreateNestedOneWithoutFeedbackInput
  }

  export type ChatFeedbackUncheckedCreateWithoutUserInput = {
    id?: number
    messageId: bigint | number
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
  }

  export type ChatFeedbackCreateOrConnectWithoutUserInput = {
    where: ChatFeedbackWhereUniqueInput
    create: XOR<ChatFeedbackCreateWithoutUserInput, ChatFeedbackUncheckedCreateWithoutUserInput>
  }

  export type ChatFeedbackCreateManyUserInputEnvelope = {
    data: ChatFeedbackCreateManyUserInput | ChatFeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AgentConnectionCreateWithoutUserInput = {
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutAgentConnectionsInput
    agentDefinition: AgentDefinitionCreateNestedOneWithoutConnectionsInput
  }

  export type AgentConnectionUncheckedCreateWithoutUserInput = {
    id?: number
    organizationId: number
    agentId: string
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentConnectionCreateOrConnectWithoutUserInput = {
    where: AgentConnectionWhereUniqueInput
    create: XOR<AgentConnectionCreateWithoutUserInput, AgentConnectionUncheckedCreateWithoutUserInput>
  }

  export type AgentConnectionCreateManyUserInputEnvelope = {
    data: AgentConnectionCreateManyUserInput | AgentConnectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AgentExecutionCreateWithoutUserInput = {
    id?: bigint | number
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutAgentExecutionsInput
    agentDefinition: AgentDefinitionCreateNestedOneWithoutExecutionsInput
  }

  export type AgentExecutionUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    organizationId: number
    agentId: string
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type AgentExecutionCreateOrConnectWithoutUserInput = {
    where: AgentExecutionWhereUniqueInput
    create: XOR<AgentExecutionCreateWithoutUserInput, AgentExecutionUncheckedCreateWithoutUserInput>
  }

  export type AgentExecutionCreateManyUserInputEnvelope = {
    data: AgentExecutionCreateManyUserInput | AgentExecutionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProposalCreateWithoutCreatedByInput = {
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutProposalsInput
    approvals?: ApprovalCreateNestedManyWithoutProposalInput
  }

  export type ProposalUncheckedCreateWithoutCreatedByInput = {
    id?: number
    organizationId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
    approvals?: ApprovalUncheckedCreateNestedManyWithoutProposalInput
  }

  export type ProposalCreateOrConnectWithoutCreatedByInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutCreatedByInput, ProposalUncheckedCreateWithoutCreatedByInput>
  }

  export type ProposalCreateManyCreatedByInputEnvelope = {
    data: ProposalCreateManyCreatedByInput | ProposalCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ApprovalCreateWithoutUserInput = {
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
    proposal: ProposalCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutUserInput = {
    id?: number
    proposalId: number
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutUserInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput>
  }

  export type ApprovalCreateManyUserInputEnvelope = {
    data: ApprovalCreateManyUserInput | ApprovalCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: bigint | number
    timestamp?: Date | string
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    timestamp?: Date | string
    organizationId: number
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: bigint | number
    type: string
    title: string
    message?: string | null
    channels?: NotificationCreatechannelsInput | string[]
    priority?: string
    readAt?: Date | string | null
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: bigint | number
    type: string
    title: string
    message?: string | null
    channels?: NotificationCreatechannelsInput | string[]
    priority?: string
    readAt?: Date | string | null
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserConsentCreateWithoutUserInput = {
    consentType: string
    granted: boolean
    ipAddress?: string | null
    grantedAt?: Date | string
    revokedAt?: Date | string | null
  }

  export type UserConsentUncheckedCreateWithoutUserInput = {
    id?: number
    consentType: string
    granted: boolean
    ipAddress?: string | null
    grantedAt?: Date | string
    revokedAt?: Date | string | null
  }

  export type UserConsentCreateOrConnectWithoutUserInput = {
    where: UserConsentWhereUniqueInput
    create: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput>
  }

  export type UserConsentCreateManyUserInputEnvelope = {
    data: UserConsentCreateManyUserInput | UserConsentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: UuidFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    refreshToken?: StringFilter<"Session"> | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type ChatUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    update: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
    create: XOR<ChatCreateWithoutUserInput, ChatUncheckedCreateWithoutUserInput>
  }

  export type ChatUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatWhereUniqueInput
    data: XOR<ChatUpdateWithoutUserInput, ChatUncheckedUpdateWithoutUserInput>
  }

  export type ChatUpdateManyWithWhereWithoutUserInput = {
    where: ChatScalarWhereInput
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatFeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatFeedbackWhereUniqueInput
    update: XOR<ChatFeedbackUpdateWithoutUserInput, ChatFeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<ChatFeedbackCreateWithoutUserInput, ChatFeedbackUncheckedCreateWithoutUserInput>
  }

  export type ChatFeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatFeedbackWhereUniqueInput
    data: XOR<ChatFeedbackUpdateWithoutUserInput, ChatFeedbackUncheckedUpdateWithoutUserInput>
  }

  export type ChatFeedbackUpdateManyWithWhereWithoutUserInput = {
    where: ChatFeedbackScalarWhereInput
    data: XOR<ChatFeedbackUpdateManyMutationInput, ChatFeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatFeedbackScalarWhereInput = {
    AND?: ChatFeedbackScalarWhereInput | ChatFeedbackScalarWhereInput[]
    OR?: ChatFeedbackScalarWhereInput[]
    NOT?: ChatFeedbackScalarWhereInput | ChatFeedbackScalarWhereInput[]
    id?: IntFilter<"ChatFeedback"> | number
    messageId?: BigIntFilter<"ChatFeedback"> | bigint | number
    userId?: IntFilter<"ChatFeedback"> | number
    rating?: IntNullableFilter<"ChatFeedback"> | number | null
    feedbackText?: StringNullableFilter<"ChatFeedback"> | string | null
    createdAt?: DateTimeFilter<"ChatFeedback"> | Date | string
  }

  export type AgentConnectionUpsertWithWhereUniqueWithoutUserInput = {
    where: AgentConnectionWhereUniqueInput
    update: XOR<AgentConnectionUpdateWithoutUserInput, AgentConnectionUncheckedUpdateWithoutUserInput>
    create: XOR<AgentConnectionCreateWithoutUserInput, AgentConnectionUncheckedCreateWithoutUserInput>
  }

  export type AgentConnectionUpdateWithWhereUniqueWithoutUserInput = {
    where: AgentConnectionWhereUniqueInput
    data: XOR<AgentConnectionUpdateWithoutUserInput, AgentConnectionUncheckedUpdateWithoutUserInput>
  }

  export type AgentConnectionUpdateManyWithWhereWithoutUserInput = {
    where: AgentConnectionScalarWhereInput
    data: XOR<AgentConnectionUpdateManyMutationInput, AgentConnectionUncheckedUpdateManyWithoutUserInput>
  }

  export type AgentExecutionUpsertWithWhereUniqueWithoutUserInput = {
    where: AgentExecutionWhereUniqueInput
    update: XOR<AgentExecutionUpdateWithoutUserInput, AgentExecutionUncheckedUpdateWithoutUserInput>
    create: XOR<AgentExecutionCreateWithoutUserInput, AgentExecutionUncheckedCreateWithoutUserInput>
  }

  export type AgentExecutionUpdateWithWhereUniqueWithoutUserInput = {
    where: AgentExecutionWhereUniqueInput
    data: XOR<AgentExecutionUpdateWithoutUserInput, AgentExecutionUncheckedUpdateWithoutUserInput>
  }

  export type AgentExecutionUpdateManyWithWhereWithoutUserInput = {
    where: AgentExecutionScalarWhereInput
    data: XOR<AgentExecutionUpdateManyMutationInput, AgentExecutionUncheckedUpdateManyWithoutUserInput>
  }

  export type ProposalUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProposalWhereUniqueInput
    update: XOR<ProposalUpdateWithoutCreatedByInput, ProposalUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProposalCreateWithoutCreatedByInput, ProposalUncheckedCreateWithoutCreatedByInput>
  }

  export type ProposalUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProposalWhereUniqueInput
    data: XOR<ProposalUpdateWithoutCreatedByInput, ProposalUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProposalUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProposalScalarWhereInput
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ApprovalUpsertWithWhereUniqueWithoutUserInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutUserInput, ApprovalUncheckedUpdateWithoutUserInput>
    create: XOR<ApprovalCreateWithoutUserInput, ApprovalUncheckedCreateWithoutUserInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutUserInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutUserInput, ApprovalUncheckedUpdateWithoutUserInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutUserInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutUserInput>
  }

  export type ApprovalScalarWhereInput = {
    AND?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    OR?: ApprovalScalarWhereInput[]
    NOT?: ApprovalScalarWhereInput | ApprovalScalarWhereInput[]
    id?: IntFilter<"Approval"> | number
    proposalId?: IntFilter<"Approval"> | number
    userId?: IntFilter<"Approval"> | number
    roleRequired?: StringFilter<"Approval"> | string
    approved?: BoolNullableFilter<"Approval"> | boolean | null
    comment?: StringNullableFilter<"Approval"> | string | null
    createdAt?: DateTimeFilter<"Approval"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: BigIntFilter<"Notification"> | bigint | number
    userId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringNullableFilter<"Notification"> | string | null
    channels?: StringNullableListFilter<"Notification">
    priority?: StringFilter<"Notification"> | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    actionUrl?: StringNullableFilter<"Notification"> | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type UserConsentUpsertWithWhereUniqueWithoutUserInput = {
    where: UserConsentWhereUniqueInput
    update: XOR<UserConsentUpdateWithoutUserInput, UserConsentUncheckedUpdateWithoutUserInput>
    create: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput>
  }

  export type UserConsentUpdateWithWhereUniqueWithoutUserInput = {
    where: UserConsentWhereUniqueInput
    data: XOR<UserConsentUpdateWithoutUserInput, UserConsentUncheckedUpdateWithoutUserInput>
  }

  export type UserConsentUpdateManyWithWhereWithoutUserInput = {
    where: UserConsentScalarWhereInput
    data: XOR<UserConsentUpdateManyMutationInput, UserConsentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserConsentScalarWhereInput = {
    AND?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
    OR?: UserConsentScalarWhereInput[]
    NOT?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
    id?: IntFilter<"UserConsent"> | number
    userId?: IntFilter<"UserConsent"> | number
    consentType?: StringFilter<"UserConsent"> | string
    granted?: BoolFilter<"UserConsent"> | boolean
    ipAddress?: StringNullableFilter<"UserConsent"> | string | null
    grantedAt?: DateTimeFilter<"UserConsent"> | Date | string
    revokedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
  }

  export type UserCreateWithoutSessionsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutChatsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
  }

  export type OrganizationCreateWithoutChatsInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutChatsInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutChatsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutChatsInput, OrganizationUncheckedCreateWithoutChatsInput>
  }

  export type ChatMessageCreateWithoutChatInput = {
    id?: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    feedback?: ChatFeedbackCreateNestedManyWithoutMessageInput
  }

  export type ChatMessageUncheckedCreateWithoutChatInput = {
    id?: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    feedback?: ChatFeedbackUncheckedCreateNestedManyWithoutMessageInput
  }

  export type ChatMessageCreateOrConnectWithoutChatInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutChatInput, ChatMessageUncheckedCreateWithoutChatInput>
  }

  export type ChatMessageCreateManyChatInputEnvelope = {
    data: ChatMessageCreateManyChatInput | ChatMessageCreateManyChatInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutChatsInput = {
    update: XOR<UserUpdateWithoutChatsInput, UserUncheckedUpdateWithoutChatsInput>
    create: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatsInput, UserUncheckedUpdateWithoutChatsInput>
  }

  export type UserUpdateWithoutChatsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationUpsertWithoutChatsInput = {
    update: XOR<OrganizationUpdateWithoutChatsInput, OrganizationUncheckedUpdateWithoutChatsInput>
    create: XOR<OrganizationCreateWithoutChatsInput, OrganizationUncheckedCreateWithoutChatsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutChatsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutChatsInput, OrganizationUncheckedUpdateWithoutChatsInput>
  }

  export type OrganizationUpdateWithoutChatsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutChatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutChatInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutChatInput, ChatMessageUncheckedUpdateWithoutChatInput>
    create: XOR<ChatMessageCreateWithoutChatInput, ChatMessageUncheckedCreateWithoutChatInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutChatInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutChatInput, ChatMessageUncheckedUpdateWithoutChatInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutChatInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutChatInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: BigIntFilter<"ChatMessage"> | bigint | number
    chatId?: BigIntFilter<"ChatMessage"> | bigint | number
    role?: StringFilter<"ChatMessage"> | string
    content?: StringFilter<"ChatMessage"> | string
    model?: StringNullableFilter<"ChatMessage"> | string | null
    tokensInput?: IntNullableFilter<"ChatMessage"> | number | null
    tokensOutput?: IntNullableFilter<"ChatMessage"> | number | null
    tokensReasoning?: IntNullableFilter<"ChatMessage"> | number | null
    costEur?: DecimalNullableFilter<"ChatMessage"> | Decimal | DecimalJsLike | number | string | null
    latencyMs?: IntNullableFilter<"ChatMessage"> | number | null
    functionCalls?: JsonNullableFilter<"ChatMessage">
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
  }

  export type ChatCreateWithoutMessagesInput = {
    id?: bigint | number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutChatsInput
    organization: OrganizationCreateNestedOneWithoutChatsInput
  }

  export type ChatUncheckedCreateWithoutMessagesInput = {
    id?: bigint | number
    userId: number
    organizationId: number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatCreateOrConnectWithoutMessagesInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
  }

  export type ChatFeedbackCreateWithoutMessageInput = {
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChatFeedbackInput
  }

  export type ChatFeedbackUncheckedCreateWithoutMessageInput = {
    id?: number
    userId: number
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
  }

  export type ChatFeedbackCreateOrConnectWithoutMessageInput = {
    where: ChatFeedbackWhereUniqueInput
    create: XOR<ChatFeedbackCreateWithoutMessageInput, ChatFeedbackUncheckedCreateWithoutMessageInput>
  }

  export type ChatFeedbackCreateManyMessageInputEnvelope = {
    data: ChatFeedbackCreateManyMessageInput | ChatFeedbackCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type ChatUpsertWithoutMessagesInput = {
    update: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    where?: ChatWhereInput
  }

  export type ChatUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatWhereInput
    data: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatUpdateWithoutMessagesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatsNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutChatsNestedInput
  }

  export type ChatUncheckedUpdateWithoutMessagesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackUpsertWithWhereUniqueWithoutMessageInput = {
    where: ChatFeedbackWhereUniqueInput
    update: XOR<ChatFeedbackUpdateWithoutMessageInput, ChatFeedbackUncheckedUpdateWithoutMessageInput>
    create: XOR<ChatFeedbackCreateWithoutMessageInput, ChatFeedbackUncheckedCreateWithoutMessageInput>
  }

  export type ChatFeedbackUpdateWithWhereUniqueWithoutMessageInput = {
    where: ChatFeedbackWhereUniqueInput
    data: XOR<ChatFeedbackUpdateWithoutMessageInput, ChatFeedbackUncheckedUpdateWithoutMessageInput>
  }

  export type ChatFeedbackUpdateManyWithWhereWithoutMessageInput = {
    where: ChatFeedbackScalarWhereInput
    data: XOR<ChatFeedbackUpdateManyMutationInput, ChatFeedbackUncheckedUpdateManyWithoutMessageInput>
  }

  export type ChatMessageCreateWithoutFeedbackInput = {
    id?: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    chat: ChatCreateNestedOneWithoutMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutFeedbackInput = {
    id?: bigint | number
    chatId: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutFeedbackInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutFeedbackInput, ChatMessageUncheckedCreateWithoutFeedbackInput>
  }

  export type UserCreateWithoutChatFeedbackInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatFeedbackInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatFeedbackInput, UserUncheckedCreateWithoutChatFeedbackInput>
  }

  export type ChatMessageUpsertWithoutFeedbackInput = {
    update: XOR<ChatMessageUpdateWithoutFeedbackInput, ChatMessageUncheckedUpdateWithoutFeedbackInput>
    create: XOR<ChatMessageCreateWithoutFeedbackInput, ChatMessageUncheckedCreateWithoutFeedbackInput>
    where?: ChatMessageWhereInput
  }

  export type ChatMessageUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: ChatMessageWhereInput
    data: XOR<ChatMessageUpdateWithoutFeedbackInput, ChatMessageUncheckedUpdateWithoutFeedbackInput>
  }

  export type ChatMessageUpdateWithoutFeedbackInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutFeedbackInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    chatId?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutChatFeedbackInput = {
    update: XOR<UserUpdateWithoutChatFeedbackInput, UserUncheckedUpdateWithoutChatFeedbackInput>
    create: XOR<UserCreateWithoutChatFeedbackInput, UserUncheckedCreateWithoutChatFeedbackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatFeedbackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatFeedbackInput, UserUncheckedUpdateWithoutChatFeedbackInput>
  }

  export type UserUpdateWithoutChatFeedbackInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgentConnectionCreateWithoutAgentDefinitionInput = {
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutAgentConnectionsInput
    user: UserCreateNestedOneWithoutAgentConnectionsInput
  }

  export type AgentConnectionUncheckedCreateWithoutAgentDefinitionInput = {
    id?: number
    organizationId: number
    userId: number
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentConnectionCreateOrConnectWithoutAgentDefinitionInput = {
    where: AgentConnectionWhereUniqueInput
    create: XOR<AgentConnectionCreateWithoutAgentDefinitionInput, AgentConnectionUncheckedCreateWithoutAgentDefinitionInput>
  }

  export type AgentConnectionCreateManyAgentDefinitionInputEnvelope = {
    data: AgentConnectionCreateManyAgentDefinitionInput | AgentConnectionCreateManyAgentDefinitionInput[]
    skipDuplicates?: boolean
  }

  export type AgentExecutionCreateWithoutAgentDefinitionInput = {
    id?: bigint | number
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutAgentExecutionsInput
    user: UserCreateNestedOneWithoutAgentExecutionsInput
  }

  export type AgentExecutionUncheckedCreateWithoutAgentDefinitionInput = {
    id?: bigint | number
    organizationId: number
    userId: number
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type AgentExecutionCreateOrConnectWithoutAgentDefinitionInput = {
    where: AgentExecutionWhereUniqueInput
    create: XOR<AgentExecutionCreateWithoutAgentDefinitionInput, AgentExecutionUncheckedCreateWithoutAgentDefinitionInput>
  }

  export type AgentExecutionCreateManyAgentDefinitionInputEnvelope = {
    data: AgentExecutionCreateManyAgentDefinitionInput | AgentExecutionCreateManyAgentDefinitionInput[]
    skipDuplicates?: boolean
  }

  export type AgentConnectionUpsertWithWhereUniqueWithoutAgentDefinitionInput = {
    where: AgentConnectionWhereUniqueInput
    update: XOR<AgentConnectionUpdateWithoutAgentDefinitionInput, AgentConnectionUncheckedUpdateWithoutAgentDefinitionInput>
    create: XOR<AgentConnectionCreateWithoutAgentDefinitionInput, AgentConnectionUncheckedCreateWithoutAgentDefinitionInput>
  }

  export type AgentConnectionUpdateWithWhereUniqueWithoutAgentDefinitionInput = {
    where: AgentConnectionWhereUniqueInput
    data: XOR<AgentConnectionUpdateWithoutAgentDefinitionInput, AgentConnectionUncheckedUpdateWithoutAgentDefinitionInput>
  }

  export type AgentConnectionUpdateManyWithWhereWithoutAgentDefinitionInput = {
    where: AgentConnectionScalarWhereInput
    data: XOR<AgentConnectionUpdateManyMutationInput, AgentConnectionUncheckedUpdateManyWithoutAgentDefinitionInput>
  }

  export type AgentExecutionUpsertWithWhereUniqueWithoutAgentDefinitionInput = {
    where: AgentExecutionWhereUniqueInput
    update: XOR<AgentExecutionUpdateWithoutAgentDefinitionInput, AgentExecutionUncheckedUpdateWithoutAgentDefinitionInput>
    create: XOR<AgentExecutionCreateWithoutAgentDefinitionInput, AgentExecutionUncheckedCreateWithoutAgentDefinitionInput>
  }

  export type AgentExecutionUpdateWithWhereUniqueWithoutAgentDefinitionInput = {
    where: AgentExecutionWhereUniqueInput
    data: XOR<AgentExecutionUpdateWithoutAgentDefinitionInput, AgentExecutionUncheckedUpdateWithoutAgentDefinitionInput>
  }

  export type AgentExecutionUpdateManyWithWhereWithoutAgentDefinitionInput = {
    where: AgentExecutionScalarWhereInput
    data: XOR<AgentExecutionUpdateManyMutationInput, AgentExecutionUncheckedUpdateManyWithoutAgentDefinitionInput>
  }

  export type OrganizationCreateWithoutAgentConnectionsInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutAgentConnectionsInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutAgentConnectionsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutAgentConnectionsInput, OrganizationUncheckedCreateWithoutAgentConnectionsInput>
  }

  export type UserCreateWithoutAgentConnectionsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAgentConnectionsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAgentConnectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAgentConnectionsInput, UserUncheckedCreateWithoutAgentConnectionsInput>
  }

  export type AgentDefinitionCreateWithoutConnectionsInput = {
    id: string
    neuraId: string
    name: string
    description?: string | null
    category?: string | null
    difficulty?: string | null
    estimatedTimeSavedHours?: Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    executions?: AgentExecutionCreateNestedManyWithoutAgentDefinitionInput
  }

  export type AgentDefinitionUncheckedCreateWithoutConnectionsInput = {
    id: string
    neuraId: string
    name: string
    description?: string | null
    category?: string | null
    difficulty?: string | null
    estimatedTimeSavedHours?: Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    executions?: AgentExecutionUncheckedCreateNestedManyWithoutAgentDefinitionInput
  }

  export type AgentDefinitionCreateOrConnectWithoutConnectionsInput = {
    where: AgentDefinitionWhereUniqueInput
    create: XOR<AgentDefinitionCreateWithoutConnectionsInput, AgentDefinitionUncheckedCreateWithoutConnectionsInput>
  }

  export type OrganizationUpsertWithoutAgentConnectionsInput = {
    update: XOR<OrganizationUpdateWithoutAgentConnectionsInput, OrganizationUncheckedUpdateWithoutAgentConnectionsInput>
    create: XOR<OrganizationCreateWithoutAgentConnectionsInput, OrganizationUncheckedCreateWithoutAgentConnectionsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutAgentConnectionsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutAgentConnectionsInput, OrganizationUncheckedUpdateWithoutAgentConnectionsInput>
  }

  export type OrganizationUpdateWithoutAgentConnectionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutAgentConnectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutAgentConnectionsInput = {
    update: XOR<UserUpdateWithoutAgentConnectionsInput, UserUncheckedUpdateWithoutAgentConnectionsInput>
    create: XOR<UserCreateWithoutAgentConnectionsInput, UserUncheckedCreateWithoutAgentConnectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAgentConnectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAgentConnectionsInput, UserUncheckedUpdateWithoutAgentConnectionsInput>
  }

  export type UserUpdateWithoutAgentConnectionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAgentConnectionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgentDefinitionUpsertWithoutConnectionsInput = {
    update: XOR<AgentDefinitionUpdateWithoutConnectionsInput, AgentDefinitionUncheckedUpdateWithoutConnectionsInput>
    create: XOR<AgentDefinitionCreateWithoutConnectionsInput, AgentDefinitionUncheckedCreateWithoutConnectionsInput>
    where?: AgentDefinitionWhereInput
  }

  export type AgentDefinitionUpdateToOneWithWhereWithoutConnectionsInput = {
    where?: AgentDefinitionWhereInput
    data: XOR<AgentDefinitionUpdateWithoutConnectionsInput, AgentDefinitionUncheckedUpdateWithoutConnectionsInput>
  }

  export type AgentDefinitionUpdateWithoutConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: AgentExecutionUpdateManyWithoutAgentDefinitionNestedInput
  }

  export type AgentDefinitionUncheckedUpdateWithoutConnectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    executions?: AgentExecutionUncheckedUpdateManyWithoutAgentDefinitionNestedInput
  }

  export type OrganizationCreateWithoutAgentExecutionsInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutAgentExecutionsInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutAgentExecutionsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutAgentExecutionsInput, OrganizationUncheckedCreateWithoutAgentExecutionsInput>
  }

  export type UserCreateWithoutAgentExecutionsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAgentExecutionsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAgentExecutionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAgentExecutionsInput, UserUncheckedCreateWithoutAgentExecutionsInput>
  }

  export type AgentDefinitionCreateWithoutExecutionsInput = {
    id: string
    neuraId: string
    name: string
    description?: string | null
    category?: string | null
    difficulty?: string | null
    estimatedTimeSavedHours?: Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    connections?: AgentConnectionCreateNestedManyWithoutAgentDefinitionInput
  }

  export type AgentDefinitionUncheckedCreateWithoutExecutionsInput = {
    id: string
    neuraId: string
    name: string
    description?: string | null
    category?: string | null
    difficulty?: string | null
    estimatedTimeSavedHours?: Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionCreatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    connections?: AgentConnectionUncheckedCreateNestedManyWithoutAgentDefinitionInput
  }

  export type AgentDefinitionCreateOrConnectWithoutExecutionsInput = {
    where: AgentDefinitionWhereUniqueInput
    create: XOR<AgentDefinitionCreateWithoutExecutionsInput, AgentDefinitionUncheckedCreateWithoutExecutionsInput>
  }

  export type OrganizationUpsertWithoutAgentExecutionsInput = {
    update: XOR<OrganizationUpdateWithoutAgentExecutionsInput, OrganizationUncheckedUpdateWithoutAgentExecutionsInput>
    create: XOR<OrganizationCreateWithoutAgentExecutionsInput, OrganizationUncheckedCreateWithoutAgentExecutionsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutAgentExecutionsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutAgentExecutionsInput, OrganizationUncheckedUpdateWithoutAgentExecutionsInput>
  }

  export type OrganizationUpdateWithoutAgentExecutionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutAgentExecutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutAgentExecutionsInput = {
    update: XOR<UserUpdateWithoutAgentExecutionsInput, UserUncheckedUpdateWithoutAgentExecutionsInput>
    create: XOR<UserCreateWithoutAgentExecutionsInput, UserUncheckedCreateWithoutAgentExecutionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAgentExecutionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAgentExecutionsInput, UserUncheckedUpdateWithoutAgentExecutionsInput>
  }

  export type UserUpdateWithoutAgentExecutionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAgentExecutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AgentDefinitionUpsertWithoutExecutionsInput = {
    update: XOR<AgentDefinitionUpdateWithoutExecutionsInput, AgentDefinitionUncheckedUpdateWithoutExecutionsInput>
    create: XOR<AgentDefinitionCreateWithoutExecutionsInput, AgentDefinitionUncheckedCreateWithoutExecutionsInput>
    where?: AgentDefinitionWhereInput
  }

  export type AgentDefinitionUpdateToOneWithWhereWithoutExecutionsInput = {
    where?: AgentDefinitionWhereInput
    data: XOR<AgentDefinitionUpdateWithoutExecutionsInput, AgentDefinitionUncheckedUpdateWithoutExecutionsInput>
  }

  export type AgentDefinitionUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connections?: AgentConnectionUpdateManyWithoutAgentDefinitionNestedInput
  }

  export type AgentDefinitionUncheckedUpdateWithoutExecutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neuraId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    difficulty?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedTimeSavedHours?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    estimatedRoiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    tags?: AgentDefinitionUpdatetagsInput | string[]
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    connections?: AgentConnectionUncheckedUpdateManyWithoutAgentDefinitionNestedInput
  }

  export type OrganizationCreateWithoutProposalsInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutProposalsInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutProposalsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutProposalsInput, OrganizationUncheckedCreateWithoutProposalsInput>
  }

  export type UserCreateWithoutProposalsCreatedInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProposalsCreatedInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProposalsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProposalsCreatedInput, UserUncheckedCreateWithoutProposalsCreatedInput>
  }

  export type ApprovalCreateWithoutProposalInput = {
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutApprovalsInput
  }

  export type ApprovalUncheckedCreateWithoutProposalInput = {
    id?: number
    userId: number
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalCreateOrConnectWithoutProposalInput = {
    where: ApprovalWhereUniqueInput
    create: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput>
  }

  export type ApprovalCreateManyProposalInputEnvelope = {
    data: ApprovalCreateManyProposalInput | ApprovalCreateManyProposalInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutProposalsInput = {
    update: XOR<OrganizationUpdateWithoutProposalsInput, OrganizationUncheckedUpdateWithoutProposalsInput>
    create: XOR<OrganizationCreateWithoutProposalsInput, OrganizationUncheckedCreateWithoutProposalsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutProposalsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutProposalsInput, OrganizationUncheckedUpdateWithoutProposalsInput>
  }

  export type OrganizationUpdateWithoutProposalsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutProposalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutProposalsCreatedInput = {
    update: XOR<UserUpdateWithoutProposalsCreatedInput, UserUncheckedUpdateWithoutProposalsCreatedInput>
    create: XOR<UserCreateWithoutProposalsCreatedInput, UserUncheckedCreateWithoutProposalsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProposalsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProposalsCreatedInput, UserUncheckedUpdateWithoutProposalsCreatedInput>
  }

  export type UserUpdateWithoutProposalsCreatedInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProposalsCreatedInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApprovalUpsertWithWhereUniqueWithoutProposalInput = {
    where: ApprovalWhereUniqueInput
    update: XOR<ApprovalUpdateWithoutProposalInput, ApprovalUncheckedUpdateWithoutProposalInput>
    create: XOR<ApprovalCreateWithoutProposalInput, ApprovalUncheckedCreateWithoutProposalInput>
  }

  export type ApprovalUpdateWithWhereUniqueWithoutProposalInput = {
    where: ApprovalWhereUniqueInput
    data: XOR<ApprovalUpdateWithoutProposalInput, ApprovalUncheckedUpdateWithoutProposalInput>
  }

  export type ApprovalUpdateManyWithWhereWithoutProposalInput = {
    where: ApprovalScalarWhereInput
    data: XOR<ApprovalUpdateManyMutationInput, ApprovalUncheckedUpdateManyWithoutProposalInput>
  }

  export type ProposalCreateWithoutApprovalsInput = {
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
    organization: OrganizationCreateNestedOneWithoutProposalsInput
    createdBy: UserCreateNestedOneWithoutProposalsCreatedInput
  }

  export type ProposalUncheckedCreateWithoutApprovalsInput = {
    id?: number
    organizationId: number
    createdByUserId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
  }

  export type ProposalCreateOrConnectWithoutApprovalsInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
  }

  export type UserCreateWithoutApprovalsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApprovalsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApprovalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
  }

  export type ProposalUpsertWithoutApprovalsInput = {
    update: XOR<ProposalUpdateWithoutApprovalsInput, ProposalUncheckedUpdateWithoutApprovalsInput>
    create: XOR<ProposalCreateWithoutApprovalsInput, ProposalUncheckedCreateWithoutApprovalsInput>
    where?: ProposalWhereInput
  }

  export type ProposalUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: ProposalWhereInput
    data: XOR<ProposalUpdateWithoutApprovalsInput, ProposalUncheckedUpdateWithoutApprovalsInput>
  }

  export type ProposalUpdateWithoutApprovalsInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutProposalsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutProposalsCreatedNestedInput
  }

  export type ProposalUncheckedUpdateWithoutApprovalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    createdByUserId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutApprovalsInput = {
    update: XOR<UserUpdateWithoutApprovalsInput, UserUncheckedUpdateWithoutApprovalsInput>
    create: XOR<UserCreateWithoutApprovalsInput, UserUncheckedCreateWithoutApprovalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovalsInput, UserUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserUpdateWithoutApprovalsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationCreateWithoutAuditLogsInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutAuditLogsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutAuditLogsInput, OrganizationUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserCreateWithoutAuditLogsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type OrganizationUpsertWithoutAuditLogsInput = {
    update: XOR<OrganizationUpdateWithoutAuditLogsInput, OrganizationUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<OrganizationCreateWithoutAuditLogsInput, OrganizationUncheckedCreateWithoutAuditLogsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutAuditLogsInput, OrganizationUncheckedUpdateWithoutAuditLogsInput>
  }

  export type OrganizationUpdateWithoutAuditLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationCreateWithoutCostTrackingInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutCostTrackingInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutCostTrackingInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutCostTrackingInput, OrganizationUncheckedCreateWithoutCostTrackingInput>
  }

  export type OrganizationUpsertWithoutCostTrackingInput = {
    update: XOR<OrganizationUpdateWithoutCostTrackingInput, OrganizationUncheckedUpdateWithoutCostTrackingInput>
    create: XOR<OrganizationCreateWithoutCostTrackingInput, OrganizationUncheckedCreateWithoutCostTrackingInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutCostTrackingInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutCostTrackingInput, OrganizationUncheckedUpdateWithoutCostTrackingInput>
  }

  export type OrganizationUpdateWithoutCostTrackingInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutCostTrackingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutNeuraMetricsInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutNeuraMetricsInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    integrationConfigs?: IntegrationConfigUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutNeuraMetricsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutNeuraMetricsInput, OrganizationUncheckedCreateWithoutNeuraMetricsInput>
  }

  export type OrganizationUpsertWithoutNeuraMetricsInput = {
    update: XOR<OrganizationUpdateWithoutNeuraMetricsInput, OrganizationUncheckedUpdateWithoutNeuraMetricsInput>
    create: XOR<OrganizationCreateWithoutNeuraMetricsInput, OrganizationUncheckedCreateWithoutNeuraMetricsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutNeuraMetricsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutNeuraMetricsInput, OrganizationUncheckedUpdateWithoutNeuraMetricsInput>
  }

  export type OrganizationUpdateWithoutNeuraMetricsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutNeuraMetricsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    integrationConfigs?: IntegrationConfigUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserCreateWithoutConsentsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConsentsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConsentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
  }

  export type UserUpsertWithoutConsentsInput = {
    update: XOR<UserUpdateWithoutConsentsInput, UserUncheckedUpdateWithoutConsentsInput>
    create: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConsentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConsentsInput, UserUncheckedUpdateWithoutConsentsInput>
  }

  export type UserUpdateWithoutConsentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConsentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationCreateWithoutIntegrationConfigsInput = {
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutOrganizationInput
    chats?: ChatCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutIntegrationConfigsInput = {
    id?: number
    name: string
    slug: string
    plan?: string
    industry?: string | null
    employeeCount?: number | null
    annualRevenueEur?: Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    chats?: ChatUncheckedCreateNestedManyWithoutOrganizationInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutOrganizationInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutOrganizationInput
    proposals?: ProposalUncheckedCreateNestedManyWithoutOrganizationInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutOrganizationInput
    costTracking?: CostTrackingUncheckedCreateNestedManyWithoutOrganizationInput
    neuraMetrics?: NeuraMetricDailyUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutIntegrationConfigsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutIntegrationConfigsInput, OrganizationUncheckedCreateWithoutIntegrationConfigsInput>
  }

  export type IntegrationSyncLogCreateWithoutIntegrationConfigInput = {
    id?: bigint | number
    syncType?: string | null
    recordsProcessed?: number | null
    recordsSuccess?: number | null
    recordsFailed?: number | null
    durationMs?: number | null
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput = {
    id?: bigint | number
    syncType?: string | null
    recordsProcessed?: number | null
    recordsSuccess?: number | null
    recordsFailed?: number | null
    durationMs?: number | null
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type IntegrationSyncLogCreateOrConnectWithoutIntegrationConfigInput = {
    where: IntegrationSyncLogWhereUniqueInput
    create: XOR<IntegrationSyncLogCreateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput>
  }

  export type IntegrationSyncLogCreateManyIntegrationConfigInputEnvelope = {
    data: IntegrationSyncLogCreateManyIntegrationConfigInput | IntegrationSyncLogCreateManyIntegrationConfigInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutIntegrationConfigsInput = {
    update: XOR<OrganizationUpdateWithoutIntegrationConfigsInput, OrganizationUncheckedUpdateWithoutIntegrationConfigsInput>
    create: XOR<OrganizationCreateWithoutIntegrationConfigsInput, OrganizationUncheckedCreateWithoutIntegrationConfigsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutIntegrationConfigsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutIntegrationConfigsInput, OrganizationUncheckedUpdateWithoutIntegrationConfigsInput>
  }

  export type OrganizationUpdateWithoutIntegrationConfigsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutIntegrationConfigsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    plan?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    employeeCount?: NullableIntFieldUpdateOperationsInput | number | null
    annualRevenueEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    chats?: ChatUncheckedUpdateManyWithoutOrganizationNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutOrganizationNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutOrganizationNestedInput
    proposals?: ProposalUncheckedUpdateManyWithoutOrganizationNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutOrganizationNestedInput
    costTracking?: CostTrackingUncheckedUpdateManyWithoutOrganizationNestedInput
    neuraMetrics?: NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type IntegrationSyncLogUpsertWithWhereUniqueWithoutIntegrationConfigInput = {
    where: IntegrationSyncLogWhereUniqueInput
    update: XOR<IntegrationSyncLogUpdateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedUpdateWithoutIntegrationConfigInput>
    create: XOR<IntegrationSyncLogCreateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedCreateWithoutIntegrationConfigInput>
  }

  export type IntegrationSyncLogUpdateWithWhereUniqueWithoutIntegrationConfigInput = {
    where: IntegrationSyncLogWhereUniqueInput
    data: XOR<IntegrationSyncLogUpdateWithoutIntegrationConfigInput, IntegrationSyncLogUncheckedUpdateWithoutIntegrationConfigInput>
  }

  export type IntegrationSyncLogUpdateManyWithWhereWithoutIntegrationConfigInput = {
    where: IntegrationSyncLogScalarWhereInput
    data: XOR<IntegrationSyncLogUpdateManyMutationInput, IntegrationSyncLogUncheckedUpdateManyWithoutIntegrationConfigInput>
  }

  export type IntegrationSyncLogScalarWhereInput = {
    AND?: IntegrationSyncLogScalarWhereInput | IntegrationSyncLogScalarWhereInput[]
    OR?: IntegrationSyncLogScalarWhereInput[]
    NOT?: IntegrationSyncLogScalarWhereInput | IntegrationSyncLogScalarWhereInput[]
    id?: BigIntFilter<"IntegrationSyncLog"> | bigint | number
    integrationConfigId?: IntFilter<"IntegrationSyncLog"> | number
    syncType?: StringNullableFilter<"IntegrationSyncLog"> | string | null
    recordsProcessed?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    recordsSuccess?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    recordsFailed?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    durationMs?: IntNullableFilter<"IntegrationSyncLog"> | number | null
    errorMessage?: StringNullableFilter<"IntegrationSyncLog"> | string | null
    createdAt?: DateTimeFilter<"IntegrationSyncLog"> | Date | string
  }

  export type IntegrationConfigCreateWithoutSyncLogsInput = {
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutIntegrationConfigsInput
  }

  export type IntegrationConfigUncheckedCreateWithoutSyncLogsInput = {
    id?: number
    organizationId: number
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
  }

  export type IntegrationConfigCreateOrConnectWithoutSyncLogsInput = {
    where: IntegrationConfigWhereUniqueInput
    create: XOR<IntegrationConfigCreateWithoutSyncLogsInput, IntegrationConfigUncheckedCreateWithoutSyncLogsInput>
  }

  export type IntegrationConfigUpsertWithoutSyncLogsInput = {
    update: XOR<IntegrationConfigUpdateWithoutSyncLogsInput, IntegrationConfigUncheckedUpdateWithoutSyncLogsInput>
    create: XOR<IntegrationConfigCreateWithoutSyncLogsInput, IntegrationConfigUncheckedCreateWithoutSyncLogsInput>
    where?: IntegrationConfigWhereInput
  }

  export type IntegrationConfigUpdateToOneWithWhereWithoutSyncLogsInput = {
    where?: IntegrationConfigWhereInput
    data: XOR<IntegrationConfigUpdateWithoutSyncLogsInput, IntegrationConfigUncheckedUpdateWithoutSyncLogsInput>
  }

  export type IntegrationConfigUpdateWithoutSyncLogsInput = {
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationConfigsNestedInput
  }

  export type IntegrationConfigUncheckedUpdateWithoutSyncLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutNotificationsInput = {
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutUsersInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    chats?: ChatCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    organizationId: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    chats?: ChatUncheckedCreateNestedManyWithoutUserInput
    chatFeedback?: ChatFeedbackUncheckedCreateNestedManyWithoutUserInput
    agentConnections?: AgentConnectionUncheckedCreateNestedManyWithoutUserInput
    agentExecutions?: AgentExecutionUncheckedCreateNestedManyWithoutUserInput
    proposalsCreated?: ProposalUncheckedCreateNestedManyWithoutCreatedByInput
    approvals?: ApprovalUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutUsersNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyOrganizationInput = {
    id?: number
    email: string
    passwordHash: string
    name: string
    role?: string
    department?: string | null
    hourlyRateEur?: Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    emailVerified?: boolean
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatCreateManyOrganizationInput = {
    id?: bigint | number
    userId: number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentConnectionCreateManyOrganizationInput = {
    id?: number
    userId: number
    agentId: string
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentExecutionCreateManyOrganizationInput = {
    id?: bigint | number
    userId: number
    agentId: string
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type ProposalCreateManyOrganizationInput = {
    id?: number
    createdByUserId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
  }

  export type AuditLogCreateManyOrganizationInput = {
    id?: bigint | number
    timestamp?: Date | string
    userId?: number | null
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CostTrackingCreateManyOrganizationInput = {
    id?: bigint | number
    userId?: number | null
    neuraId?: string | null
    agentId?: string | null
    resourceType: string
    resourceName?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur: Decimal | DecimalJsLike | number | string
    costUsd?: Decimal | DecimalJsLike | number | string | null
    model?: string | null
    timestamp?: Date | string
  }

  export type NeuraMetricDailyCreateManyOrganizationInput = {
    id?: number
    neuraId: string
    date: Date | string
    conversationsCount?: number
    messagesCount?: number
    agentExecutionsCount?: number
    timeSavedHours?: Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: Decimal | DecimalJsLike | number | string
    costConsumedEur?: Decimal | DecimalJsLike | number | string
    roiPercentage?: Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: number | null
    errorCount?: number
    userSatisfactionAvg?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
  }

  export type IntegrationConfigCreateManyOrganizationInput = {
    id?: number
    integrationType: string
    credentialsEncrypted: string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastSyncAt?: Date | string | null
    createdAt?: Date | string
  }

  export type UserUpdateWithoutOrganizationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    chats?: ChatUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    chats?: ChatUncheckedUpdateManyWithoutUserNestedInput
    chatFeedback?: ChatFeedbackUncheckedUpdateManyWithoutUserNestedInput
    agentConnections?: AgentConnectionUncheckedUpdateManyWithoutUserNestedInput
    agentExecutions?: AgentExecutionUncheckedUpdateManyWithoutUserNestedInput
    proposalsCreated?: ProposalUncheckedUpdateManyWithoutCreatedByNestedInput
    approvals?: ApprovalUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    department?: NullableStringFieldUpdateOperationsInput | string | null
    hourlyRateEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatsNestedInput
    messages?: ChatMessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateManyWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionUpdateWithoutOrganizationInput = {
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAgentConnectionsNestedInput
    agentDefinition?: AgentDefinitionUpdateOneRequiredWithoutConnectionsNestedInput
  }

  export type AgentConnectionUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentExecutionUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAgentExecutionsNestedInput
    agentDefinition?: AgentDefinitionUpdateOneRequiredWithoutExecutionsNestedInput
  }

  export type AgentExecutionUncheckedUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentExecutionUncheckedUpdateManyWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProposalUpdateWithoutOrganizationInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneRequiredWithoutProposalsCreatedNestedInput
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByUserId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdByUserId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuditLogUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogUncheckedUpdateManyWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CostTrackingUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    resourceType?: StringFieldUpdateOperationsInput | string
    resourceName?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostTrackingUncheckedUpdateWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    resourceType?: StringFieldUpdateOperationsInput | string
    resourceName?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CostTrackingUncheckedUpdateManyWithoutOrganizationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    agentId?: NullableStringFieldUpdateOperationsInput | string | null
    resourceType?: StringFieldUpdateOperationsInput | string
    resourceName?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costUsd?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeuraMetricDailyUpdateWithoutOrganizationInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationsCount?: IntFieldUpdateOperationsInput | number
    messagesCount?: IntFieldUpdateOperationsInput | number
    agentExecutionsCount?: IntFieldUpdateOperationsInput | number
    timeSavedHours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    roiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorCount?: IntFieldUpdateOperationsInput | number
    userSatisfactionAvg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeuraMetricDailyUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationsCount?: IntFieldUpdateOperationsInput | number
    messagesCount?: IntFieldUpdateOperationsInput | number
    agentExecutionsCount?: IntFieldUpdateOperationsInput | number
    timeSavedHours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    roiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorCount?: IntFieldUpdateOperationsInput | number
    userSatisfactionAvg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NeuraMetricDailyUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    conversationsCount?: IntFieldUpdateOperationsInput | number
    messagesCount?: IntFieldUpdateOperationsInput | number
    agentExecutionsCount?: IntFieldUpdateOperationsInput | number
    timeSavedHours?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    valueGeneratedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    costConsumedEur?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    roiPercentage?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    avgResponseTimeMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorCount?: IntFieldUpdateOperationsInput | number
    userSatisfactionAvg?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationConfigUpdateWithoutOrganizationInput = {
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncLogs?: IntegrationSyncLogUpdateManyWithoutIntegrationConfigNestedInput
  }

  export type IntegrationConfigUncheckedUpdateWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    syncLogs?: IntegrationSyncLogUncheckedUpdateManyWithoutIntegrationConfigNestedInput
  }

  export type IntegrationConfigUncheckedUpdateManyWithoutOrganizationInput = {
    id?: IntFieldUpdateOperationsInput | number
    integrationType?: StringFieldUpdateOperationsInput | string
    credentialsEncrypted?: StringFieldUpdateOperationsInput | string
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastSyncAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    refreshToken: string
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type ChatCreateManyUserInput = {
    id?: bigint | number
    organizationId: number
    neuraId: string
    title?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChatFeedbackCreateManyUserInput = {
    id?: number
    messageId: bigint | number
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
  }

  export type AgentConnectionCreateManyUserInput = {
    id?: number
    organizationId: number
    agentId: string
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentExecutionCreateManyUserInput = {
    id?: bigint | number
    organizationId: number
    agentId: string
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type ProposalCreateManyCreatedByInput = {
    id?: number
    organizationId: number
    neuraId: string
    action: string
    description: string
    parameters: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalCreaterequiredApprovalsInput | string[]
    rollbackPlan?: string | null
    status?: string
    executedAt?: Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    deadlineAt?: Date | string | null
  }

  export type ApprovalCreateManyUserInput = {
    id?: number
    proposalId: number
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: bigint | number
    timestamp?: Date | string
    organizationId: number
    neuraId?: string | null
    action: string
    entityType?: string | null
    entityId?: string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: number | null
    approvedBy?: AuditLogCreateapprovedByInput | number[]
    ipAddress?: string | null
    userAgent?: string | null
    correlationId?: string
    hash: string
    previousHash?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationCreateManyUserInput = {
    id?: bigint | number
    type: string
    title: string
    message?: string | null
    channels?: NotificationCreatechannelsInput | string[]
    priority?: string
    readAt?: Date | string | null
    actionUrl?: string | null
    createdAt?: Date | string
  }

  export type UserConsentCreateManyUserInput = {
    id?: number
    consentType: string
    granted: boolean
    ipAddress?: string | null
    grantedAt?: Date | string
    revokedAt?: Date | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutChatsNestedInput
    messages?: ChatMessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChatMessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackUpdateWithoutUserInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: ChatMessageUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type ChatFeedbackUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    messageId?: BigIntFieldUpdateOperationsInput | bigint | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionUpdateWithoutUserInput = {
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutAgentConnectionsNestedInput
    agentDefinition?: AgentDefinitionUpdateOneRequiredWithoutConnectionsNestedInput
  }

  export type AgentConnectionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentExecutionUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutAgentExecutionsNestedInput
    agentDefinition?: AgentDefinitionUpdateOneRequiredWithoutExecutionsNestedInput
  }

  export type AgentExecutionUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentExecutionUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    agentId?: StringFieldUpdateOperationsInput | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProposalUpdateWithoutCreatedByInput = {
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutProposalsNestedInput
    approvals?: ApprovalUpdateManyWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    approvals?: ApprovalUncheckedUpdateManyWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateManyWithoutCreatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    parameters?: JsonNullValueInput | InputJsonValue
    impactAnalysis?: NullableJsonNullValueInput | InputJsonValue
    requiredApprovals?: ProposalUpdaterequiredApprovalsInput | string[]
    rollbackPlan?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    executedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    executionResult?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deadlineAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalUpdateWithoutUserInput = {
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposal?: ProposalUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    proposalId?: IntFieldUpdateOperationsInput | number
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    proposalId?: IntFieldUpdateOperationsInput | number
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    organizationId?: IntFieldUpdateOperationsInput | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    entityType?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    beforeState?: NullableJsonNullValueInput | InputJsonValue
    afterState?: NullableJsonNullValueInput | InputJsonValue
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    approvedBy?: AuditLogUpdateapprovedByInput | number[]
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    correlationId?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    previousHash?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: NotificationUpdatechannelsInput | string[]
    priority?: StringFieldUpdateOperationsInput | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: NotificationUpdatechannelsInput | string[]
    priority?: StringFieldUpdateOperationsInput | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    channels?: NotificationUpdatechannelsInput | string[]
    priority?: StringFieldUpdateOperationsInput | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actionUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentUpdateWithoutUserInput = {
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserConsentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserConsentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChatMessageCreateManyChatInput = {
    id?: bigint | number
    role: string
    content: string
    model?: string | null
    tokensInput?: number | null
    tokensOutput?: number | null
    tokensReasoning?: number | null
    costEur?: Decimal | DecimalJsLike | number | string | null
    latencyMs?: number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ChatMessageUpdateWithoutChatInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: ChatFeedbackUpdateManyWithoutMessageNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutChatInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: ChatFeedbackUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type ChatMessageUncheckedUpdateManyWithoutChatInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    role?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
    tokensInput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensOutput?: NullableIntFieldUpdateOperationsInput | number | null
    tokensReasoning?: NullableIntFieldUpdateOperationsInput | number | null
    costEur?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    latencyMs?: NullableIntFieldUpdateOperationsInput | number | null
    functionCalls?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackCreateManyMessageInput = {
    id?: number
    userId: number
    rating?: number | null
    feedbackText?: string | null
    createdAt?: Date | string
  }

  export type ChatFeedbackUpdateWithoutMessageInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatFeedbackNestedInput
  }

  export type ChatFeedbackUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatFeedbackUncheckedUpdateManyWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    feedbackText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionCreateManyAgentDefinitionInput = {
    id?: number
    organizationId: number
    userId: number
    provider: string
    webhookUrl?: string | null
    apiKeyEncrypted?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: boolean
    lastTestedAt?: Date | string | null
    lastTestSuccess?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgentExecutionCreateManyAgentDefinitionInput = {
    id?: bigint | number
    organizationId: number
    userId: number
    neuraId?: string | null
    chatMessageId?: bigint | number | null
    proposalId?: number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status: string
    errorMessage?: string | null
    durationMs?: number | null
    retryCount?: number
    idempotencyKey?: string | null
    createdAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
  }

  export type AgentConnectionUpdateWithoutAgentDefinitionInput = {
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutAgentConnectionsNestedInput
    user?: UserUpdateOneRequiredWithoutAgentConnectionsNestedInput
  }

  export type AgentConnectionUncheckedUpdateWithoutAgentDefinitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentConnectionUncheckedUpdateManyWithoutAgentDefinitionInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provider?: StringFieldUpdateOperationsInput | string
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    apiKeyEncrypted?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastTestedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastTestSuccess?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgentExecutionUpdateWithoutAgentDefinitionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneRequiredWithoutAgentExecutionsNestedInput
    user?: UserUpdateOneRequiredWithoutAgentExecutionsNestedInput
  }

  export type AgentExecutionUncheckedUpdateWithoutAgentDefinitionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AgentExecutionUncheckedUpdateManyWithoutAgentDefinitionInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    neuraId?: NullableStringFieldUpdateOperationsInput | string | null
    chatMessageId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    proposalId?: NullableIntFieldUpdateOperationsInput | number | null
    parameters?: NullableJsonNullValueInput | InputJsonValue
    result?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    retryCount?: IntFieldUpdateOperationsInput | number
    idempotencyKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApprovalCreateManyProposalInput = {
    id?: number
    userId: number
    roleRequired: string
    approved?: boolean | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ApprovalUpdateWithoutProposalInput = {
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApprovalsNestedInput
  }

  export type ApprovalUncheckedUpdateWithoutProposalInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovalUncheckedUpdateManyWithoutProposalInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    roleRequired?: StringFieldUpdateOperationsInput | string
    approved?: NullableBoolFieldUpdateOperationsInput | boolean | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSyncLogCreateManyIntegrationConfigInput = {
    id?: bigint | number
    syncType?: string | null
    recordsProcessed?: number | null
    recordsSuccess?: number | null
    recordsFailed?: number | null
    durationMs?: number | null
    errorMessage?: string | null
    createdAt?: Date | string
  }

  export type IntegrationSyncLogUpdateWithoutIntegrationConfigInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    syncType?: NullableStringFieldUpdateOperationsInput | string | null
    recordsProcessed?: NullableIntFieldUpdateOperationsInput | number | null
    recordsSuccess?: NullableIntFieldUpdateOperationsInput | number | null
    recordsFailed?: NullableIntFieldUpdateOperationsInput | number | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSyncLogUncheckedUpdateWithoutIntegrationConfigInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    syncType?: NullableStringFieldUpdateOperationsInput | string | null
    recordsProcessed?: NullableIntFieldUpdateOperationsInput | number | null
    recordsSuccess?: NullableIntFieldUpdateOperationsInput | number | null
    recordsFailed?: NullableIntFieldUpdateOperationsInput | number | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationSyncLogUncheckedUpdateManyWithoutIntegrationConfigInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    syncType?: NullableStringFieldUpdateOperationsInput | string | null
    recordsProcessed?: NullableIntFieldUpdateOperationsInput | number | null
    recordsSuccess?: NullableIntFieldUpdateOperationsInput | number | null
    recordsFailed?: NullableIntFieldUpdateOperationsInput | number | null
    durationMs?: NullableIntFieldUpdateOperationsInput | number | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OrganizationCountOutputTypeDefaultArgs instead
     */
    export type OrganizationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatCountOutputTypeDefaultArgs instead
     */
    export type ChatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatMessageCountOutputTypeDefaultArgs instead
     */
    export type ChatMessageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatMessageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgentDefinitionCountOutputTypeDefaultArgs instead
     */
    export type AgentDefinitionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgentDefinitionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalCountOutputTypeDefaultArgs instead
     */
    export type ProposalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IntegrationConfigCountOutputTypeDefaultArgs instead
     */
    export type IntegrationConfigCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IntegrationConfigCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrganizationDefaultArgs instead
     */
    export type OrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatDefaultArgs instead
     */
    export type ChatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatMessageDefaultArgs instead
     */
    export type ChatMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatFeedbackDefaultArgs instead
     */
    export type ChatFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatFeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgentDefinitionDefaultArgs instead
     */
    export type AgentDefinitionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgentDefinitionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgentConnectionDefaultArgs instead
     */
    export type AgentConnectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgentConnectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgentExecutionDefaultArgs instead
     */
    export type AgentExecutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgentExecutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalDefaultArgs instead
     */
    export type ProposalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApprovalDefaultArgs instead
     */
    export type ApprovalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApprovalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CostTrackingDefaultArgs instead
     */
    export type CostTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CostTrackingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NeuraMetricDailyDefaultArgs instead
     */
    export type NeuraMetricDailyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NeuraMetricDailyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserConsentDefaultArgs instead
     */
    export type UserConsentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserConsentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PromptVersionDefaultArgs instead
     */
    export type PromptVersionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PromptVersionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IntegrationConfigDefaultArgs instead
     */
    export type IntegrationConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IntegrationConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IntegrationSyncLogDefaultArgs instead
     */
    export type IntegrationSyncLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IntegrationSyncLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}