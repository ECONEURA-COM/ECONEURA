
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  plan: 'plan',
  industry: 'industry',
  employeeCount: 'employeeCount',
  annualRevenueEur: 'annualRevenueEur',
  settings: 'settings',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  role: 'role',
  department: 'department',
  hourlyRateEur: 'hourlyRateEur',
  mfaEnabled: 'mfaEnabled',
  mfaSecret: 'mfaSecret',
  emailVerified: 'emailVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshToken: 'refreshToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  neuraId: 'neuraId',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  role: 'role',
  content: 'content',
  model: 'model',
  tokensInput: 'tokensInput',
  tokensOutput: 'tokensOutput',
  tokensReasoning: 'tokensReasoning',
  costEur: 'costEur',
  latencyMs: 'latencyMs',
  functionCalls: 'functionCalls',
  createdAt: 'createdAt'
};

exports.Prisma.ChatFeedbackScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  rating: 'rating',
  feedbackText: 'feedbackText',
  createdAt: 'createdAt'
};

exports.Prisma.AgentDefinitionScalarFieldEnum = {
  id: 'id',
  neuraId: 'neuraId',
  name: 'name',
  description: 'description',
  category: 'category',
  difficulty: 'difficulty',
  estimatedTimeSavedHours: 'estimatedTimeSavedHours',
  estimatedRoiPercentage: 'estimatedRoiPercentage',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.AgentConnectionScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  agentId: 'agentId',
  provider: 'provider',
  webhookUrl: 'webhookUrl',
  apiKeyEncrypted: 'apiKeyEncrypted',
  config: 'config',
  isActive: 'isActive',
  lastTestedAt: 'lastTestedAt',
  lastTestSuccess: 'lastTestSuccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AgentExecutionScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  agentId: 'agentId',
  neuraId: 'neuraId',
  chatMessageId: 'chatMessageId',
  proposalId: 'proposalId',
  parameters: 'parameters',
  result: 'result',
  status: 'status',
  errorMessage: 'errorMessage',
  durationMs: 'durationMs',
  retryCount: 'retryCount',
  idempotencyKey: 'idempotencyKey',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  createdByUserId: 'createdByUserId',
  neuraId: 'neuraId',
  action: 'action',
  description: 'description',
  parameters: 'parameters',
  impactAnalysis: 'impactAnalysis',
  requiredApprovals: 'requiredApprovals',
  rollbackPlan: 'rollbackPlan',
  status: 'status',
  executedAt: 'executedAt',
  executionResult: 'executionResult',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deadlineAt: 'deadlineAt'
};

exports.Prisma.ApprovalScalarFieldEnum = {
  id: 'id',
  proposalId: 'proposalId',
  userId: 'userId',
  roleRequired: 'roleRequired',
  approved: 'approved',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  organizationId: 'organizationId',
  userId: 'userId',
  neuraId: 'neuraId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  beforeState: 'beforeState',
  afterState: 'afterState',
  proposalId: 'proposalId',
  approvedBy: 'approvedBy',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  correlationId: 'correlationId',
  hash: 'hash',
  previousHash: 'previousHash',
  metadata: 'metadata'
};

exports.Prisma.CostTrackingScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  userId: 'userId',
  neuraId: 'neuraId',
  agentId: 'agentId',
  resourceType: 'resourceType',
  resourceName: 'resourceName',
  tokensInput: 'tokensInput',
  tokensOutput: 'tokensOutput',
  tokensReasoning: 'tokensReasoning',
  costEur: 'costEur',
  costUsd: 'costUsd',
  model: 'model',
  timestamp: 'timestamp'
};

exports.Prisma.NeuraMetricDailyScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  neuraId: 'neuraId',
  date: 'date',
  conversationsCount: 'conversationsCount',
  messagesCount: 'messagesCount',
  agentExecutionsCount: 'agentExecutionsCount',
  timeSavedHours: 'timeSavedHours',
  valueGeneratedEur: 'valueGeneratedEur',
  costConsumedEur: 'costConsumedEur',
  roiPercentage: 'roiPercentage',
  avgResponseTimeMs: 'avgResponseTimeMs',
  errorCount: 'errorCount',
  userSatisfactionAvg: 'userSatisfactionAvg',
  createdAt: 'createdAt'
};

exports.Prisma.UserConsentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  consentType: 'consentType',
  granted: 'granted',
  ipAddress: 'ipAddress',
  grantedAt: 'grantedAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.PromptVersionScalarFieldEnum = {
  id: 'id',
  neuraId: 'neuraId',
  version: 'version',
  systemPrompt: 'systemPrompt',
  contextTemplate: 'contextTemplate',
  fewShotExamples: 'fewShotExamples',
  tools: 'tools',
  model: 'model',
  temperature: 'temperature',
  maxTokens: 'maxTokens',
  isActive: 'isActive',
  performanceScore: 'performanceScore',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.IntegrationConfigScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  integrationType: 'integrationType',
  credentialsEncrypted: 'credentialsEncrypted',
  config: 'config',
  isActive: 'isActive',
  lastSyncAt: 'lastSyncAt',
  createdAt: 'createdAt'
};

exports.Prisma.IntegrationSyncLogScalarFieldEnum = {
  id: 'id',
  integrationConfigId: 'integrationConfigId',
  syncType: 'syncType',
  recordsProcessed: 'recordsProcessed',
  recordsSuccess: 'recordsSuccess',
  recordsFailed: 'recordsFailed',
  durationMs: 'durationMs',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  channels: 'channels',
  priority: 'priority',
  readAt: 'readAt',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.OrganizationOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  plan: 'plan',
  industry: 'industry'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  passwordHash: 'passwordHash',
  name: 'name',
  role: 'role',
  department: 'department',
  mfaSecret: 'mfaSecret'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  refreshToken: 'refreshToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.ChatOrderByRelevanceFieldEnum = {
  neuraId: 'neuraId',
  title: 'title'
};

exports.Prisma.ChatMessageOrderByRelevanceFieldEnum = {
  role: 'role',
  content: 'content',
  model: 'model'
};

exports.Prisma.ChatFeedbackOrderByRelevanceFieldEnum = {
  feedbackText: 'feedbackText'
};

exports.Prisma.AgentDefinitionOrderByRelevanceFieldEnum = {
  id: 'id',
  neuraId: 'neuraId',
  name: 'name',
  description: 'description',
  category: 'category',
  difficulty: 'difficulty',
  tags: 'tags'
};

exports.Prisma.AgentConnectionOrderByRelevanceFieldEnum = {
  agentId: 'agentId',
  provider: 'provider',
  webhookUrl: 'webhookUrl',
  apiKeyEncrypted: 'apiKeyEncrypted'
};

exports.Prisma.AgentExecutionOrderByRelevanceFieldEnum = {
  agentId: 'agentId',
  neuraId: 'neuraId',
  status: 'status',
  errorMessage: 'errorMessage',
  idempotencyKey: 'idempotencyKey'
};

exports.Prisma.ProposalOrderByRelevanceFieldEnum = {
  neuraId: 'neuraId',
  action: 'action',
  description: 'description',
  requiredApprovals: 'requiredApprovals',
  rollbackPlan: 'rollbackPlan',
  status: 'status'
};

exports.Prisma.ApprovalOrderByRelevanceFieldEnum = {
  roleRequired: 'roleRequired',
  comment: 'comment'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  neuraId: 'neuraId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  correlationId: 'correlationId',
  hash: 'hash',
  previousHash: 'previousHash'
};

exports.Prisma.CostTrackingOrderByRelevanceFieldEnum = {
  neuraId: 'neuraId',
  agentId: 'agentId',
  resourceType: 'resourceType',
  resourceName: 'resourceName',
  model: 'model'
};

exports.Prisma.NeuraMetricDailyOrderByRelevanceFieldEnum = {
  neuraId: 'neuraId'
};

exports.Prisma.UserConsentOrderByRelevanceFieldEnum = {
  consentType: 'consentType',
  ipAddress: 'ipAddress'
};

exports.Prisma.PromptVersionOrderByRelevanceFieldEnum = {
  neuraId: 'neuraId',
  systemPrompt: 'systemPrompt',
  contextTemplate: 'contextTemplate',
  model: 'model'
};

exports.Prisma.IntegrationConfigOrderByRelevanceFieldEnum = {
  integrationType: 'integrationType',
  credentialsEncrypted: 'credentialsEncrypted'
};

exports.Prisma.IntegrationSyncLogOrderByRelevanceFieldEnum = {
  syncType: 'syncType',
  errorMessage: 'errorMessage'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  type: 'type',
  title: 'title',
  message: 'message',
  channels: 'channels',
  priority: 'priority',
  actionUrl: 'actionUrl'
};


exports.Prisma.ModelName = {
  Organization: 'Organization',
  User: 'User',
  Session: 'Session',
  Chat: 'Chat',
  ChatMessage: 'ChatMessage',
  ChatFeedback: 'ChatFeedback',
  AgentDefinition: 'AgentDefinition',
  AgentConnection: 'AgentConnection',
  AgentExecution: 'AgentExecution',
  Proposal: 'Proposal',
  Approval: 'Approval',
  AuditLog: 'AuditLog',
  CostTracking: 'CostTracking',
  NeuraMetricDaily: 'NeuraMetricDaily',
  UserConsent: 'UserConsent',
  PromptVersion: 'PromptVersion',
  IntegrationConfig: 'IntegrationConfig',
  IntegrationSyncLog: 'IntegrationSyncLog',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
