// ECONEURA Prisma Schema - Enterprise Grade
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp"), pgcrypto, pg_trgm]
}

model Organization {
  id               Int      @id @default(autoincrement())
  name             String
  slug             String   @unique
  plan             String   @default("basic") // basic, pro, enterprise
  industry         String?
  employeeCount    Int?     @map("employee_count")
  annualRevenueEur Decimal? @map("annual_revenue_eur") @db.Decimal(15, 2)
  settings         Json     @default("{}")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  users              User[]
  chats              Chat[]
  agentConnections   AgentConnection[]
  agentExecutions    AgentExecution[]
  proposals          Proposal[]
  auditLogs          AuditLog[]
  costTracking       CostTracking[]
  neuraMetrics       NeuraMetricDaily[]
  integrationConfigs IntegrationConfig[]

  @@index([slug])
  @@index([plan])
  @@map("organizations")
}

model User {
  id             Int       @id @default(autoincrement())
  organizationId Int       @map("organization_id")
  email          String
  passwordHash   String    @map("password_hash")
  name           String
  role           String    @default("user") // admin, user, viewer
  department     String? // CEO, CFO, CTO, etc.
  hourlyRateEur  Decimal?  @default(50.00) @map("hourly_rate_eur") @db.Decimal(10, 2)
  mfaEnabled     Boolean   @default(false) @map("mfa_enabled")
  mfaSecret      String?   @map("mfa_secret")
  emailVerified  Boolean   @default(false) @map("email_verified")
  lastLoginAt    DateTime? @map("last_login_at") @db.Timestamptz(6)
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sessions         Session[]
  chats            Chat[]
  chatFeedback     ChatFeedback[]
  agentConnections AgentConnection[]
  agentExecutions  AgentExecution[]
  proposalsCreated Proposal[]        @relation("ProposalCreator")
  approvals        Approval[]
  auditLogs        AuditLog[]
  notifications    Notification[]
  consents         UserConsent[]

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([email])
  @@index([department])
  @@map("users")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       Int      @map("user_id")
  refreshToken String   @unique @map("refresh_token")
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent")
  expiresAt    DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("sessions")
}

model Chat {
  id             BigInt   @id @default(autoincrement())
  userId         Int      @map("user_id")
  organizationId Int      @map("organization_id")
  neuraId        String   @map("neura_id") @db.VarChar(50)
  title          String?
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  messages     ChatMessage[]

  @@index([userId])
  @@index([organizationId])
  @@index([neuraId])
  @@index([createdAt(sort: Desc)])
  @@map("chats")
}

model ChatMessage {
  id              BigInt   @id @default(autoincrement())
  chatId          BigInt   @map("chat_id")
  role            String   @db.VarChar(20) // user, assistant, system
  content         String
  model           String?  @db.VarChar(50)
  tokensInput     Int?     @map("tokens_input")
  tokensOutput    Int?     @map("tokens_output")
  tokensReasoning Int?     @map("tokens_reasoning")
  costEur         Decimal? @map("cost_eur") @db.Decimal(10, 6)
  latencyMs       Int?     @map("latency_ms")
  functionCalls   Json?    @map("function_calls")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  chat     Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  feedback ChatFeedback[]

  @@index([chatId])
  @@index([createdAt(sort: Desc)])
  @@map("chat_messages")
}

model ChatFeedback {
  id           Int      @id @default(autoincrement())
  messageId    BigInt   @map("message_id")
  userId       Int      @map("user_id")
  rating       Int?
  feedbackText String?  @map("feedback_text")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id])

  @@map("chat_feedback")
}

model AgentDefinition {
  id                      String   @id @db.VarChar(50) // a-ceo-01
  neuraId                 String   @map("neura_id") @db.VarChar(50)
  name                    String
  description             String?
  category                String?  @db.VarChar(100)
  difficulty              String?  @db.VarChar(50)
  estimatedTimeSavedHours Decimal? @map("estimated_time_saved_hours") @db.Decimal(10, 2)
  estimatedRoiPercentage  Decimal? @map("estimated_roi_percentage") @db.Decimal(10, 2)
  tags                    String[]
  metadata                Json?
  createdAt               DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  connections AgentConnection[]
  executions  AgentExecution[]

  @@index([neuraId])
  @@index([category])
  @@map("agent_definitions")
}

model AgentConnection {
  id              Int       @id @default(autoincrement())
  organizationId  Int       @map("organization_id")
  userId          Int       @map("user_id")
  agentId         String    @map("agent_id") @db.VarChar(50)
  provider        String    @db.VarChar(50) // make, n8n, powerautomate, zapier, chatgpt
  webhookUrl      String?   @map("webhook_url")
  apiKeyEncrypted String?   @map("api_key_encrypted")
  config          Json?
  isActive        Boolean   @default(true) @map("is_active")
  lastTestedAt    DateTime? @map("last_tested_at") @db.Timestamptz(6)
  lastTestSuccess Boolean?  @map("last_test_success")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
  agentDefinition AgentDefinition @relation(fields: [agentId], references: [id])

  @@unique([organizationId, agentId])
  @@index([organizationId])
  @@index([agentId])
  @@index([userId])
  @@map("agent_connections")
}

model AgentExecution {
  id             BigInt    @id @default(autoincrement())
  organizationId Int       @map("organization_id")
  userId         Int       @map("user_id")
  agentId        String    @map("agent_id") @db.VarChar(50)
  neuraId        String?   @map("neura_id") @db.VarChar(50)
  chatMessageId  BigInt?   @map("chat_message_id")
  proposalId     Int?      @map("proposal_id")
  parameters     Json?
  result         Json?
  status         String    @db.VarChar(50) // pending, running, success, error
  errorMessage   String?   @map("error_message")
  durationMs     Int?      @map("duration_ms")
  retryCount     Int       @default(0) @map("retry_count")
  idempotencyKey String?   @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  startedAt      DateTime? @map("started_at") @db.Timestamptz(6)
  completedAt    DateTime? @map("completed_at") @db.Timestamptz(6)

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
  agentDefinition AgentDefinition @relation(fields: [agentId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([agentId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("agent_executions")
}

model Proposal {
  id                Int       @id @default(autoincrement())
  organizationId    Int       @map("organization_id")
  createdByUserId   Int       @map("created_by_user_id")
  neuraId           String    @map("neura_id") @db.VarChar(50)
  action            String    @db.VarChar(100)
  description       String
  parameters        Json
  impactAnalysis    Json?     @map("impact_analysis")
  requiredApprovals String[]  @map("required_approvals")
  rollbackPlan      String?   @map("rollback_plan")
  status            String    @default("pending") @db.VarChar(50)
  executedAt        DateTime? @map("executed_at") @db.Timestamptz(6)
  executionResult   Json?     @map("execution_result")
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deadlineAt        DateTime? @map("deadline_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy    User         @relation("ProposalCreator", fields: [createdByUserId], references: [id])
  approvals    Approval[]

  @@index([organizationId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("proposals")
}

model Approval {
  id           Int      @id @default(autoincrement())
  proposalId   Int      @map("proposal_id")
  userId       Int      @map("user_id")
  roleRequired String   @map("role_required") @db.VarChar(50)
  approved     Boolean?
  comment      String?
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  proposal Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@unique([proposalId, userId])
  @@index([proposalId])
  @@index([userId])
  @@map("approvals")
}

model AuditLog {
  id             BigInt   @id @default(autoincrement())
  timestamp      DateTime @default(now()) @db.Timestamptz(6)
  organizationId Int      @map("organization_id")
  userId         Int?     @map("user_id")
  neuraId        String?  @map("neura_id") @db.VarChar(50)
  action         String   @db.VarChar(100)
  entityType     String?  @map("entity_type") @db.VarChar(50)
  entityId       String?  @map("entity_id") @db.VarChar(100)
  beforeState    Json?    @map("before_state")
  afterState     Json?    @map("after_state")
  proposalId     Int?     @map("proposal_id")
  approvedBy     Int[]    @map("approved_by")
  ipAddress      String?  @map("ip_address") @db.Inet
  userAgent      String?  @map("user_agent")
  correlationId  String   @default(dbgenerated("uuid_generate_v4()")) @map("correlation_id") @db.Uuid
  hash           String   @db.VarChar(64)
  previousHash   String?  @map("previous_hash") @db.VarChar(64)
  metadata       Json?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id])

  @@index([organizationId, timestamp(sort: Desc)])
  @@index([userId, timestamp(sort: Desc)])
  @@index([action])
  @@index([correlationId])
  @@index([hash])
  @@map("audit_log")
}

model CostTracking {
  id              BigInt   @id @default(autoincrement())
  organizationId  Int      @map("organization_id")
  userId          Int?     @map("user_id")
  neuraId         String?  @map("neura_id") @db.VarChar(50)
  agentId         String?  @map("agent_id") @db.VarChar(50)
  resourceType    String   @map("resource_type") @db.VarChar(50) // openai, azure_db, redis
  resourceName    String?  @map("resource_name") @db.VarChar(100)
  tokensInput     Int?     @map("tokens_input")
  tokensOutput    Int?     @map("tokens_output")
  tokensReasoning Int?     @map("tokens_reasoning")
  costEur         Decimal  @map("cost_eur") @db.Decimal(10, 6)
  costUsd         Decimal? @map("cost_usd") @db.Decimal(10, 6)
  model           String?  @db.VarChar(50)
  timestamp       DateTime @default(now()) @db.Timestamptz(6)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, timestamp(sort: Desc)])
  @@index([neuraId])
  @@map("cost_tracking")
}

model NeuraMetricDaily {
  id                   Int      @id @default(autoincrement())
  organizationId       Int      @map("organization_id")
  neuraId              String   @map("neura_id") @db.VarChar(50)
  date                 DateTime @db.Date
  conversationsCount   Int      @default(0) @map("conversations_count")
  messagesCount        Int      @default(0) @map("messages_count")
  agentExecutionsCount Int      @default(0) @map("agent_executions_count")
  timeSavedHours       Decimal  @default(0) @map("time_saved_hours") @db.Decimal(10, 2)
  valueGeneratedEur    Decimal  @default(0) @map("value_generated_eur") @db.Decimal(10, 2)
  costConsumedEur      Decimal  @default(0) @map("cost_consumed_eur") @db.Decimal(10, 2)
  roiPercentage        Decimal? @map("roi_percentage") @db.Decimal(10, 2)
  avgResponseTimeMs    Int?     @map("avg_response_time_ms")
  errorCount           Int      @default(0) @map("error_count")
  userSatisfactionAvg  Decimal? @map("user_satisfaction_avg") @db.Decimal(3, 2)
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, neuraId, date])
  @@index([organizationId, date(sort: Desc)])
  @@index([neuraId])
  @@map("neura_metrics_daily")
}

model UserConsent {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  consentType String    @map("consent_type") @db.VarChar(100)
  granted     Boolean
  ipAddress   String?   @map("ip_address") @db.Inet
  grantedAt   DateTime  @default(now()) @map("granted_at") @db.Timestamptz(6)
  revokedAt   DateTime? @map("revoked_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_consents")
}

model PromptVersion {
  id               Int      @id @default(autoincrement())
  neuraId          String   @map("neura_id") @db.VarChar(50)
  version          Int
  systemPrompt     String   @map("system_prompt")
  contextTemplate  String?  @map("context_template")
  fewShotExamples  Json?    @map("few_shot_examples")
  tools            Json?
  model            String?  @db.VarChar(50)
  temperature      Decimal? @db.Decimal(3, 2)
  maxTokens        Int?     @map("max_tokens")
  isActive         Boolean  @default(false) @map("is_active")
  performanceScore Decimal? @map("performance_score") @db.Decimal(5, 2)
  createdById      Int?     @map("created_by")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@unique([neuraId, version])
  @@index([neuraId])
  @@index([neuraId, isActive])
  @@map("prompt_versions")
}

model IntegrationConfig {
  id                   Int       @id @default(autoincrement())
  organizationId       Int       @map("organization_id")
  integrationType      String    @map("integration_type") @db.VarChar(100)
  credentialsEncrypted String    @map("credentials_encrypted")
  config               Json?
  isActive             Boolean   @default(true) @map("is_active")
  lastSyncAt           DateTime? @map("last_sync_at") @db.Timestamptz(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  organization Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  syncLogs     IntegrationSyncLog[]

  @@unique([organizationId, integrationType])
  @@map("integration_configs")
}

model IntegrationSyncLog {
  id                  BigInt   @id @default(autoincrement())
  integrationConfigId Int      @map("integration_config_id")
  syncType            String?  @db.VarChar(100)
  recordsProcessed    Int?     @map("records_processed")
  recordsSuccess      Int?     @map("records_success")
  recordsFailed       Int?     @map("records_failed")
  durationMs          Int?     @map("duration_ms")
  errorMessage        String?  @map("error_message")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  integrationConfig IntegrationConfig @relation(fields: [integrationConfigId], references: [id], onDelete: Cascade)

  @@map("integration_sync_logs")
}

model Notification {
  id        BigInt    @id @default(autoincrement())
  userId    Int       @map("user_id")
  type      String    @db.VarChar(50)
  title     String
  message   String?
  channels  String[]
  priority  String    @default("normal") @db.VarChar(20)
  readAt    DateTime? @map("read_at") @db.Timestamptz(6)
  actionUrl String?   @map("action_url")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, readAt])
  @@map("notifications")
}
