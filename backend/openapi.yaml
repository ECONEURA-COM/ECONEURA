openapi: 3.0.3
info:
  title: ECONEURA API
  version: 2.0.0
  description: |
    Backend API para ECONEURA - Sistema de inteligencia colectiva para PYMEs europeas.
    
    ## Características
    - 60 agentes especializados en 10 departamentos
    - Integración OpenAI (GPT-4, Claude Sonnet 4.5)
    - Azure Key Vault para secretos
    - Autenticación JWT (futuro)
    - Rate limiting
    
  contact:
    name: ECONEURA Team
    url: https://econeura.com
    email: support@econeura.com
  license:
    name: Proprietary
    
servers:
  - url: https://econeura-api-dev.azurewebsites.net
    description: Production Azure App Service
  - url: http://localhost:3002
    description: Local development

tags:
  - name: Health
    description: Health checks y status
  - name: Chat
    description: Endpoints de conversación con agentes
  - name: Agents
    description: Gestión de agentes NEURA

paths:
  /api/health:
    get:
      tags:
        - Health
      summary: Health check del servidor
      description: Retorna estado del servidor, versión, uptime y conexiones
      operationId: getHealth
      responses:
        '200':
          description: Servidor saludable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: healthy
                timestamp: '2025-10-22T12:00:00.000Z'
                version: 2.0.0
                node: v20.11.0
                uptime: 3600
                memory:
                  used: 150MB
                  total: 512MB
                services:
                  openai: connected
                  keyVault: connected
        '503':
          description: Servidor no disponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/invoke/{assistantId}:
    post:
      tags:
        - Chat
      summary: Enviar mensaje a un agente NEURA
      description: |
        Envía un mensaje a un agente específico y recibe una respuesta.
        Soporta streaming de respuestas.
      operationId: invokeAgent
      parameters:
        - name: assistantId
          in: path
          required: true
          description: ID del asistente (ej. a-ceo-01, a-marketing-01)
          schema:
            type: string
            pattern: '^a-[a-z]+-\d{2}$'
            example: a-ceo-01
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            example:
              message: ¿Cómo puedo mejorar mi estrategia de marketing digital?
              conversationId: conv-123
              streaming: true
      responses:
        '200':
          description: Respuesta exitosa del agente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
              example:
                success: true
                message: Aquí tienes 5 estrategias clave...
                conversationId: conv-123
                timestamp: '2025-10-22T12:00:00.000Z'
                tokensUsed: 150
        '400':
          description: Request inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Message is required
        '404':
          description: Agente no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/agents:
    get:
      tags:
        - Agents
      summary: Listar todos los agentes NEURA
      description: Retorna lista completa de 60 agentes organizados por departamento
      operationId: listAgents
      parameters:
        - name: department
          in: query
          description: Filtrar por departamento
          schema:
            type: string
            enum:
              - presidencia
              - marketing
              - finanzas
              - legal
              - rrhh
              - retail
              - supply
              - cybersec
              - ia
              - ma
      responses:
        '200':
          description: Lista de agentes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Agent'
              example:
                success: true
                agents:
                  - id: a-ceo-01
                    name: CEO
                    department: presidencia
                    model: claude-sonnet-4.5
                    description: Estrategia empresarial y liderazgo
                  - id: a-marketing-01
                    name: Marketing
                    department: marketing
                    model: claude-sonnet-4.5
                    description: Campañas y estrategias de marketing

  /api/agents/{agentId}:
    get:
      tags:
        - Agents
      summary: Obtener detalles de un agente específico
      operationId: getAgent
      parameters:
        - name: agentId
          in: path
          required: true
          schema:
            type: string
            example: a-ceo-01
      responses:
        '200':
          description: Detalles del agente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  agent:
                    $ref: '#/components/schemas/Agent'
        '404':
          description: Agente no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: healthy
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: 2.0.0
        node:
          type: string
          example: v20.11.0
        uptime:
          type: integer
          description: Uptime en segundos
          example: 3600
        memory:
          type: object
          properties:
            used:
              type: string
              example: 150MB
            total:
              type: string
              example: 512MB
        services:
          type: object
          properties:
            openai:
              type: string
              enum: [connected, disconnected]
            keyVault:
              type: string
              enum: [connected, disconnected]
            database:
              type: string
              enum: [connected, disconnected]

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 10000
          description: Mensaje del usuario
          example: ¿Cómo puedo mejorar mis ventas?
        conversationId:
          type: string
          description: ID de conversación para contexto
          example: conv-123
        streaming:
          type: boolean
          default: true
          description: Habilitar streaming de respuesta
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 0.7
          description: Temperatura del modelo (creatividad)
        maxTokens:
          type: integer
          minimum: 1
          maximum: 4000
          default: 1000
          description: Máximo tokens en respuesta

    ChatResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Respuesta del agente
          example: Aquí tienes 5 estrategias para mejorar tus ventas...
        conversationId:
          type: string
          example: conv-123
        timestamp:
          type: string
          format: date-time
        tokensUsed:
          type: integer
          description: Tokens consumidos en la request
          example: 150
        model:
          type: string
          description: Modelo usado para la respuesta
          example: claude-sonnet-4.5

    Agent:
      type: object
      required:
        - id
        - name
        - department
      properties:
        id:
          type: string
          pattern: '^a-[a-z]+-\d{2}$'
          example: a-ceo-01
        name:
          type: string
          example: CEO
        department:
          type: string
          example: presidencia
        model:
          type: string
          example: claude-sonnet-4.5
        description:
          type: string
          example: Estrategia empresarial y liderazgo
        avatar:
          type: string
          format: uri
          example: https://econeura.com/avatars/ceo.png
        capabilities:
          type: array
          items:
            type: string
          example:
            - Análisis estratégico
            - Toma de decisiones
            - Liderazgo

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Mensaje de error
          example: Message is required
        code:
          type: string
          description: Código de error
          example: INVALID_REQUEST
        timestamp:
          type: string
          format: date-time

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token para autenticación (futuro)

security:
  - BearerAuth: []
